### YamlMime:ManagedReference
items:
- uid: OpenTK.Mathematics.Vector2
  commentId: T:OpenTK.Mathematics.Vector2
  id: Vector2
  parent: OpenTK.Mathematics
  children:
  - OpenTK.Mathematics.Vector2.#ctor(System.Single,System.Single)
  - OpenTK.Mathematics.Vector2.#ctor(System.Single)
  - OpenTK.Mathematics.Vector2.Abs
  - OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single,System.Single)
  - OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,System.Single,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Ceiling
  - OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Deconstruct(System.Single@,System.Single@)
  - OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  - OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  - OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2,System.Single)
  - OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  - OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  - OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Equals(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Equals(System.Object)
  - OpenTK.Mathematics.Vector2.Floor
  - OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.GetHashCode
  - OpenTK.Mathematics.Vector2.Item(System.Int32)
  - OpenTK.Mathematics.Vector2.Length
  - OpenTK.Mathematics.Vector2.LengthFast
  - OpenTK.Mathematics.Vector2.LengthSquared
  - OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  - OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2,System.Single)
  - OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.NegativeInfinity
  - OpenTK.Mathematics.Vector2.Normalize
  - OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Normalized
  - OpenTK.Mathematics.Vector2.NormalizeFast
  - OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.One
  - OpenTK.Mathematics.Vector2.op_Addition(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,System.Single)
  - OpenTK.Mathematics.Vector2.op_Equality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2h
  - OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2i
  - OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.PointF
  - OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.SizeF
  - OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Numerics.Vector2
  - OpenTK.Mathematics.Vector2.op_Explicit(System.Numerics.Vector2)~OpenTK.Mathematics.Vector2
  - OpenTK.Mathematics.Vector2.op_Implicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2d
  - OpenTK.Mathematics.Vector2.op_Implicit(System.ValueTuple{System.Single,System.Single})~OpenTK.Mathematics.Vector2
  - OpenTK.Mathematics.Vector2.op_Inequality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Quaternion,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  - OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,System.Single)
  - OpenTK.Mathematics.Vector2.op_Multiply(System.Single,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_Subtraction(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.op_UnaryNegation(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  - OpenTK.Mathematics.Vector2.PerpendicularLeft
  - OpenTK.Mathematics.Vector2.PerpendicularRight
  - OpenTK.Mathematics.Vector2.PositiveInfinity
  - OpenTK.Mathematics.Vector2.ReciprocalLengthFast
  - OpenTK.Mathematics.Vector2.Round
  - OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2,System.MidpointRounding)
  - OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2@,System.MidpointRounding,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Round(System.MidpointRounding)
  - OpenTK.Mathematics.Vector2.SizeInBytes
  - OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  - OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.ToString
  - OpenTK.Mathematics.Vector2.ToString(System.IFormatProvider)
  - OpenTK.Mathematics.Vector2.ToString(System.String,System.IFormatProvider)
  - OpenTK.Mathematics.Vector2.ToString(System.String)
  - OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Quaternion)
  - OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Quaternion@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  - OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.Truncate
  - OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2)
  - OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  - OpenTK.Mathematics.Vector2.UnitX
  - OpenTK.Mathematics.Vector2.UnitY
  - OpenTK.Mathematics.Vector2.X
  - OpenTK.Mathematics.Vector2.Y
  - OpenTK.Mathematics.Vector2.Yx
  - OpenTK.Mathematics.Vector2.Zero
  langs:
  - csharp
  - vb
  name: Vector2
  nameWithType: Vector2
  fullName: OpenTK.Mathematics.Vector2
  type: Struct
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Vector2
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 37
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Represents a 2D vector using two single-precision floating-point numbers.
  remarks: The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct Vector2 : IEquatable<Vector2>, IFormattable
    content.vb: >-
      <Serializable>

      Public Structure Vector2 Implements IEquatable(Of Vector2), IFormattable
  implements:
  - System.IEquatable{OpenTK.Mathematics.Vector2}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.X
  commentId: F:OpenTK.Mathematics.Vector2.X
  id: X
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector2.X
  fullName: OpenTK.Mathematics.Vector2.X
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: X
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 44
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: The X component of the Vector2.
  example: []
  syntax:
    content: public float X
    return:
      type: System.Single
    content.vb: Public X As Single
- uid: OpenTK.Mathematics.Vector2.Y
  commentId: F:OpenTK.Mathematics.Vector2.Y
  id: Y
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector2.Y
  fullName: OpenTK.Mathematics.Vector2.Y
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Y
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 49
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: The Y component of the Vector2.
  example: []
  syntax:
    content: public float Y
    return:
      type: System.Single
    content.vb: Public Y As Single
- uid: OpenTK.Mathematics.Vector2.#ctor(System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Vector2(float)
  nameWithType: Vector2.Vector2(float)
  fullName: OpenTK.Mathematics.Vector2.Vector2(float)
  type: Constructor
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: .ctor
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 55
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Initializes a new instance of the <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public Vector2(float value)
    parameters:
    - id: value
      type: System.Single
      description: The value that will initialize this instance.
    content.vb: Public Sub New(value As Single)
  overload: OpenTK.Mathematics.Vector2.#ctor*
  nameWithType.vb: Vector2.New(Single)
  fullName.vb: OpenTK.Mathematics.Vector2.New(Single)
  name.vb: New(Single)
- uid: OpenTK.Mathematics.Vector2.#ctor(System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.#ctor(System.Single,System.Single)
  id: '#ctor(System.Single,System.Single)'
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Vector2(float, float)
  nameWithType: Vector2.Vector2(float, float)
  fullName: OpenTK.Mathematics.Vector2.Vector2(float, float)
  type: Constructor
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: .ctor
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 66
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Initializes a new instance of the <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public Vector2(float x, float y)
    parameters:
    - id: x
      type: System.Single
      description: The x coordinate of the net Vector2.
    - id: y
      type: System.Single
      description: The y coordinate of the net Vector2.
    content.vb: Public Sub New(x As Single, y As Single)
  overload: OpenTK.Mathematics.Vector2.#ctor*
  nameWithType.vb: Vector2.New(Single, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.New(Single, Single)
  name.vb: New(Single, Single)
- uid: OpenTK.Mathematics.Vector2.Item(System.Int32)
  commentId: P:OpenTK.Mathematics.Vector2.Item(System.Int32)
  id: Item(System.Int32)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: Vector2.this[int]
  fullName: OpenTK.Mathematics.Vector2.this[int]
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: this[]
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 77
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets or sets the value at the index of the Vector.
  example: []
  syntax:
    content: public float this[int index] { readonly get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The index of the component from the Vector.
    return:
      type: System.Single
    content.vb: Public Default Property this[](index As Integer) As Single
  overload: OpenTK.Mathematics.Vector2.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Thrown if the index is less than 0 or greater than 1.
  nameWithType.vb: Vector2.this[](Integer)
  fullName.vb: OpenTK.Mathematics.Vector2.this[](Integer)
  name.vb: this[](Integer)
- uid: OpenTK.Mathematics.Vector2.Length
  commentId: P:OpenTK.Mathematics.Vector2.Length
  id: Length
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Vector2.Length
  fullName: OpenTK.Mathematics.Vector2.Length
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Length
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 116
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the length (magnitude) of the vector.
  example: []
  syntax:
    content: public readonly float Length { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Length As Single
  overload: OpenTK.Mathematics.Vector2.Length*
  seealso:
  - linkId: OpenTK.Mathematics.Vector2.LengthSquared
    commentId: P:OpenTK.Mathematics.Vector2.LengthSquared
- uid: OpenTK.Mathematics.Vector2.ReciprocalLengthFast
  commentId: P:OpenTK.Mathematics.Vector2.ReciprocalLengthFast
  id: ReciprocalLengthFast
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ReciprocalLengthFast
  nameWithType: Vector2.ReciprocalLengthFast
  fullName: OpenTK.Mathematics.Vector2.ReciprocalLengthFast
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ReciprocalLengthFast
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 121
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets an approximation of 1 over the length (magnitude) of the vector.
  example: []
  syntax:
    content: public readonly float ReciprocalLengthFast { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property ReciprocalLengthFast As Single
  overload: OpenTK.Mathematics.Vector2.ReciprocalLengthFast*
- uid: OpenTK.Mathematics.Vector2.LengthFast
  commentId: P:OpenTK.Mathematics.Vector2.LengthFast
  id: LengthFast
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: LengthFast
  nameWithType: Vector2.LengthFast
  fullName: OpenTK.Mathematics.Vector2.LengthFast
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: LengthFast
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 132
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets an approximation of the vector length (magnitude).
  remarks: >-
    This property uses an approximation of the square root function to calculate vector magnitude, with

    an upper error bound of 0.001.
  example: []
  syntax:
    content: public readonly float LengthFast { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property LengthFast As Single
  overload: OpenTK.Mathematics.Vector2.LengthFast*
  seealso:
  - linkId: OpenTK.Mathematics.Vector2.LengthSquared
    commentId: P:OpenTK.Mathematics.Vector2.LengthSquared
- uid: OpenTK.Mathematics.Vector2.LengthSquared
  commentId: P:OpenTK.Mathematics.Vector2.LengthSquared
  id: LengthSquared
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: LengthSquared
  nameWithType: Vector2.LengthSquared
  fullName: OpenTK.Mathematics.Vector2.LengthSquared
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: LengthSquared
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 143
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the square of the vector length (magnitude).
  remarks: >-
    This property avoids the costly square root operation required by the Length property. This makes it more suitable

    for comparisons.
  example: []
  syntax:
    content: public readonly float LengthSquared { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property LengthSquared As Single
  overload: OpenTK.Mathematics.Vector2.LengthSquared*
  seealso:
  - linkId: OpenTK.Mathematics.Vector2.LengthFast
    commentId: P:OpenTK.Mathematics.Vector2.LengthFast
- uid: OpenTK.Mathematics.Vector2.PerpendicularRight
  commentId: P:OpenTK.Mathematics.Vector2.PerpendicularRight
  id: PerpendicularRight
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: PerpendicularRight
  nameWithType: Vector2.PerpendicularRight
  fullName: OpenTK.Mathematics.Vector2.PerpendicularRight
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: PerpendicularRight
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 148
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the perpendicular vector on the right side of this vector.
  example: []
  syntax:
    content: public readonly Vector2 PerpendicularRight { get; }
    parameters: []
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public ReadOnly Property PerpendicularRight As Vector2
  overload: OpenTK.Mathematics.Vector2.PerpendicularRight*
- uid: OpenTK.Mathematics.Vector2.PerpendicularLeft
  commentId: P:OpenTK.Mathematics.Vector2.PerpendicularLeft
  id: PerpendicularLeft
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: PerpendicularLeft
  nameWithType: Vector2.PerpendicularLeft
  fullName: OpenTK.Mathematics.Vector2.PerpendicularLeft
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: PerpendicularLeft
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 153
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the perpendicular vector on the left side of this vector.
  example: []
  syntax:
    content: public readonly Vector2 PerpendicularLeft { get; }
    parameters: []
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public ReadOnly Property PerpendicularLeft As Vector2
  overload: OpenTK.Mathematics.Vector2.PerpendicularLeft*
- uid: OpenTK.Mathematics.Vector2.Normalized
  commentId: M:OpenTK.Mathematics.Vector2.Normalized
  id: Normalized
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Normalized()
  nameWithType: Vector2.Normalized()
  fullName: OpenTK.Mathematics.Vector2.Normalized()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Normalized
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 159
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a copy of the Vector2 scaled to unit length.
  example: []
  syntax:
    content: public readonly Vector2 Normalized()
    return:
      type: OpenTK.Mathematics.Vector2
      description: The normalized copy.
    content.vb: Public Function Normalized() As Vector2
  overload: OpenTK.Mathematics.Vector2.Normalized*
- uid: OpenTK.Mathematics.Vector2.Normalize
  commentId: M:OpenTK.Mathematics.Vector2.Normalize
  id: Normalize
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector2.Normalize()
  fullName: OpenTK.Mathematics.Vector2.Normalize()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Normalize
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 169
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scales the Vector2 to unit length.
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize()
  overload: OpenTK.Mathematics.Vector2.Normalize*
- uid: OpenTK.Mathematics.Vector2.NormalizeFast
  commentId: M:OpenTK.Mathematics.Vector2.NormalizeFast
  id: NormalizeFast
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: NormalizeFast()
  nameWithType: Vector2.NormalizeFast()
  fullName: OpenTK.Mathematics.Vector2.NormalizeFast()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: NormalizeFast
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 179
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scales the Vector2 to approximately unit length.
  example: []
  syntax:
    content: public void NormalizeFast()
    content.vb: Public Sub NormalizeFast()
  overload: OpenTK.Mathematics.Vector2.NormalizeFast*
- uid: OpenTK.Mathematics.Vector2.Abs
  commentId: M:OpenTK.Mathematics.Vector2.Abs
  id: Abs
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Abs()
  nameWithType: Vector2.Abs()
  fullName: OpenTK.Mathematics.Vector2.Abs()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 190
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the component-wise absolute value of the vector.
  example: []
  syntax:
    content: public readonly Vector2 Abs()
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise absolute value vector.
    content.vb: Public Function Abs() As Vector2
  overload: OpenTK.Mathematics.Vector2.Abs*
- uid: OpenTK.Mathematics.Vector2.Round
  commentId: M:OpenTK.Mathematics.Vector2.Round
  id: Round
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Round()
  nameWithType: Vector2.Round()
  fullName: OpenTK.Mathematics.Vector2.Round()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 203
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector were component-wise rounding has been applied.

    Equivalent to calling <xref href="System.MathF.Round(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public readonly Vector2 Round()
    return:
      type: OpenTK.Mathematics.Vector2
      description: The rounded vector.
    content.vb: Public Function Round() As Vector2
  overload: OpenTK.Mathematics.Vector2.Round*
- uid: OpenTK.Mathematics.Vector2.Round(System.MidpointRounding)
  commentId: M:OpenTK.Mathematics.Vector2.Round(System.MidpointRounding)
  id: Round(System.MidpointRounding)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Round(MidpointRounding)
  nameWithType: Vector2.Round(MidpointRounding)
  fullName: OpenTK.Mathematics.Vector2.Round(System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 214
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector were component-wise rounding has been applied with the specified midpoint rounding rule.

    Equivalent to calling <xref href="System.MathF.Round(System.Single%2cSystem.MidpointRounding)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public readonly Vector2 Round(MidpointRounding rounding)
    parameters:
    - id: rounding
      type: System.MidpointRounding
      description: The midpoint rounding rule to use.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The rounded vector.
    content.vb: Public Function Round(rounding As MidpointRounding) As Vector2
  overload: OpenTK.Mathematics.Vector2.Round*
- uid: OpenTK.Mathematics.Vector2.Ceiling
  commentId: M:OpenTK.Mathematics.Vector2.Ceiling
  id: Ceiling
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Ceiling()
  nameWithType: Vector2.Ceiling()
  fullName: OpenTK.Mathematics.Vector2.Ceiling()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Ceiling
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 224
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector were a component-wise ceiling operation has been applied.

    Equivalent to calling <xref href="System.MathF.Ceiling(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public readonly Vector2 Ceiling()
    return:
      type: OpenTK.Mathematics.Vector2
      description: The ceiled vector.
    content.vb: Public Function Ceiling() As Vector2
  overload: OpenTK.Mathematics.Vector2.Ceiling*
- uid: OpenTK.Mathematics.Vector2.Floor
  commentId: M:OpenTK.Mathematics.Vector2.Floor
  id: Floor
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Floor()
  nameWithType: Vector2.Floor()
  fullName: OpenTK.Mathematics.Vector2.Floor()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Floor
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 234
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector were a component-wise floor operation has been applied.

    Equivalent to calling <xref href="System.MathF.Floor(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public readonly Vector2 Floor()
    return:
      type: OpenTK.Mathematics.Vector2
      description: The floored vector.
    content.vb: Public Function Floor() As Vector2
  overload: OpenTK.Mathematics.Vector2.Floor*
- uid: OpenTK.Mathematics.Vector2.Truncate
  commentId: M:OpenTK.Mathematics.Vector2.Truncate
  id: Truncate
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Truncate()
  nameWithType: Vector2.Truncate()
  fullName: OpenTK.Mathematics.Vector2.Truncate()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Truncate
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 244
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector were component-wise truncation has been applied.

    Equivalent to calling <xref href="System.MathF.Truncate(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public readonly Vector2 Truncate()
    return:
      type: OpenTK.Mathematics.Vector2
      description: The truncated vector.
    content.vb: Public Function Truncate() As Vector2
  overload: OpenTK.Mathematics.Vector2.Truncate*
- uid: OpenTK.Mathematics.Vector2.UnitX
  commentId: F:OpenTK.Mathematics.Vector2.UnitX
  id: UnitX
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Vector2.UnitX
  fullName: OpenTK.Mathematics.Vector2.UnitX
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: UnitX
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 252
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines a unit-length Vector2 that points towards the X-axis.
  example: []
  syntax:
    content: public static readonly Vector2 UnitX
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public Shared ReadOnly UnitX As Vector2
- uid: OpenTK.Mathematics.Vector2.UnitY
  commentId: F:OpenTK.Mathematics.Vector2.UnitY
  id: UnitY
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Vector2.UnitY
  fullName: OpenTK.Mathematics.Vector2.UnitY
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: UnitY
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 257
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines a unit-length Vector2 that points towards the Y-axis.
  example: []
  syntax:
    content: public static readonly Vector2 UnitY
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public Shared ReadOnly UnitY As Vector2
- uid: OpenTK.Mathematics.Vector2.Zero
  commentId: F:OpenTK.Mathematics.Vector2.Zero
  id: Zero
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector2.Zero
  fullName: OpenTK.Mathematics.Vector2.Zero
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Zero
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 262
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to 0.
  example: []
  syntax:
    content: public static readonly Vector2 Zero
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public Shared ReadOnly Zero As Vector2
- uid: OpenTK.Mathematics.Vector2.One
  commentId: F:OpenTK.Mathematics.Vector2.One
  id: One
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Vector2.One
  fullName: OpenTK.Mathematics.Vector2.One
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: One
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 267
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to 1.
  example: []
  syntax:
    content: public static readonly Vector2 One
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public Shared ReadOnly One As Vector2
- uid: OpenTK.Mathematics.Vector2.PositiveInfinity
  commentId: F:OpenTK.Mathematics.Vector2.PositiveInfinity
  id: PositiveInfinity
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: PositiveInfinity
  nameWithType: Vector2.PositiveInfinity
  fullName: OpenTK.Mathematics.Vector2.PositiveInfinity
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: PositiveInfinity
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 272
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to positive infinity.
  example: []
  syntax:
    content: public static readonly Vector2 PositiveInfinity
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public Shared ReadOnly PositiveInfinity As Vector2
- uid: OpenTK.Mathematics.Vector2.NegativeInfinity
  commentId: F:OpenTK.Mathematics.Vector2.NegativeInfinity
  id: NegativeInfinity
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: NegativeInfinity
  nameWithType: Vector2.NegativeInfinity
  fullName: OpenTK.Mathematics.Vector2.NegativeInfinity
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: NegativeInfinity
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 277
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to negative infinity.
  example: []
  syntax:
    content: public static readonly Vector2 NegativeInfinity
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public Shared ReadOnly NegativeInfinity As Vector2
- uid: OpenTK.Mathematics.Vector2.SizeInBytes
  commentId: F:OpenTK.Mathematics.Vector2.SizeInBytes
  id: SizeInBytes
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: SizeInBytes
  nameWithType: Vector2.SizeInBytes
  fullName: OpenTK.Mathematics.Vector2.SizeInBytes
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: SizeInBytes
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 282
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the size of the Vector2 struct in bytes.
  example: []
  syntax:
    content: public static readonly int SizeInBytes
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly SizeInBytes As Integer
- uid: OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Add(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Add(Vector2, Vector2)
  nameWithType: Vector2.Add(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Add
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 290
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Adds two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Add(Vector2 a, Vector2 b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of operation.
    content.vb: >-
      <Pure>

      Public Shared Function Add(a As Vector2, b As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Add*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Add(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Add(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.Add(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Add(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Add
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 303
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Adds two vectors.
  example: []
  syntax:
    content: public static void Add(in Vector2 a, in Vector2 b, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: Result of operation.
    content.vb: Public Shared Sub Add(a As Vector2, b As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Add*
  nameWithType.vb: Vector2.Add(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Add(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Subtract(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Subtract(Vector2, Vector2)
  nameWithType: Vector2.Subtract(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Subtract
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 315
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Subtract one Vector from another.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Subtract(Vector2 a, Vector2 b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of subtraction.
    content.vb: >-
      <Pure>

      Public Shared Function Subtract(a As Vector2, b As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Subtract*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Subtract(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Subtract(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.Subtract(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Subtract(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Subtract
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 328
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Subtract one Vector from another.
  example: []
  syntax:
    content: public static void Subtract(in Vector2 a, in Vector2 b, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: Result of subtraction.
    content.vb: Public Shared Sub Subtract(a As Vector2, b As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Subtract*
  nameWithType.vb: Vector2.Subtract(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Subtract(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2,System.Single)
  id: Multiply(OpenTK.Mathematics.Vector2,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, float)
  nameWithType: Vector2.Multiply(Vector2, float)
  fullName: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 340
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Multiply(Vector2 vector, float scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: System.Single
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Multiply(vector As Vector2, scale As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.Multiply(Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2, Single)
  name.vb: Multiply(Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  id: Multiply(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(in Vector2, float, out Vector2)
  nameWithType: Vector2.Multiply(in Vector2, float, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Multiply(in OpenTK.Mathematics.Vector2, float, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 353
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by a scalar.
  example: []
  syntax:
    content: public static void Multiply(in Vector2 vector, float scale, out Vector2 result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: System.Single
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: Public Shared Sub Multiply(vector As Vector2, scale As Single, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Multiply*
  nameWithType.vb: Vector2.Multiply(Vector2, Single, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2, Single, OpenTK.Mathematics.Vector2)
  name.vb: Multiply(Vector2, Single, Vector2)
- uid: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, Vector2)
  nameWithType: Vector2.Multiply(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 365
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by the components a vector (scale).
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Multiply(Vector2 vector, Vector2 scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Multiply(vector As Vector2, scale As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Multiply(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.Multiply(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Multiply(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 378
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by the components of a vector (scale).
  example: []
  syntax:
    content: public static void Multiply(in Vector2 vector, in Vector2 scale, out Vector2 result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: Public Shared Sub Multiply(vector As Vector2, scale As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Multiply*
  nameWithType.vb: Vector2.Multiply(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Multiply(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2,System.Single)
  id: Divide(OpenTK.Mathematics.Vector2,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Divide(Vector2, float)
  nameWithType: Vector2.Divide(Vector2, float)
  fullName: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 390
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides a vector by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Divide(Vector2 vector, float scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: System.Single
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Divide(vector As Vector2, scale As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.Divide*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.Divide(Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2, Single)
  name.vb: Divide(Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  id: Divide(OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Divide(in Vector2, float, out Vector2)
  nameWithType: Vector2.Divide(in Vector2, float, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Divide(in OpenTK.Mathematics.Vector2, float, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 403
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides a vector by a scalar.
  example: []
  syntax:
    content: public static void Divide(in Vector2 vector, float scale, out Vector2 result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: System.Single
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: Public Shared Sub Divide(vector As Vector2, scale As Single, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Divide*
  nameWithType.vb: Vector2.Divide(Vector2, Single, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2, Single, OpenTK.Mathematics.Vector2)
  name.vb: Divide(Vector2, Single, Vector2)
- uid: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Divide(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Divide(Vector2, Vector2)
  nameWithType: Vector2.Divide(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 415
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides a vector by the components of a vector (scale).
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Divide(Vector2 vector, Vector2 scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Divide(vector As Vector2, scale As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Divide*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Divide(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Divide(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.Divide(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Divide(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 428
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divide a vector by the components of a vector (scale).
  example: []
  syntax:
    content: public static void Divide(in Vector2 vector, in Vector2 scale, out Vector2 result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: Result of the operation.
    content.vb: Public Shared Sub Divide(vector As Vector2, scale As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Divide*
  nameWithType.vb: Vector2.Divide(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Divide(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: ComponentMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ComponentMin(Vector2, Vector2)
  nameWithType: Vector2.ComponentMin(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ComponentMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 440
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the smallest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 ComponentMin(Vector2 a, Vector2 b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise minimum.
    content.vb: >-
      <Pure>

      Public Shared Function ComponentMin(a As Vector2, b As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.ComponentMin*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: ComponentMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ComponentMin(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.ComponentMin(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.ComponentMin(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ComponentMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 454
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the smallest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: public static void ComponentMin(in Vector2 a, in Vector2 b, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise minimum.
    content.vb: Public Shared Sub ComponentMin(a As Vector2, b As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.ComponentMin*
  nameWithType.vb: Vector2.ComponentMin(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: ComponentMin(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: ComponentMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ComponentMax(Vector2, Vector2)
  nameWithType: Vector2.ComponentMax(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ComponentMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 466
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the largest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 ComponentMax(Vector2 a, Vector2 b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise maximum.
    content.vb: >-
      <Pure>

      Public Shared Function ComponentMax(a As Vector2, b As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.ComponentMax*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: ComponentMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ComponentMax(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.ComponentMax(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.ComponentMax(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ComponentMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 480
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the largest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: public static void ComponentMax(in Vector2 a, in Vector2 b, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise maximum.
    content.vb: Public Shared Sub ComponentMax(a As Vector2, b As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.ComponentMax*
  nameWithType.vb: Vector2.ComponentMax(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: ComponentMax(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: MagnitudeMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: MagnitudeMin(Vector2, Vector2)
  nameWithType: Vector2.MagnitudeMin(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: MagnitudeMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 493
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2 with the minimum magnitude. If the magnitudes are equal, the second vector

    is selected.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 MagnitudeMin(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The minimum Vector2.
    content.vb: >-
      <Pure>

      Public Shared Function MagnitudeMin(left As Vector2, right As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.MagnitudeMin*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: MagnitudeMin(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: MagnitudeMin(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.MagnitudeMin(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.MagnitudeMin(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: MagnitudeMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 506
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2 with the minimum magnitude. If the magnitudes are equal, the second vector

    is selected.
  example: []
  syntax:
    content: public static void MagnitudeMin(in Vector2 left, in Vector2 right, out Vector2 result)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The magnitude-wise minimum.
    content.vb: Public Shared Sub MagnitudeMin(left As Vector2, right As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.MagnitudeMin*
  nameWithType.vb: Vector2.MagnitudeMin(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: MagnitudeMin(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: MagnitudeMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: MagnitudeMax(Vector2, Vector2)
  nameWithType: Vector2.MagnitudeMax(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: MagnitudeMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 518
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2 with the maximum magnitude. If the magnitudes are equal, the first vector

    is selected.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 MagnitudeMax(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The maximum Vector2.
    content.vb: >-
      <Pure>

      Public Shared Function MagnitudeMax(left As Vector2, right As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.MagnitudeMax*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: MagnitudeMax(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: MagnitudeMax(in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.MagnitudeMax(in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.MagnitudeMax(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: MagnitudeMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 531
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2 with the maximum magnitude. If the magnitudes are equal, the first vector

    is selected.
  example: []
  syntax:
    content: public static void MagnitudeMax(in Vector2 left, in Vector2 right, out Vector2 result)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The magnitude-wise maximum.
    content.vb: Public Shared Sub MagnitudeMax(left As Vector2, right As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.MagnitudeMax*
  nameWithType.vb: Vector2.MagnitudeMax(Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: MagnitudeMax(Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Clamp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Clamp(Vector2, Vector2, Vector2)
  nameWithType: Vector2.Clamp(Vector2, Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Clamp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 543
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamp a vector to the given minimum and maximum vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Clamp(Vector2 vec, Vector2 min, Vector2 max)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Input vector.
    - id: min
      type: OpenTK.Mathematics.Vector2
      description: Minimum vector.
    - id: max
      type: OpenTK.Mathematics.Vector2
      description: Maximum vector.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The clamped vector.
    content.vb: >-
      <Pure>

      Public Shared Function Clamp(vec As Vector2, min As Vector2, max As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Clamp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Clamp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Clamp(in Vector2, in Vector2, in Vector2, out Vector2)
  nameWithType: Vector2.Clamp(in Vector2, in Vector2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Clamp(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Clamp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 558
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamp a vector to the given minimum and maximum vectors.
  example: []
  syntax:
    content: public static void Clamp(in Vector2 vec, in Vector2 min, in Vector2 max, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Input vector.
    - id: min
      type: OpenTK.Mathematics.Vector2
      description: Minimum vector.
    - id: max
      type: OpenTK.Mathematics.Vector2
      description: Maximum vector.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The clamped vector.
    content.vb: Public Shared Sub Clamp(vec As Vector2, min As Vector2, max As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Clamp*
  nameWithType.vb: Vector2.Clamp(Vector2, Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Clamp(Vector2, Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2)
  id: Abs(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Abs(Vector2)
  nameWithType: Vector2.Abs(Vector2)
  fullName: OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 569
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Take the component-wise absolute value of a vector.
  example: []
  syntax:
    content: public static Vector2 Abs(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to apply component-wise absolute value to.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise absolute value vector.
    content.vb: Public Shared Function Abs(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Abs*
- uid: OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Abs(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Abs(in Vector2, out Vector2)
  nameWithType: Vector2.Abs(in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Abs(in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 581
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Take the component-wise absolute value of a vector.
  example: []
  syntax:
    content: public static void Abs(in Vector2 vec, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to apply component-wise absolute value to.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise absolute value vector.
    content.vb: Public Shared Sub Abs(vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Abs*
  nameWithType.vb: Vector2.Abs(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Abs(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Abs(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2)
  id: Round(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Round(Vector2)
  nameWithType: Vector2.Round(Vector2)
  fullName: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 592
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Component-wise rounding. Equivalent to calling <xref href="System.MathF.Round(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Round(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to round.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise rounded vector.
    content.vb: >-
      <Pure>

      Public Shared Function Round(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Round*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Round(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Round(in Vector2, out Vector2)
  nameWithType: Vector2.Round(in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Round(in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 605
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Component-wise rounding. Equivalent to calling <xref href="System.MathF.Round(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public static void Round(in Vector2 vec, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to round.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise rounded vector.
    content.vb: Public Shared Sub Round(vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Round*
  nameWithType.vb: Vector2.Round(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Round(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2,System.MidpointRounding)
  commentId: M:OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2,System.MidpointRounding)
  id: Round(OpenTK.Mathematics.Vector2,System.MidpointRounding)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Round(Vector2, MidpointRounding)
  nameWithType: Vector2.Round(Vector2, MidpointRounding)
  fullName: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 618
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise rounding with specified midpoint rounding rule.

    Equivalent to calling <xref href="System.MathF.Round(System.Single%2cSystem.MidpointRounding)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Round(Vector2 vec, MidpointRounding rounding)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to round.
    - id: rounding
      type: System.MidpointRounding
      description: The midpoint rounding rule to use.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise rounded vector.
    content.vb: >-
      <Pure>

      Public Shared Function Round(vec As Vector2, rounding As MidpointRounding) As Vector2
  overload: OpenTK.Mathematics.Vector2.Round*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2@,System.MidpointRounding,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2@,System.MidpointRounding,OpenTK.Mathematics.Vector2@)
  id: Round(OpenTK.Mathematics.Vector2@,System.MidpointRounding,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Round(in Vector2, MidpointRounding, out Vector2)
  nameWithType: Vector2.Round(in Vector2, MidpointRounding, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Round(in OpenTK.Mathematics.Vector2, System.MidpointRounding, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 633
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise rounding with specified midpoint rounding rule.

    Equivalent to calling <xref href="System.MathF.Round(System.Single%2cSystem.MidpointRounding)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public static void Round(in Vector2 vec, MidpointRounding rounding, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to round.
    - id: rounding
      type: System.MidpointRounding
      description: The midpoint rounding rule to use.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise rounded vector.
    content.vb: Public Shared Sub Round(vec As Vector2, rounding As MidpointRounding, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Round*
  nameWithType.vb: Vector2.Round(Vector2, MidpointRounding, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Round(OpenTK.Mathematics.Vector2, System.MidpointRounding, OpenTK.Mathematics.Vector2)
  name.vb: Round(Vector2, MidpointRounding, Vector2)
- uid: OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2)
  id: Ceiling(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Ceiling(Vector2)
  nameWithType: Vector2.Ceiling(Vector2)
  fullName: OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Ceiling
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 645
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise ceiling operation.

    Equivalent to calling <xref href="System.MathF.Ceiling(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Ceiling(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to take the ceiling of.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise ceiling vector.
    content.vb: >-
      <Pure>

      Public Shared Function Ceiling(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Ceiling*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Ceiling(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Ceiling(in Vector2, out Vector2)
  nameWithType: Vector2.Ceiling(in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Ceiling(in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Ceiling
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 659
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise ceiling operation.

    Equivalent to calling <xref href="System.MathF.Ceiling(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public static void Ceiling(in Vector2 vec, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to take the ceiling of.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise ceiling vector.
    content.vb: Public Shared Sub Ceiling(vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Ceiling*
  nameWithType.vb: Vector2.Ceiling(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Ceiling(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Ceiling(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2)
  id: Floor(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Floor(Vector2)
  nameWithType: Vector2.Floor(Vector2)
  fullName: OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Floor
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 671
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise floor operation.

    Equivalent to calling <xref href="System.MathF.Floor(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Floor(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to take the floor of.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise floored vector.
    content.vb: >-
      <Pure>

      Public Shared Function Floor(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Floor*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Floor(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Floor(in Vector2, out Vector2)
  nameWithType: Vector2.Floor(in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Floor(in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Floor
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 685
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise floor operation.

    Equivalent to calling <xref href="System.MathF.Floor(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public static void Floor(in Vector2 vec, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to take the floor of.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise floored vector.
    content.vb: Public Shared Sub Floor(vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Floor*
  nameWithType.vb: Vector2.Floor(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Floor(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Floor(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2)
  id: Truncate(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Truncate(Vector2)
  nameWithType: Vector2.Truncate(Vector2)
  fullName: OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Truncate
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 697
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise truncation.

    Equivalent to calling <xref href="System.MathF.Truncate(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Truncate(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to truncate.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The component-wise truncated vector.
    content.vb: >-
      <Pure>

      Public Shared Function Truncate(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Truncate*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Truncate(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Truncate(in Vector2, out Vector2)
  nameWithType: Vector2.Truncate(in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Truncate(in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Truncate
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 711
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Component-wise truncation.

    Equivalent to calling <xref href="System.MathF.Truncate(System.Single)" data-throw-if-not-resolved="false"></xref> on each component.
  example: []
  syntax:
    content: public static void Truncate(in Vector2 vec, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to truncate.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The component-wise truncated vector.
    content.vb: Public Shared Sub Truncate(vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Truncate*
  nameWithType.vb: Vector2.Truncate(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Truncate(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Truncate(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Distance(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Distance(Vector2, Vector2)
  nameWithType: Vector2.Distance(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Distance
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 723
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the euclidean distance between two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float Distance(Vector2 vec1, Vector2 vec2)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2
      description: The second vector.
    return:
      type: System.Single
      description: The distance.
    content.vb: >-
      <Pure>

      Public Shared Function Distance(vec1 As Vector2, vec2 As Vector2) As Single
  overload: OpenTK.Mathematics.Vector2.Distance*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  commentId: M:OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  id: Distance(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Distance(in Vector2, in Vector2, out float)
  nameWithType: Vector2.Distance(in Vector2, in Vector2, out float)
  fullName: OpenTK.Mathematics.Vector2.Distance(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Distance
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 736
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the euclidean distance between two vectors.
  example: []
  syntax:
    content: public static void Distance(in Vector2 vec1, in Vector2 vec2, out float result)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2
      description: The second vector.
    - id: result
      type: System.Single
      description: The distance.
    content.vb: Public Shared Sub Distance(vec1 As Vector2, vec2 As Vector2, result As Single)
  overload: OpenTK.Mathematics.Vector2.Distance*
  nameWithType.vb: Vector2.Distance(Vector2, Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single)
  name.vb: Distance(Vector2, Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: DistanceSquared(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector2, Vector2)
  nameWithType: Vector2.DistanceSquared(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: DistanceSquared
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 747
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the squared euclidean distance between two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float DistanceSquared(Vector2 vec1, Vector2 vec2)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2
      description: The second vector.
    return:
      type: System.Single
      description: The squared distance.
    content.vb: >-
      <Pure>

      Public Shared Function DistanceSquared(vec1 As Vector2, vec2 As Vector2) As Single
  overload: OpenTK.Mathematics.Vector2.DistanceSquared*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  commentId: M:OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  id: DistanceSquared(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: DistanceSquared(in Vector2, in Vector2, out float)
  nameWithType: Vector2.DistanceSquared(in Vector2, in Vector2, out float)
  fullName: OpenTK.Mathematics.Vector2.DistanceSquared(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: DistanceSquared
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 760
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the squared euclidean distance between two vectors.
  example: []
  syntax:
    content: public static void DistanceSquared(in Vector2 vec1, in Vector2 vec2, out float result)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2
      description: The second vector.
    - id: result
      type: System.Single
      description: The squared distance.
    content.vb: Public Shared Sub DistanceSquared(vec1 As Vector2, vec2 As Vector2, result As Single)
  overload: OpenTK.Mathematics.Vector2.DistanceSquared*
  nameWithType.vb: Vector2.DistanceSquared(Vector2, Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single)
  name.vb: DistanceSquared(Vector2, Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2)
  id: Normalize(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Normalize(Vector2)
  nameWithType: Vector2.Normalize(Vector2)
  fullName: OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Normalize
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 770
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to unit length.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Normalize(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The input vector.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The normalized copy.
    content.vb: >-
      <Pure>

      Public Shared Function Normalize(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Normalize*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: Normalize(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Normalize(in Vector2, out Vector2)
  nameWithType: Vector2.Normalize(in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Normalize(in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Normalize
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 784
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to unit length.
  example: []
  syntax:
    content: public static void Normalize(in Vector2 vec, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The input vector.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The normalized vector.
    content.vb: Public Shared Sub Normalize(vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Normalize*
  nameWithType.vb: Vector2.Normalize(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Normalize(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Normalize(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2)
  id: NormalizeFast(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: NormalizeFast(Vector2)
  nameWithType: Vector2.NormalizeFast(Vector2)
  fullName: OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: NormalizeFast
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 796
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to approximately unit length.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 NormalizeFast(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The input vector.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The normalized copy.
    content.vb: >-
      <Pure>

      Public Shared Function NormalizeFast(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.NormalizeFast*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: NormalizeFast(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: NormalizeFast(in Vector2, out Vector2)
  nameWithType: Vector2.NormalizeFast(in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.NormalizeFast(in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: NormalizeFast
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 810
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to approximately unit length.
  example: []
  syntax:
    content: public static void NormalizeFast(in Vector2 vec, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The input vector.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The normalized vector.
    content.vb: Public Shared Sub NormalizeFast(vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.NormalizeFast*
  nameWithType.vb: Vector2.NormalizeFast(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.NormalizeFast(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: NormalizeFast(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Dot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Dot(Vector2, Vector2)
  nameWithType: Vector2.Dot(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Dot
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 823
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculate the dot (scalar) product of two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float Dot(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    return:
      type: System.Single
      description: The dot product of the two inputs.
    content.vb: >-
      <Pure>

      Public Shared Function Dot(left As Vector2, right As Vector2) As Single
  overload: OpenTK.Mathematics.Vector2.Dot*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  commentId: M:OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  id: Dot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Dot(in Vector2, in Vector2, out float)
  nameWithType: Vector2.Dot(in Vector2, in Vector2, out float)
  fullName: OpenTK.Mathematics.Vector2.Dot(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Dot
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 835
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculate the dot (scalar) product of two vectors.
  example: []
  syntax:
    content: public static void Dot(in Vector2 left, in Vector2 right, out float result)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    - id: result
      type: System.Single
      description: The dot product of the two inputs.
    content.vb: Public Shared Sub Dot(left As Vector2, right As Vector2, result As Single)
  overload: OpenTK.Mathematics.Vector2.Dot*
  nameWithType.vb: Vector2.Dot(Vector2, Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single)
  name.vb: Dot(Vector2, Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: PerpDot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: PerpDot(Vector2, Vector2)
  nameWithType: Vector2.PerpDot(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: PerpDot
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 846
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculate the perpendicular dot (scalar) product of two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float PerpDot(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    return:
      type: System.Single
      description: The perpendicular dot product of the two inputs.
    content.vb: >-
      <Pure>

      Public Shared Function PerpDot(left As Vector2, right As Vector2) As Single
  overload: OpenTK.Mathematics.Vector2.PerpDot*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  commentId: M:OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  id: PerpDot(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: PerpDot(in Vector2, in Vector2, out float)
  nameWithType: Vector2.PerpDot(in Vector2, in Vector2, out float)
  fullName: OpenTK.Mathematics.Vector2.PerpDot(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, out float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: PerpDot
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 858
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculate the perpendicular dot (scalar) product of two vectors.
  example: []
  syntax:
    content: public static void PerpDot(in Vector2 left, in Vector2 right, out float result)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: First operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Second operand.
    - id: result
      type: System.Single
      description: The perpendicular dot product of the two inputs.
    content.vb: Public Shared Sub PerpDot(left As Vector2, right As Vector2, result As Single)
  overload: OpenTK.Mathematics.Vector2.PerpDot*
  nameWithType.vb: Vector2.PerpDot(Vector2, Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single)
  name.vb: PerpDot(Vector2, Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  id: Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Lerp(Vector2, Vector2, float)
  nameWithType: Vector2.Lerp(Vector2, Vector2, float)
  fullName: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 870
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the linear blend of the 2 given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Lerp(Vector2 a, Vector2 b, float blend)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second input vector.
    - id: blend
      type: System.Single
      description: The blend factor.
    return:
      type: OpenTK.Mathematics.Vector2
      description: a when blend=0, b when blend=1, and a linear combination otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Lerp(a As Vector2, b As Vector2, blend As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.Lerp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.Lerp(Vector2, Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single)
  name.vb: Lerp(Vector2, Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  id: Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Lerp(in Vector2, in Vector2, float, out Vector2)
  nameWithType: Vector2.Lerp(in Vector2, in Vector2, float, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Lerp(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, float, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 885
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the linear blend of the 2 given vectors.
  example: []
  syntax:
    content: public static void Lerp(in Vector2 a, in Vector2 b, float blend, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second input vector.
    - id: blend
      type: System.Single
      description: The blend factor.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: a when blend=0, b when blend=1, and a linear combination otherwise.
    content.vb: Public Shared Sub Lerp(a As Vector2, b As Vector2, blend As Single, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Lerp*
  nameWithType.vb: Vector2.Lerp(Vector2, Vector2, Single, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single, OpenTK.Mathematics.Vector2)
  name.vb: Lerp(Vector2, Vector2, Single, Vector2)
- uid: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Lerp(Vector2, Vector2, Vector2)
  nameWithType: Vector2.Lerp(Vector2, Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 898
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the component-wise linear blend of the 2 given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Lerp(Vector2 a, Vector2 b, Vector2 blend)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second input vector.
    - id: blend
      type: OpenTK.Mathematics.Vector2
      description: The blend factor.
    return:
      type: OpenTK.Mathematics.Vector2
      description: a when blend=0, b when blend=1, and a component-wise linear combination otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Lerp(a As Vector2, b As Vector2, blend As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.Lerp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2@)
  id: Lerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Lerp(in Vector2, in Vector2, Vector2, out Vector2)
  nameWithType: Vector2.Lerp(in Vector2, in Vector2, Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Lerp(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 913
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the component-wise linear blend of the 2 given vectors.
  example: []
  syntax:
    content: public static void Lerp(in Vector2 a, in Vector2 b, Vector2 blend, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second input vector.
    - id: blend
      type: OpenTK.Mathematics.Vector2
      description: The blend factor.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: a when blend=0, b when blend=1, and a component-wise linear combination otherwise.
    content.vb: Public Shared Sub Lerp(a As Vector2, b As Vector2, blend As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Lerp*
  nameWithType.vb: Vector2.Lerp(Vector2, Vector2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: Lerp(Vector2, Vector2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  id: Slerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Slerp(Vector2, Vector2, float)
  nameWithType: Vector2.Slerp(Vector2, Vector2, float)
  fullName: OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Slerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 927
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector that is the spherical interpolation of the two given vectors.

    <code class="paramref">a</code> and <code class="paramref">b</code> need to be normalized for this function to work properly.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Slerp(Vector2 a, Vector2 b, float t)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: Unit vector start point.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Unit vector end point.
    - id: t
      type: System.Single
      description: The blend factor.
    return:
      type: OpenTK.Mathematics.Vector2
      description: <code class="paramref">a</code> when <code class="paramref">t</code>=0, <code class="paramref">b</code> when <code class="paramref">t</code>=1, and a spherical interpolation between the vectors otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Slerp(a As Vector2, b As Vector2, t As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.Slerp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.Slerp(Vector2, Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single)
  name.vb: Slerp(Vector2, Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  id: Slerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Slerp(in Vector2, in Vector2, float, out Vector2)
  nameWithType: Vector2.Slerp(in Vector2, in Vector2, float, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Slerp(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, float, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Slerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 957
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector that is the spherical interpolation of the two given vectors.

    <code class="paramref">a</code> and <code class="paramref">b</code> need to be normalized for this function to work properly.
  example: []
  syntax:
    content: public static void Slerp(in Vector2 a, in Vector2 b, float t, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: Unit vector start point.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Unit vector end point.
    - id: t
      type: System.Single
      description: The blend factor.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: Is <code class="paramref">a</code> when <code class="paramref">t</code>=0, <code class="paramref">b</code> when <code class="paramref">t</code>=1, and a spherical interpolation between the vectors otherwise.
    content.vb: Public Shared Sub Slerp(a As Vector2, b As Vector2, t As Single, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Slerp*
  nameWithType.vb: Vector2.Slerp(Vector2, Vector2, Single, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single, OpenTK.Mathematics.Vector2)
  name.vb: Slerp(Vector2, Vector2, Single, Vector2)
- uid: OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  id: Elerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Elerp(Vector2, Vector2, float)
  nameWithType: Vector2.Elerp(Vector2, Vector2, float)
  fullName: OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Elerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 995
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector that is the exponential interpolation of the two vectors.

    Equivalent to <code>a * pow(b/a, t)</code>.
  example: []
  syntax:
    content: public static Vector2 Elerp(Vector2 a, Vector2 b, float t)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: The starting value. Must be non-negative.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: The end value. Must be non-negative.
    - id: t
      type: System.Single
      description: The blend factor.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The exponential interpolation between <code class="paramref">a</code> and <code class="paramref">b</code>.
    content.vb: Public Shared Function Elerp(a As Vector2, b As Vector2, t As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.Elerp*
  seealso:
  - linkId: OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
    commentId: M:OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
  nameWithType.vb: Vector2.Elerp(Vector2, Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single)
  name.vb: Elerp(Vector2, Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  id: Elerp(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Elerp(in Vector2, in Vector2, float, out Vector2)
  nameWithType: Vector2.Elerp(in Vector2, in Vector2, float, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Elerp(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, float, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Elerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1011
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns a new vector that is the exponential interpolation of the two vectors.

    Equivalent to <code>a * pow(b/a, t)</code>.
  example: []
  syntax:
    content: public static void Elerp(in Vector2 a, in Vector2 b, float t, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: The starting value. Must be non-negative.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: The end value. Must be non-negative.
    - id: t
      type: System.Single
      description: The blend factor.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The exponential interpolation between <code class="paramref">a</code> and <code class="paramref">b</code>.
    content.vb: Public Shared Sub Elerp(a As Vector2, b As Vector2, t As Single, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Elerp*
  seealso:
  - linkId: OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
    commentId: M:OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
  nameWithType.vb: Vector2.Elerp(Vector2, Vector2, Single, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single, OpenTK.Mathematics.Vector2)
  name.vb: Elerp(Vector2, Vector2, Single, Vector2)
- uid: OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single,System.Single)
  id: BaryCentric(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: BaryCentric(Vector2, Vector2, Vector2, float, float)
  nameWithType: Vector2.BaryCentric(Vector2, Vector2, Vector2, float, float)
  fullName: OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: BaryCentric
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1026
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Interpolate 3 Vectors using Barycentric coordinates.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 BaryCentric(Vector2 a, Vector2 b, Vector2 c, float u, float v)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First input Vector.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second input Vector.
    - id: c
      type: OpenTK.Mathematics.Vector2
      description: Third input Vector.
    - id: u
      type: System.Single
      description: First Barycentric Coordinate.
    - id: v
      type: System.Single
      description: Second Barycentric Coordinate.
    return:
      type: OpenTK.Mathematics.Vector2
      description: a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function BaryCentric(a As Vector2, b As Vector2, c As Vector2, u As Single, v As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.BaryCentric*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.BaryCentric(Vector2, Vector2, Vector2, Single, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single, Single)
  name.vb: BaryCentric(Vector2, Vector2, Vector2, Single, Single)
- uid: OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,System.Single,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,System.Single,OpenTK.Mathematics.Vector2@)
  id: BaryCentric(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@,System.Single,System.Single,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: BaryCentric(in Vector2, in Vector2, in Vector2, float, float, out Vector2)
  nameWithType: Vector2.BaryCentric(in Vector2, in Vector2, in Vector2, float, float, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.BaryCentric(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Vector2, float, float, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: BaryCentric
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1045
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Interpolate 3 Vectors using Barycentric coordinates.
  example: []
  syntax:
    content: public static void BaryCentric(in Vector2 a, in Vector2 b, in Vector2 c, float u, float v, out Vector2 result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2
      description: First input Vector.
    - id: b
      type: OpenTK.Mathematics.Vector2
      description: Second input Vector.
    - id: c
      type: OpenTK.Mathematics.Vector2
      description: Third input Vector.
    - id: u
      type: System.Single
      description: First Barycentric Coordinate.
    - id: v
      type: System.Single
      description: Second Barycentric Coordinate.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: >-
        Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c

        otherwise.
    content.vb: Public Shared Sub BaryCentric(a As Vector2, b As Vector2, c As Vector2, u As Single, v As Single, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.BaryCentric*
  nameWithType.vb: Vector2.BaryCentric(Vector2, Vector2, Vector2, Single, Single, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2, Single, Single, OpenTK.Mathematics.Vector2)
  name.vb: BaryCentric(Vector2, Vector2, Vector2, Single, Single, Vector2)
- uid: OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  commentId: M:OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  id: TransformRow(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: TransformRow(Vector2, Matrix2)
  nameWithType: Vector2.TransformRow(Vector2, Matrix2)
  fullName: OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Matrix2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: TransformRow
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1070
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 TransformRow(Vector2 vec, Matrix2 mat)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    - id: mat
      type: OpenTK.Mathematics.Matrix2
      description: The desired transformation.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Function TransformRow(vec As Vector2, mat As Matrix2) As Vector2
  overload: OpenTK.Mathematics.Vector2.TransformRow*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@)
  id: TransformRow(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: TransformRow(in Vector2, in Matrix2, out Vector2)
  nameWithType: Vector2.TransformRow(in Vector2, in Matrix2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.TransformRow(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Matrix2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: TransformRow
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1083
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix.
  example: []
  syntax:
    content: public static void TransformRow(in Vector2 vec, in Matrix2 mat, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    - id: mat
      type: OpenTK.Mathematics.Matrix2
      description: The desired transformation.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The transformed vector.
    content.vb: Public Shared Sub TransformRow(vec As Vector2, mat As Matrix2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.TransformRow*
  nameWithType.vb: Vector2.TransformRow(Vector2, Matrix2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Matrix2, OpenTK.Mathematics.Vector2)
  name.vb: TransformRow(Vector2, Matrix2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Quaternion)
  commentId: M:OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Quaternion)
  id: Transform(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Quaternion)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Transform(Vector2, Quaternion)
  nameWithType: Vector2.Transform(Vector2, Quaternion)
  fullName: OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Quaternion)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Transform
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1096
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transforms a vector by a quaternion rotation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 Transform(Vector2 vec, Quaternion quat)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    - id: quat
      type: OpenTK.Mathematics.Quaternion
      description: The quaternion to rotate the vector by.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Transform(vec As Vector2, quat As Quaternion) As Vector2
  overload: OpenTK.Mathematics.Vector2.Transform*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Quaternion@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Quaternion@,OpenTK.Mathematics.Vector2@)
  id: Transform(OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Quaternion@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Transform(in Vector2, in Quaternion, out Vector2)
  nameWithType: Vector2.Transform(in Vector2, in Quaternion, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.Transform(in OpenTK.Mathematics.Vector2, in OpenTK.Mathematics.Quaternion, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Transform
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1109
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transforms a vector by a quaternion rotation.
  example: []
  syntax:
    content: public static void Transform(in Vector2 vec, in Quaternion quat, out Vector2 result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    - id: quat
      type: OpenTK.Mathematics.Quaternion
      description: The quaternion to rotate the vector by.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The result of the operation.
    content.vb: Public Shared Sub Transform(vec As Vector2, quat As Quaternion, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.Transform*
  nameWithType.vb: Vector2.Transform(Vector2, Quaternion, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Quaternion, OpenTK.Mathematics.Vector2)
  name.vb: Transform(Vector2, Quaternion, Vector2)
- uid: OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  id: TransformColumn(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: TransformColumn(Matrix2, Vector2)
  nameWithType: Vector2.TransformColumn(Matrix2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2, OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: TransformColumn
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1126
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix using right-handed notation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 TransformColumn(Matrix2 mat, Vector2 vec)
    parameters:
    - id: mat
      type: OpenTK.Mathematics.Matrix2
      description: The desired transformation.
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Function TransformColumn(mat As Matrix2, vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.TransformColumn*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  commentId: M:OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  id: TransformColumn(OpenTK.Mathematics.Matrix2@,OpenTK.Mathematics.Vector2@,OpenTK.Mathematics.Vector2@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: TransformColumn(in Matrix2, in Vector2, out Vector2)
  nameWithType: Vector2.TransformColumn(in Matrix2, in Vector2, out Vector2)
  fullName: OpenTK.Mathematics.Vector2.TransformColumn(in OpenTK.Mathematics.Matrix2, in OpenTK.Mathematics.Vector2, out OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: TransformColumn
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1139
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix using right-handed notation.
  example: []
  syntax:
    content: public static void TransformColumn(in Matrix2 mat, in Vector2 vec, out Vector2 result)
    parameters:
    - id: mat
      type: OpenTK.Mathematics.Matrix2
      description: The desired transformation.
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    - id: result
      type: OpenTK.Mathematics.Vector2
      description: The transformed vector.
    content.vb: Public Shared Sub TransformColumn(mat As Matrix2, vec As Vector2, result As Vector2)
  overload: OpenTK.Mathematics.Vector2.TransformColumn*
  nameWithType.vb: Vector2.TransformColumn(Matrix2, Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2, OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: TransformColumn(Matrix2, Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.Yx
  commentId: P:OpenTK.Mathematics.Vector2.Yx
  id: Yx
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Yx
  nameWithType: Vector2.Yx
  fullName: OpenTK.Mathematics.Vector2.Yx
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Yx
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1148
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets or sets an OpenTK.Vector2 with the Y and X components of this instance.
  example: []
  syntax:
    content: public Vector2 Yx { readonly get; set; }
    parameters: []
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: Public Property Yx As Vector2
  overload: OpenTK.Mathematics.Vector2.Yx*
- uid: OpenTK.Mathematics.Vector2.op_Addition(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Addition(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: op_Addition(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator +(Vector2, Vector2)
  nameWithType: Vector2.operator +(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator +(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Addition
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1165
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Adds the specified instances.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator +(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of addition.
    content.vb: >-
      <Pure>

      Public Shared Operator +(left As Vector2, right As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Addition*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.+(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.+(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: +(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Subtraction(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Subtraction(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: op_Subtraction(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator -(Vector2, Vector2)
  nameWithType: Vector2.operator -(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator -(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Subtraction
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1179
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Subtracts the specified instances.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator -(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of subtraction.
    content.vb: >-
      <Pure>

      Public Shared Operator -(left As Vector2, right As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Subtraction*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.-(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.-(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: -(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.op_UnaryNegation(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_UnaryNegation(OpenTK.Mathematics.Vector2)
  id: op_UnaryNegation(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator -(Vector2)
  nameWithType: Vector2.operator -(Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator -(OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_UnaryNegation
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1192
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Negates the specified instance.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator -(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of negation.
    content.vb: >-
      <Pure>

      Public Shared Operator -(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_UnaryNegation*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.-(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.-(OpenTK.Mathematics.Vector2)
  name.vb: -(Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,System.Single)
  id: op_Multiply(OpenTK.Mathematics.Vector2,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator *(Vector2, float)
  nameWithType: Vector2.operator *(Vector2, float)
  fullName: OpenTK.Mathematics.Vector2.operator *(OpenTK.Mathematics.Vector2, float)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1206
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies the specified instance by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator *(Vector2 vec, float scale)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: System.Single
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of multiplication.
    content.vb: >-
      <Pure>

      Public Shared Operator *(vec As Vector2, scale As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.*(Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.*(OpenTK.Mathematics.Vector2, Single)
  name.vb: '*(Vector2, Single)'
- uid: OpenTK.Mathematics.Vector2.op_Multiply(System.Single,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Multiply(System.Single,OpenTK.Mathematics.Vector2)
  id: op_Multiply(System.Single,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator *(float, Vector2)
  nameWithType: Vector2.operator *(float, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator *(float, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1220
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies the specified instance by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator *(float scale, Vector2 vec)
    parameters:
    - id: scale
      type: System.Single
      description: Left operand.
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of multiplication.
    content.vb: >-
      <Pure>

      Public Shared Operator *(scale As Single, vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.*(Single, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.*(Single, OpenTK.Mathematics.Vector2)
  name.vb: '*(Single, Vector2)'
- uid: OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator *(Vector2, Vector2)
  nameWithType: Vector2.operator *(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator *(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1234
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Component-wise multiplication between the specified instance by a scale vector.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator *(Vector2 vec, Vector2 scale)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of multiplication.
    content.vb: >-
      <Pure>

      Public Shared Operator *(vec As Vector2, scale As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.*(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.*(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: '*(Vector2, Vector2)'
- uid: OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  id: op_Multiply(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator *(Vector2, Matrix2)
  nameWithType: Vector2.operator *(Vector2, Matrix2)
  fullName: OpenTK.Mathematics.Vector2.operator *(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Matrix2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1248
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator *(Vector2 vec, Matrix2 mat)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    - id: mat
      type: OpenTK.Mathematics.Matrix2
      description: The desired transformation.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Operator *(vec As Vector2, mat As Matrix2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.*(Vector2, Matrix2)
  fullName.vb: OpenTK.Mathematics.Vector2.*(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Matrix2)
  name.vb: '*(Vector2, Matrix2)'
- uid: OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  id: op_Multiply(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator *(Matrix2, Vector2)
  nameWithType: Vector2.operator *(Matrix2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator *(OpenTK.Mathematics.Matrix2, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1261
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix using right-handed notation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator *(Matrix2 mat, Vector2 vec)
    parameters:
    - id: mat
      type: OpenTK.Mathematics.Matrix2
      description: The desired transformation.
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Operator *(mat As Matrix2, vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.*(Matrix2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.*(OpenTK.Mathematics.Matrix2, OpenTK.Mathematics.Vector2)
  name.vb: '*(Matrix2, Vector2)'
- uid: OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Quaternion,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Quaternion,OpenTK.Mathematics.Vector2)
  id: op_Multiply(OpenTK.Mathematics.Quaternion,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator *(Quaternion, Vector2)
  nameWithType: Vector2.operator *(Quaternion, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator *(OpenTK.Mathematics.Quaternion, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1274
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transforms a vector by a quaternion rotation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator *(Quaternion quat, Vector2 vec)
    parameters:
    - id: quat
      type: OpenTK.Mathematics.Quaternion
      description: The quaternion to rotate the vector by.
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The vector to transform.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The multiplied vector.
    content.vb: >-
      <Pure>

      Public Shared Operator *(quat As Quaternion, vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.*(Quaternion, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.*(OpenTK.Mathematics.Quaternion, OpenTK.Mathematics.Vector2)
  name.vb: '*(Quaternion, Vector2)'
- uid: OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,System.Single)
  commentId: M:OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,System.Single)
  id: op_Division(OpenTK.Mathematics.Vector2,System.Single)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator /(Vector2, float)
  nameWithType: Vector2.operator /(Vector2, float)
  fullName: OpenTK.Mathematics.Vector2.operator /(OpenTK.Mathematics.Vector2, float)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Division
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1287
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides the specified instance by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator /(Vector2 vec, float scale)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: System.Single
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of the division.
    content.vb: >-
      <Pure>

      Public Shared Operator /(vec As Vector2, scale As Single) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Division*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2./(Vector2, Single)
  fullName.vb: OpenTK.Mathematics.Vector2./(OpenTK.Mathematics.Vector2, Single)
  name.vb: /(Vector2, Single)
- uid: OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: op_Division(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator /(Vector2, Vector2)
  nameWithType: Vector2.operator /(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator /(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Division
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1301
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Component-wise division between the specified instance by a scale vector.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2 operator /(Vector2 vec, Vector2 scale)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2
      description: Result of the division.
    content.vb: >-
      <Pure>

      Public Shared Operator /(vec As Vector2, scale As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Division*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2./(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2./(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: /(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Equality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Equality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: op_Equality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator ==(Vector2, Vector2)
  nameWithType: Vector2.operator ==(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator ==(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Equality
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1315
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compares the specified instances for equality.
  example: []
  syntax:
    content: public static bool operator ==(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: System.Boolean
      description: True if both instances are equal; false otherwise.
    content.vb: Public Shared Operator =(left As Vector2, right As Vector2) As Boolean
  overload: OpenTK.Mathematics.Vector2.op_Equality*
  nameWithType.vb: Vector2.=(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.=(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: =(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Inequality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.op_Inequality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  id: op_Inequality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: operator !=(Vector2, Vector2)
  nameWithType: Vector2.operator !=(Vector2, Vector2)
  fullName: OpenTK.Mathematics.Vector2.operator !=(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Inequality
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1326
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compares the specified instances for inequality.
  example: []
  syntax:
    content: public static bool operator !=(Vector2 left, Vector2 right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2
      description: Right operand.
    return:
      type: System.Boolean
      description: True if both instances are not equal; false otherwise.
    content.vb: Public Shared Operator <>(left As Vector2, right As Vector2) As Boolean
  overload: OpenTK.Mathematics.Vector2.op_Inequality*
  nameWithType.vb: Vector2.<>(Vector2, Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.<>(OpenTK.Mathematics.Vector2, OpenTK.Mathematics.Vector2)
  name.vb: <>(Vector2, Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Implicit(System.ValueTuple{System.Single,System.Single})~OpenTK.Mathematics.Vector2
  commentId: M:OpenTK.Mathematics.Vector2.op_Implicit(System.ValueTuple{System.Single,System.Single})~OpenTK.Mathematics.Vector2
  id: op_Implicit(System.ValueTuple{System.Single,System.Single})~OpenTK.Mathematics.Vector2
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: implicit operator Vector2((float X, float Y))
  nameWithType: Vector2.implicit operator Vector2((float X, float Y))
  fullName: OpenTK.Mathematics.Vector2.implicit operator OpenTK.Mathematics.Vector2((float X, float Y))
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Implicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1337
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Initializes a new instance of the <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> struct using a tuple containing the component

    values.
  example: []
  syntax:
    content: >-
      [Pure]

      public static implicit operator Vector2((float X, float Y) values)
    parameters:
    - id: values
      type: System.ValueTuple{System.Single,System.Single}
      description: A tuple containing the component values.
    return:
      type: OpenTK.Mathematics.Vector2
      description: A new instance of the <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> struct with the given component values.
    content.vb: >-
      <Pure>

      Public Shared Widening Operator CType(values As (X As Single, Y As Single)) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Implicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType((X As Single, Y As Single))
  fullName.vb: OpenTK.Mathematics.Vector2.CType((X As Single, Y As Single))
  name.vb: CType((X As Single, Y As Single))
- uid: OpenTK.Mathematics.Vector2.op_Implicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2d
  commentId: M:OpenTK.Mathematics.Vector2.op_Implicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2d
  id: op_Implicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2d
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: implicit operator Vector2d(Vector2)
  nameWithType: Vector2.implicit operator Vector2d(Vector2)
  fullName: OpenTK.Mathematics.Vector2.implicit operator OpenTK.Mathematics.Vector2d(OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Implicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1348
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts OpenTK.Vector2 to OpenTK.Vector2d.
  example: []
  syntax:
    content: >-
      [Pure]

      public static implicit operator Vector2d(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The Vector2 to convert.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The resulting Vector2d.
    content.vb: >-
      <Pure>

      Public Shared Widening Operator CType(vec As Vector2) As Vector2d
  overload: OpenTK.Mathematics.Vector2.op_Implicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.CType(OpenTK.Mathematics.Vector2)
  name.vb: CType(Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2h
  commentId: M:OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2h
  id: op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2h
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: explicit operator Vector2h(Vector2)
  nameWithType: Vector2.explicit operator Vector2h(Vector2)
  fullName: OpenTK.Mathematics.Vector2.explicit operator OpenTK.Mathematics.Vector2h(OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1359
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts OpenTK.Vector2 to OpenTK.Vector2h.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator Vector2h(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The Vector2 to convert.
    return:
      type: OpenTK.Mathematics.Vector2h
      description: The resulting Vector2h.
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2) As Vector2h
  overload: OpenTK.Mathematics.Vector2.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.CType(OpenTK.Mathematics.Vector2)
  name.vb: CType(Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2i
  commentId: M:OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2i
  id: op_Explicit(OpenTK.Mathematics.Vector2)~OpenTK.Mathematics.Vector2i
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: explicit operator Vector2i(Vector2)
  nameWithType: Vector2.explicit operator Vector2i(Vector2)
  fullName: OpenTK.Mathematics.Vector2.explicit operator OpenTK.Mathematics.Vector2i(OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1370
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts OpenTK.Vector2 to OpenTK.Vector2i.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator Vector2i(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The Vector2 to convert.
    return:
      type: OpenTK.Mathematics.Vector2i
      description: The resulting Vector2i.
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2) As Vector2i
  overload: OpenTK.Mathematics.Vector2.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.CType(OpenTK.Mathematics.Vector2)
  name.vb: CType(Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.PointF
  commentId: M:OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.PointF
  id: op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.PointF
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: explicit operator PointF(Vector2)
  nameWithType: Vector2.explicit operator PointF(Vector2)
  fullName: OpenTK.Mathematics.Vector2.explicit operator System.Drawing.PointF(OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1381
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> to <xref href="System.Drawing.PointF" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator PointF(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> to cast.
    return:
      type: System.Drawing.PointF
      description: The resulting <xref href="System.Drawing.PointF" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2) As PointF
  overload: OpenTK.Mathematics.Vector2.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.CType(OpenTK.Mathematics.Vector2)
  name.vb: CType(Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.SizeF
  commentId: M:OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.SizeF
  id: op_Explicit(OpenTK.Mathematics.Vector2)~System.Drawing.SizeF
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: explicit operator SizeF(Vector2)
  nameWithType: Vector2.explicit operator SizeF(Vector2)
  fullName: OpenTK.Mathematics.Vector2.explicit operator System.Drawing.SizeF(OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1392
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> to <xref href="System.Drawing.SizeF" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator SizeF(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> to cast.
    return:
      type: System.Drawing.SizeF
      description: The resulting <xref href="System.Drawing.SizeF" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2) As SizeF
  overload: OpenTK.Mathematics.Vector2.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.CType(OpenTK.Mathematics.Vector2)
  name.vb: CType(Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Explicit(System.Numerics.Vector2)~OpenTK.Mathematics.Vector2
  commentId: M:OpenTK.Mathematics.Vector2.op_Explicit(System.Numerics.Vector2)~OpenTK.Mathematics.Vector2
  id: op_Explicit(System.Numerics.Vector2)~OpenTK.Mathematics.Vector2
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: explicit operator Vector2(Vector2)
  nameWithType: Vector2.explicit operator Vector2(Vector2)
  fullName: OpenTK.Mathematics.Vector2.explicit operator OpenTK.Mathematics.Vector2(System.Numerics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1402
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts <xref href="System.Numerics.Vector2" data-throw-if-not-resolved="false"></xref> to <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator Vector2(Vector2 vec)
    parameters:
    - id: vec
      type: System.Numerics.Vector2
      description: The <xref href="System.Numerics.Vector2" data-throw-if-not-resolved="false"></xref> to cast.
    return:
      type: OpenTK.Mathematics.Vector2
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.CType(System.Numerics.Vector2)
  name.vb: CType(Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Numerics.Vector2
  commentId: M:OpenTK.Mathematics.Vector2.op_Explicit(OpenTK.Mathematics.Vector2)~System.Numerics.Vector2
  id: op_Explicit(OpenTK.Mathematics.Vector2)~System.Numerics.Vector2
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: explicit operator Vector2(Vector2)
  nameWithType: Vector2.explicit operator Vector2(Vector2)
  fullName: OpenTK.Mathematics.Vector2.explicit operator System.Numerics.Vector2(OpenTK.Mathematics.Vector2)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1412
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> to <xref href="System.Numerics.Vector2" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator Vector2(Vector2 vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2
      description: The <xref href="OpenTK.Mathematics.Vector2" data-throw-if-not-resolved="false"></xref> to cast.
    return:
      type: System.Numerics.Vector2
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2) As Vector2
  overload: OpenTK.Mathematics.Vector2.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.CType(Vector2)
  fullName.vb: OpenTK.Mathematics.Vector2.CType(OpenTK.Mathematics.Vector2)
  name.vb: CType(Vector2)
- uid: OpenTK.Mathematics.Vector2.ToString
  commentId: M:OpenTK.Mathematics.Vector2.ToString
  id: ToString
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector2.ToString()
  fullName: OpenTK.Mathematics.Vector2.ToString()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1419
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: OpenTK.Mathematics.Vector2.ToString*
- uid: OpenTK.Mathematics.Vector2.ToString(System.String)
  commentId: M:OpenTK.Mathematics.Vector2.ToString(System.String)
  id: ToString(System.String)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ToString(string)
  nameWithType: Vector2.ToString(string)
  fullName: OpenTK.Mathematics.Vector2.ToString(string)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1425
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public string ToString(string format)
    parameters:
    - id: format
      type: System.String
    return:
      type: System.String
    content.vb: Public Function ToString(format As String) As String
  overload: OpenTK.Mathematics.Vector2.ToString*
  nameWithType.vb: Vector2.ToString(String)
  fullName.vb: OpenTK.Mathematics.Vector2.ToString(String)
  name.vb: ToString(String)
- uid: OpenTK.Mathematics.Vector2.ToString(System.IFormatProvider)
  commentId: M:OpenTK.Mathematics.Vector2.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: Vector2.ToString(IFormatProvider)
  fullName: OpenTK.Mathematics.Vector2.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1431
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public string ToString(IFormatProvider formatProvider)
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
    return:
      type: System.String
    content.vb: Public Function ToString(formatProvider As IFormatProvider) As String
  overload: OpenTK.Mathematics.Vector2.ToString*
- uid: OpenTK.Mathematics.Vector2.ToString(System.String,System.IFormatProvider)
  commentId: M:OpenTK.Mathematics.Vector2.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: ToString(string, IFormatProvider)
  nameWithType: Vector2.ToString(string, IFormatProvider)
  fullName: OpenTK.Mathematics.Vector2.ToString(string, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1437
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public readonly string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
    - id: formatProvider
      type: System.IFormatProvider
    return:
      type: System.String
    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: OpenTK.Mathematics.Vector2.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: Vector2.ToString(String, IFormatProvider)
  fullName.vb: OpenTK.Mathematics.Vector2.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
- uid: OpenTK.Mathematics.Vector2.Equals(System.Object)
  commentId: M:OpenTK.Mathematics.Vector2.Equals(System.Object)
  id: Equals(System.Object)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Vector2.Equals(object)
  fullName: OpenTK.Mathematics.Vector2.Equals(object)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Equals
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1447
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: OpenTK.Mathematics.Vector2.Equals*
  nameWithType.vb: Vector2.Equals(Object)
  fullName.vb: OpenTK.Mathematics.Vector2.Equals(Object)
  name.vb: Equals(Object)
- uid: OpenTK.Mathematics.Vector2.Equals(OpenTK.Mathematics.Vector2)
  commentId: M:OpenTK.Mathematics.Vector2.Equals(OpenTK.Mathematics.Vector2)
  id: Equals(OpenTK.Mathematics.Vector2)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Equals(Vector2)
  nameWithType: Vector2.Equals(Vector2)
  fullName: OpenTK.Mathematics.Vector2.Equals(OpenTK.Mathematics.Vector2)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Equals
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1453
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public readonly bool Equals(Vector2 other)
    parameters:
    - id: other
      type: OpenTK.Mathematics.Vector2
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Vector2) As Boolean
  overload: OpenTK.Mathematics.Vector2.Equals*
  implements:
  - System.IEquatable{OpenTK.Mathematics.Vector2}.Equals(OpenTK.Mathematics.Vector2)
- uid: OpenTK.Mathematics.Vector2.GetHashCode
  commentId: M:OpenTK.Mathematics.Vector2.GetHashCode
  id: GetHashCode
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector2.GetHashCode()
  fullName: OpenTK.Mathematics.Vector2.GetHashCode()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: GetHashCode
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1460
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: OpenTK.Mathematics.Vector2.GetHashCode*
- uid: OpenTK.Mathematics.Vector2.Deconstruct(System.Single@,System.Single@)
  commentId: M:OpenTK.Mathematics.Vector2.Deconstruct(System.Single@,System.Single@)
  id: Deconstruct(System.Single@,System.Single@)
  parent: OpenTK.Mathematics.Vector2
  langs:
  - csharp
  - vb
  name: Deconstruct(out float, out float)
  nameWithType: Vector2.Deconstruct(out float, out float)
  fullName: OpenTK.Mathematics.Vector2.Deconstruct(out float, out float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2.cs
      branch: master
      repo: git@github.com:opentk/opentk.git
    id: Deconstruct
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2.cs
    startLine: 1470
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Deconstructs the vector into it's individual components.
  example: []
  syntax:
    content: >-
      [Pure]

      public readonly void Deconstruct(out float x, out float y)
    parameters:
    - id: x
      type: System.Single
      description: The X component of the vector.
    - id: y
      type: System.Single
      description: The Y component of the vector.
    content.vb: >-
      <Pure>

      Public Sub Deconstruct(x As Single, y As Single)
  overload: OpenTK.Mathematics.Vector2.Deconstruct*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2.Deconstruct(Single, Single)
  fullName.vb: OpenTK.Mathematics.Vector2.Deconstruct(Single, Single)
  name.vb: Deconstruct(Single, Single)
references:
- uid: OpenTK.Mathematics
  commentId: N:OpenTK.Mathematics
  href: OpenTK.html
  name: OpenTK.Mathematics
  nameWithType: OpenTK.Mathematics
  fullName: OpenTK.Mathematics
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
- uid: System.IEquatable{OpenTK.Mathematics.Vector2}
  commentId: T:System.IEquatable{OpenTK.Mathematics.Vector2}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Vector2>
  nameWithType: IEquatable<Vector2>
  fullName: System.IEquatable<OpenTK.Mathematics.Vector2>
  nameWithType.vb: IEquatable(Of Vector2)
  fullName.vb: System.IEquatable(Of OpenTK.Mathematics.Vector2)
  name.vb: IEquatable(Of Vector2)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: OpenTK.Mathematics.Vector2
    name: Vector2
    href: OpenTK.Mathematics.Vector2.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: OpenTK.Mathematics.Vector2
    name: Vector2
    href: OpenTK.Mathematics.Vector2.html
  - name: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: OpenTK.Mathematics.Vector2
  commentId: T:OpenTK.Mathematics.Vector2
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2.html
  name: Vector2
  nameWithType: Vector2
  fullName: OpenTK.Mathematics.Vector2
- uid: OpenTK.Mathematics.Vector2.#ctor*
  commentId: Overload:OpenTK.Mathematics.Vector2.#ctor
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.#ctor(System.Single)
  name: Vector2
  nameWithType: Vector2.Vector2
  fullName: OpenTK.Mathematics.Vector2.Vector2
  nameWithType.vb: Vector2.New
  fullName.vb: OpenTK.Mathematics.Vector2.New
  name.vb: New
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.indexoutofrangeexception
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: OpenTK.Mathematics.Vector2.Item*
  commentId: Overload:OpenTK.Mathematics.Vector2.Item
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Item(System.Int32)
  name: this
  nameWithType: Vector2.this
  fullName: OpenTK.Mathematics.Vector2.this
  nameWithType.vb: Vector2.this[]
  fullName.vb: OpenTK.Mathematics.Vector2.this[]
  name.vb: this[]
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OpenTK.Mathematics.Vector2.LengthSquared
  commentId: P:OpenTK.Mathematics.Vector2.LengthSquared
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.LengthSquared
  name: LengthSquared
  nameWithType: Vector2.LengthSquared
  fullName: OpenTK.Mathematics.Vector2.LengthSquared
- uid: OpenTK.Mathematics.Vector2.LengthFast
  commentId: P:OpenTK.Mathematics.Vector2.LengthFast
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.LengthFast
  name: LengthFast
  nameWithType: Vector2.LengthFast
  fullName: OpenTK.Mathematics.Vector2.LengthFast
- uid: OpenTK.Mathematics.Vector2.Length*
  commentId: Overload:OpenTK.Mathematics.Vector2.Length
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Length
  name: Length
  nameWithType: Vector2.Length
  fullName: OpenTK.Mathematics.Vector2.Length
- uid: OpenTK.Mathematics.Vector2.ReciprocalLengthFast*
  commentId: Overload:OpenTK.Mathematics.Vector2.ReciprocalLengthFast
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.ReciprocalLengthFast
  name: ReciprocalLengthFast
  nameWithType: Vector2.ReciprocalLengthFast
  fullName: OpenTK.Mathematics.Vector2.ReciprocalLengthFast
- uid: OpenTK.Mathematics.Vector2.Length
  commentId: P:OpenTK.Mathematics.Vector2.Length
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Length
  name: Length
  nameWithType: Vector2.Length
  fullName: OpenTK.Mathematics.Vector2.Length
- uid: OpenTK.Mathematics.Vector2.LengthFast*
  commentId: Overload:OpenTK.Mathematics.Vector2.LengthFast
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.LengthFast
  name: LengthFast
  nameWithType: Vector2.LengthFast
  fullName: OpenTK.Mathematics.Vector2.LengthFast
- uid: OpenTK.Mathematics.Vector2.LengthSquared*
  commentId: Overload:OpenTK.Mathematics.Vector2.LengthSquared
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.LengthSquared
  name: LengthSquared
  nameWithType: Vector2.LengthSquared
  fullName: OpenTK.Mathematics.Vector2.LengthSquared
- uid: OpenTK.Mathematics.Vector2.PerpendicularRight*
  commentId: Overload:OpenTK.Mathematics.Vector2.PerpendicularRight
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.PerpendicularRight
  name: PerpendicularRight
  nameWithType: Vector2.PerpendicularRight
  fullName: OpenTK.Mathematics.Vector2.PerpendicularRight
- uid: OpenTK.Mathematics.Vector2.PerpendicularLeft*
  commentId: Overload:OpenTK.Mathematics.Vector2.PerpendicularLeft
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.PerpendicularLeft
  name: PerpendicularLeft
  nameWithType: Vector2.PerpendicularLeft
  fullName: OpenTK.Mathematics.Vector2.PerpendicularLeft
- uid: OpenTK.Mathematics.Vector2.Normalized*
  commentId: Overload:OpenTK.Mathematics.Vector2.Normalized
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Normalized
  name: Normalized
  nameWithType: Vector2.Normalized
  fullName: OpenTK.Mathematics.Vector2.Normalized
- uid: OpenTK.Mathematics.Vector2.Normalize*
  commentId: Overload:OpenTK.Mathematics.Vector2.Normalize
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Normalize
  name: Normalize
  nameWithType: Vector2.Normalize
  fullName: OpenTK.Mathematics.Vector2.Normalize
- uid: OpenTK.Mathematics.Vector2.NormalizeFast*
  commentId: Overload:OpenTK.Mathematics.Vector2.NormalizeFast
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.NormalizeFast
  name: NormalizeFast
  nameWithType: Vector2.NormalizeFast
  fullName: OpenTK.Mathematics.Vector2.NormalizeFast
- uid: OpenTK.Mathematics.Vector2.Abs*
  commentId: Overload:OpenTK.Mathematics.Vector2.Abs
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Abs
  name: Abs
  nameWithType: Vector2.Abs
  fullName: OpenTK.Mathematics.Vector2.Abs
- uid: System.MathF.Round(System.Single)
  commentId: M:System.MathF.Round(System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.mathf.round#system-mathf-round(system-single)
  name: Round(float)
  nameWithType: MathF.Round(float)
  fullName: System.MathF.Round(float)
  nameWithType.vb: MathF.Round(Single)
  fullName.vb: System.MathF.Round(Single)
  name.vb: Round(Single)
  spec.csharp:
  - uid: System.MathF.Round(System.Single)
    name: Round
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.round#system-mathf-round(system-single)
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: System.MathF.Round(System.Single)
    name: Round
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.round#system-mathf-round(system-single)
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Mathematics.Vector2.Round*
  commentId: Overload:OpenTK.Mathematics.Vector2.Round
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Round
  name: Round
  nameWithType: Vector2.Round
  fullName: OpenTK.Mathematics.Vector2.Round
- uid: System.MathF.Round(System.Single,System.MidpointRounding)
  commentId: M:System.MathF.Round(System.Single,System.MidpointRounding)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.mathf.round#system-mathf-round(system-single-system-midpointrounding)
  name: Round(float, MidpointRounding)
  nameWithType: MathF.Round(float, MidpointRounding)
  fullName: System.MathF.Round(float, System.MidpointRounding)
  nameWithType.vb: MathF.Round(Single, MidpointRounding)
  fullName.vb: System.MathF.Round(Single, System.MidpointRounding)
  name.vb: Round(Single, MidpointRounding)
  spec.csharp:
  - uid: System.MathF.Round(System.Single,System.MidpointRounding)
    name: Round
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.round#system-mathf-round(system-single-system-midpointrounding)
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.MidpointRounding
    name: MidpointRounding
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.midpointrounding
  - name: )
  spec.vb:
  - uid: System.MathF.Round(System.Single,System.MidpointRounding)
    name: Round
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.round#system-mathf-round(system-single-system-midpointrounding)
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.MidpointRounding
    name: MidpointRounding
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.midpointrounding
  - name: )
- uid: System.MidpointRounding
  commentId: T:System.MidpointRounding
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.midpointrounding
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.MathF.Ceiling(System.Single)
  commentId: M:System.MathF.Ceiling(System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.mathf.ceiling
  name: Ceiling(float)
  nameWithType: MathF.Ceiling(float)
  fullName: System.MathF.Ceiling(float)
  nameWithType.vb: MathF.Ceiling(Single)
  fullName.vb: System.MathF.Ceiling(Single)
  name.vb: Ceiling(Single)
  spec.csharp:
  - uid: System.MathF.Ceiling(System.Single)
    name: Ceiling
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.ceiling
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: System.MathF.Ceiling(System.Single)
    name: Ceiling
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.ceiling
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Mathematics.Vector2.Ceiling*
  commentId: Overload:OpenTK.Mathematics.Vector2.Ceiling
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Ceiling
  name: Ceiling
  nameWithType: Vector2.Ceiling
  fullName: OpenTK.Mathematics.Vector2.Ceiling
- uid: System.MathF.Floor(System.Single)
  commentId: M:System.MathF.Floor(System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.mathf.floor
  name: Floor(float)
  nameWithType: MathF.Floor(float)
  fullName: System.MathF.Floor(float)
  nameWithType.vb: MathF.Floor(Single)
  fullName.vb: System.MathF.Floor(Single)
  name.vb: Floor(Single)
  spec.csharp:
  - uid: System.MathF.Floor(System.Single)
    name: Floor
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.floor
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: System.MathF.Floor(System.Single)
    name: Floor
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.floor
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Mathematics.Vector2.Floor*
  commentId: Overload:OpenTK.Mathematics.Vector2.Floor
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Floor
  name: Floor
  nameWithType: Vector2.Floor
  fullName: OpenTK.Mathematics.Vector2.Floor
- uid: System.MathF.Truncate(System.Single)
  commentId: M:System.MathF.Truncate(System.Single)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.mathf.truncate
  name: Truncate(float)
  nameWithType: MathF.Truncate(float)
  fullName: System.MathF.Truncate(float)
  nameWithType.vb: MathF.Truncate(Single)
  fullName.vb: System.MathF.Truncate(Single)
  name.vb: Truncate(Single)
  spec.csharp:
  - uid: System.MathF.Truncate(System.Single)
    name: Truncate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.truncate
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: System.MathF.Truncate(System.Single)
    name: Truncate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.mathf.truncate
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Mathematics.Vector2.Truncate*
  commentId: Overload:OpenTK.Mathematics.Vector2.Truncate
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Truncate
  name: Truncate
  nameWithType: Vector2.Truncate
  fullName: OpenTK.Mathematics.Vector2.Truncate
- uid: OpenTK.Mathematics.Vector2.Add*
  commentId: Overload:OpenTK.Mathematics.Vector2.Add
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Add(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: Add
  nameWithType: Vector2.Add
  fullName: OpenTK.Mathematics.Vector2.Add
- uid: OpenTK.Mathematics.Vector2.Subtract*
  commentId: Overload:OpenTK.Mathematics.Vector2.Subtract
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Subtract(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: Subtract
  nameWithType: Vector2.Subtract
  fullName: OpenTK.Mathematics.Vector2.Subtract
- uid: OpenTK.Mathematics.Vector2.Multiply*
  commentId: Overload:OpenTK.Mathematics.Vector2.Multiply
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Multiply(OpenTK.Mathematics.Vector2,System.Single)
  name: Multiply
  nameWithType: Vector2.Multiply
  fullName: OpenTK.Mathematics.Vector2.Multiply
- uid: OpenTK.Mathematics.Vector2.Divide*
  commentId: Overload:OpenTK.Mathematics.Vector2.Divide
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Divide(OpenTK.Mathematics.Vector2,System.Single)
  name: Divide
  nameWithType: Vector2.Divide
  fullName: OpenTK.Mathematics.Vector2.Divide
- uid: OpenTK.Mathematics.Vector2.ComponentMin*
  commentId: Overload:OpenTK.Mathematics.Vector2.ComponentMin
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.ComponentMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: ComponentMin
  nameWithType: Vector2.ComponentMin
  fullName: OpenTK.Mathematics.Vector2.ComponentMin
- uid: OpenTK.Mathematics.Vector2.ComponentMax*
  commentId: Overload:OpenTK.Mathematics.Vector2.ComponentMax
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.ComponentMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: ComponentMax
  nameWithType: Vector2.ComponentMax
  fullName: OpenTK.Mathematics.Vector2.ComponentMax
- uid: OpenTK.Mathematics.Vector2.MagnitudeMin*
  commentId: Overload:OpenTK.Mathematics.Vector2.MagnitudeMin
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.MagnitudeMin(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: MagnitudeMin
  nameWithType: Vector2.MagnitudeMin
  fullName: OpenTK.Mathematics.Vector2.MagnitudeMin
- uid: OpenTK.Mathematics.Vector2.MagnitudeMax*
  commentId: Overload:OpenTK.Mathematics.Vector2.MagnitudeMax
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.MagnitudeMax(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: MagnitudeMax
  nameWithType: Vector2.MagnitudeMax
  fullName: OpenTK.Mathematics.Vector2.MagnitudeMax
- uid: OpenTK.Mathematics.Vector2.Clamp*
  commentId: Overload:OpenTK.Mathematics.Vector2.Clamp
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Clamp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: Clamp
  nameWithType: Vector2.Clamp
  fullName: OpenTK.Mathematics.Vector2.Clamp
- uid: OpenTK.Mathematics.Vector2.Distance*
  commentId: Overload:OpenTK.Mathematics.Vector2.Distance
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Distance(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: Distance
  nameWithType: Vector2.Distance
  fullName: OpenTK.Mathematics.Vector2.Distance
- uid: OpenTK.Mathematics.Vector2.DistanceSquared*
  commentId: Overload:OpenTK.Mathematics.Vector2.DistanceSquared
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.DistanceSquared(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: DistanceSquared
  nameWithType: Vector2.DistanceSquared
  fullName: OpenTK.Mathematics.Vector2.DistanceSquared
- uid: OpenTK.Mathematics.Vector2.Dot*
  commentId: Overload:OpenTK.Mathematics.Vector2.Dot
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Dot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: Dot
  nameWithType: Vector2.Dot
  fullName: OpenTK.Mathematics.Vector2.Dot
- uid: OpenTK.Mathematics.Vector2.PerpDot*
  commentId: Overload:OpenTK.Mathematics.Vector2.PerpDot
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.PerpDot(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: PerpDot
  nameWithType: Vector2.PerpDot
  fullName: OpenTK.Mathematics.Vector2.PerpDot
- uid: OpenTK.Mathematics.Vector2.Lerp*
  commentId: Overload:OpenTK.Mathematics.Vector2.Lerp
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Lerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  name: Lerp
  nameWithType: Vector2.Lerp
  fullName: OpenTK.Mathematics.Vector2.Lerp
- uid: OpenTK.Mathematics.Vector2.Slerp*
  commentId: Overload:OpenTK.Mathematics.Vector2.Slerp
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Slerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  name: Slerp
  nameWithType: Vector2.Slerp
  fullName: OpenTK.Mathematics.Vector2.Slerp
- uid: OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
  isExternal: true
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
  name: Elerp(float, float, float)
  nameWithType: MathHelper.Elerp(float, float, float)
  fullName: OpenTK.Mathematics.MathHelper.Elerp(float, float, float)
  nameWithType.vb: MathHelper.Elerp(Single, Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.Elerp(Single, Single, Single)
  name.vb: Elerp(Single, Single, Single)
  spec.csharp:
  - uid: OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
    name: Elerp
    href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
  spec.vb:
  - uid: OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
    name: Elerp
    href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Elerp(System.Single,System.Single,System.Single)
  - name: (
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: OpenTK.Mathematics.Vector2.Elerp*
  commentId: Overload:OpenTK.Mathematics.Vector2.Elerp
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Elerp(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single)
  name: Elerp
  nameWithType: Vector2.Elerp
  fullName: OpenTK.Mathematics.Vector2.Elerp
- uid: OpenTK.Mathematics.Vector2.BaryCentric*
  commentId: Overload:OpenTK.Mathematics.Vector2.BaryCentric
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.BaryCentric(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2,System.Single,System.Single)
  name: BaryCentric
  nameWithType: Vector2.BaryCentric
  fullName: OpenTK.Mathematics.Vector2.BaryCentric
- uid: OpenTK.Mathematics.Vector2.TransformRow*
  commentId: Overload:OpenTK.Mathematics.Vector2.TransformRow
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.TransformRow(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Matrix2)
  name: TransformRow
  nameWithType: Vector2.TransformRow
  fullName: OpenTK.Mathematics.Vector2.TransformRow
- uid: OpenTK.Mathematics.Matrix2
  commentId: T:OpenTK.Mathematics.Matrix2
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Matrix2.html
  name: Matrix2
  nameWithType: Matrix2
  fullName: OpenTK.Mathematics.Matrix2
- uid: OpenTK.Mathematics.Vector2.Transform*
  commentId: Overload:OpenTK.Mathematics.Vector2.Transform
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Transform(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Quaternion)
  name: Transform
  nameWithType: Vector2.Transform
  fullName: OpenTK.Mathematics.Vector2.Transform
- uid: OpenTK.Mathematics.Quaternion
  commentId: T:OpenTK.Mathematics.Quaternion
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Quaternion.html
  name: Quaternion
  nameWithType: Quaternion
  fullName: OpenTK.Mathematics.Quaternion
- uid: OpenTK.Mathematics.Vector2.TransformColumn*
  commentId: Overload:OpenTK.Mathematics.Vector2.TransformColumn
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.TransformColumn(OpenTK.Mathematics.Matrix2,OpenTK.Mathematics.Vector2)
  name: TransformColumn
  nameWithType: Vector2.TransformColumn
  fullName: OpenTK.Mathematics.Vector2.TransformColumn
- uid: OpenTK.Mathematics.Vector2.Yx*
  commentId: Overload:OpenTK.Mathematics.Vector2.Yx
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Yx
  name: Yx
  nameWithType: Vector2.Yx
  fullName: OpenTK.Mathematics.Vector2.Yx
- uid: OpenTK.Mathematics.Vector2.op_Addition*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Addition
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Addition(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: operator +
  nameWithType: Vector2.operator +
  fullName: OpenTK.Mathematics.Vector2.operator +
  nameWithType.vb: Vector2.+
  fullName.vb: OpenTK.Mathematics.Vector2.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2.op_Addition*
    name: +
    href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Addition(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Subtraction*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Subtraction
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Subtraction(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: operator -
  nameWithType: Vector2.operator -
  fullName: OpenTK.Mathematics.Vector2.operator -
  nameWithType.vb: Vector2.-
  fullName.vb: OpenTK.Mathematics.Vector2.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2.op_Subtraction*
    name: '-'
    href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Subtraction(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
- uid: OpenTK.Mathematics.Vector2.op_UnaryNegation*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_UnaryNegation
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_UnaryNegation(OpenTK.Mathematics.Vector2)
  name: operator -
  nameWithType: Vector2.operator -
  fullName: OpenTK.Mathematics.Vector2.operator -
  nameWithType.vb: Vector2.-
  fullName.vb: OpenTK.Mathematics.Vector2.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2.op_UnaryNegation*
    name: '-'
    href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_UnaryNegation(OpenTK.Mathematics.Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Multiply*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Multiply
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,System.Single)
  name: operator *
  nameWithType: Vector2.operator *
  fullName: OpenTK.Mathematics.Vector2.operator *
  nameWithType.vb: Vector2.*
  fullName.vb: OpenTK.Mathematics.Vector2.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2.op_Multiply*
    name: '*'
    href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Multiply(OpenTK.Mathematics.Vector2,System.Single)
- uid: OpenTK.Mathematics.Vector2.op_Division*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Division
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,System.Single)
  name: operator /
  nameWithType: Vector2.operator /
  fullName: OpenTK.Mathematics.Vector2.operator /
  nameWithType.vb: Vector2./
  fullName.vb: OpenTK.Mathematics.Vector2./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2.op_Division*
    name: /
    href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Division(OpenTK.Mathematics.Vector2,System.Single)
- uid: OpenTK.Mathematics.Vector2.op_Equality*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Equality
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Equality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: operator ==
  nameWithType: Vector2.operator ==
  fullName: OpenTK.Mathematics.Vector2.operator ==
  nameWithType.vb: Vector2.=
  fullName.vb: OpenTK.Mathematics.Vector2.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2.op_Equality*
    name: ==
    href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Equality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Mathematics.Vector2.op_Inequality*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Inequality
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Inequality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
  name: operator !=
  nameWithType: Vector2.operator !=
  fullName: OpenTK.Mathematics.Vector2.operator !=
  nameWithType.vb: Vector2.<>
  fullName.vb: OpenTK.Mathematics.Vector2.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2.op_Inequality*
    name: '!='
    href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.op_Inequality(OpenTK.Mathematics.Vector2,OpenTK.Mathematics.Vector2)
- uid: OpenTK.Mathematics.Vector2.op_Implicit*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Implicit
  name: implicit operator
  nameWithType: Vector2.implicit operator
  fullName: OpenTK.Mathematics.Vector2.implicit operator
  nameWithType.vb: Vector2.CType
  fullName.vb: OpenTK.Mathematics.Vector2.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: System.ValueTuple{System.Single,System.Single}
  commentId: T:System.ValueTuple{System.Single,System.Single}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: (float X, float Y)
  nameWithType: (float X, float Y)
  fullName: (float X, float Y)
  nameWithType.vb: (X As Single, Y As Single)
  fullName.vb: (X As Single, Y As Single)
  name.vb: (X As Single, Y As Single)
  spec.csharp:
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Single}.X
    name: X
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.single-.x
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Single}.Y
    name: Y
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.single-.y
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Single,System.Single}.X
    name: X
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.single-.x
  - name: " "
  - name: As
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Single}.Y
    name: Y
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.single-.y
  - name: " "
  - name: As
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: OpenTK.Mathematics.Vector2d
  commentId: T:OpenTK.Mathematics.Vector2d
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2d.html
  name: Vector2d
  nameWithType: Vector2d
  fullName: OpenTK.Mathematics.Vector2d
- uid: OpenTK.Mathematics.Vector2.op_Explicit*
  commentId: Overload:OpenTK.Mathematics.Vector2.op_Explicit
  name: explicit operator
  nameWithType: Vector2.explicit operator
  fullName: OpenTK.Mathematics.Vector2.explicit operator
  nameWithType.vb: Vector2.CType
  fullName.vb: OpenTK.Mathematics.Vector2.CType
  name.vb: CType
  spec.csharp:
  - name: explicit
  - name: " "
  - name: operator
- uid: OpenTK.Mathematics.Vector2h
  commentId: T:OpenTK.Mathematics.Vector2h
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2h.html
  name: Vector2h
  nameWithType: Vector2h
  fullName: OpenTK.Mathematics.Vector2h
- uid: OpenTK.Mathematics.Vector2i
  commentId: T:OpenTK.Mathematics.Vector2i
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2i.html
  name: Vector2i
  nameWithType: Vector2i
  fullName: OpenTK.Mathematics.Vector2i
- uid: System.Drawing.PointF
  commentId: T:System.Drawing.PointF
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.pointf
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
- uid: System.Drawing.SizeF
  commentId: T:System.Drawing.SizeF
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.sizef
  name: SizeF
  nameWithType: SizeF
  fullName: System.Drawing.SizeF
- uid: System.Numerics.Vector2
  commentId: T:System.Numerics.Vector2
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  name: Vector2
  nameWithType: Vector2
  fullName: System.Numerics.Vector2
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: OpenTK.Mathematics.Vector2.ToString*
  commentId: Overload:OpenTK.Mathematics.Vector2.ToString
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.ToString
  name: ToString
  nameWithType: Vector2.ToString
  fullName: OpenTK.Mathematics.Vector2.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  name: ToString(string, IFormatProvider)
  nameWithType: IFormattable.ToString(string, IFormatProvider)
  fullName: System.IFormattable.ToString(string, System.IFormatProvider)
  nameWithType.vb: IFormattable.ToString(String, IFormatProvider)
  fullName.vb: System.IFormattable.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: OpenTK.Mathematics.Vector2.Equals*
  commentId: Overload:OpenTK.Mathematics.Vector2.Equals
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Equals(System.Object)
  name: Equals
  nameWithType: Vector2.Equals
  fullName: OpenTK.Mathematics.Vector2.Equals
- uid: System.IEquatable{OpenTK.Mathematics.Vector2}.Equals(OpenTK.Mathematics.Vector2)
  commentId: M:System.IEquatable{OpenTK.Mathematics.Vector2}.Equals(OpenTK.Mathematics.Vector2)
  parent: System.IEquatable{OpenTK.Mathematics.Vector2}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-opentk.mathematics.vector2-.equals#system-iequatable((opentk-mathematics-vector2))-equals(opentk-mathematics-vector2)
  name: Equals(Vector2)
  nameWithType: IEquatable<Vector2>.Equals(Vector2)
  fullName: System.IEquatable<OpenTK.Mathematics.Vector2>.Equals(OpenTK.Mathematics.Vector2)
  nameWithType.vb: IEquatable(Of Vector2).Equals(Vector2)
  fullName.vb: System.IEquatable(Of OpenTK.Mathematics.Vector2).Equals(OpenTK.Mathematics.Vector2)
  spec.csharp:
  - uid: System.IEquatable{OpenTK.Mathematics.Vector2}.Equals(OpenTK.Mathematics.Vector2)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-opentk.mathematics.vector2-.equals#system-iequatable((opentk-mathematics-vector2))-equals(opentk-mathematics-vector2)
  - name: (
  - uid: OpenTK.Mathematics.Vector2
    name: Vector2
    href: OpenTK.Mathematics.Vector2.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{OpenTK.Mathematics.Vector2}.Equals(OpenTK.Mathematics.Vector2)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-opentk.mathematics.vector2-.equals#system-iequatable((opentk-mathematics-vector2))-equals(opentk-mathematics-vector2)
  - name: (
  - uid: OpenTK.Mathematics.Vector2
    name: Vector2
    href: OpenTK.Mathematics.Vector2.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: OpenTK.Mathematics.Vector2.GetHashCode*
  commentId: Overload:OpenTK.Mathematics.Vector2.GetHashCode
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.GetHashCode
  name: GetHashCode
  nameWithType: Vector2.GetHashCode
  fullName: OpenTK.Mathematics.Vector2.GetHashCode
- uid: OpenTK.Mathematics.Vector2.Deconstruct*
  commentId: Overload:OpenTK.Mathematics.Vector2.Deconstruct
  href: OpenTK.Mathematics.Vector2.html#OpenTK.Mathematics.Vector2.Deconstruct(System.Single@,System.Single@)
  name: Deconstruct
  nameWithType: Vector2.Deconstruct
  fullName: OpenTK.Mathematics.Vector2.Deconstruct
