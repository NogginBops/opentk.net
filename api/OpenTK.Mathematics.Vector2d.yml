### YamlMime:ManagedReference
items:
- uid: OpenTK.Mathematics.Vector2d
  commentId: T:OpenTK.Mathematics.Vector2d
  id: Vector2d
  parent: OpenTK.Mathematics
  children:
  - OpenTK.Mathematics.Vector2d.#ctor(System.Double,System.Double)
  - OpenTK.Mathematics.Vector2d.#ctor(System.Double)
  - OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double,System.Double)
  - OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,System.Double,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Deconstruct(System.Double@,System.Double@)
  - OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  - OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  - OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d,System.Double)
  - OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  - OpenTK.Mathematics.Vector2d.Equals(OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Equals(System.Object)
  - OpenTK.Mathematics.Vector2d.GetHashCode
  - OpenTK.Mathematics.Vector2d.Item(System.Int32)
  - OpenTK.Mathematics.Vector2d.Length
  - OpenTK.Mathematics.Vector2d.LengthSquared
  - OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double)
  - OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  - OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.NegativeInfinity
  - OpenTK.Mathematics.Vector2d.Normalize
  - OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.Normalized
  - OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.One
  - OpenTK.Mathematics.Vector2d.op_Addition(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,System.Double)
  - OpenTK.Mathematics.Vector2d.op_Equality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2
  - OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2h
  - OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2i
  - OpenTK.Mathematics.Vector2d.op_Implicit(System.ValueTuple{System.Double,System.Double})~OpenTK.Mathematics.Vector2d
  - OpenTK.Mathematics.Vector2d.op_Inequality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Quaterniond,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  - OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  - OpenTK.Mathematics.Vector2d.op_Multiply(System.Double,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_Subtraction(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.op_UnaryNegation(OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.PerpendicularLeft
  - OpenTK.Mathematics.Vector2d.PerpendicularRight
  - OpenTK.Mathematics.Vector2d.PositiveInfinity
  - OpenTK.Mathematics.Vector2d.SizeInBytes
  - OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.ToString
  - OpenTK.Mathematics.Vector2d.ToString(System.IFormatProvider)
  - OpenTK.Mathematics.Vector2d.ToString(System.String,System.IFormatProvider)
  - OpenTK.Mathematics.Vector2d.ToString(System.String)
  - OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Quaterniond)
  - OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Quaterniond@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  - OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  - OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@)
  - OpenTK.Mathematics.Vector2d.UnitX
  - OpenTK.Mathematics.Vector2d.UnitY
  - OpenTK.Mathematics.Vector2d.X
  - OpenTK.Mathematics.Vector2d.Y
  - OpenTK.Mathematics.Vector2d.Yx
  - OpenTK.Mathematics.Vector2d.Zero
  langs:
  - csharp
  - vb
  name: Vector2d
  nameWithType: Vector2d
  fullName: OpenTK.Mathematics.Vector2d
  type: Struct
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Vector2d
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 34
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Represents a 2D vector using two double-precision floating-point numbers.
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct Vector2d : IEquatable<Vector2d>, IFormattable
    content.vb: >-
      <Serializable>

      Public Structure Vector2d Implements IEquatable(Of Vector2d), IFormattable
  implements:
  - System.IEquatable{OpenTK.Mathematics.Vector2d}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.X
  commentId: F:OpenTK.Mathematics.Vector2d.X
  id: X
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector2d.X
  fullName: OpenTK.Mathematics.Vector2d.X
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: X
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 41
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: The X coordinate of this instance.
  example: []
  syntax:
    content: public double X
    return:
      type: System.Double
    content.vb: Public X As Double
- uid: OpenTK.Mathematics.Vector2d.Y
  commentId: F:OpenTK.Mathematics.Vector2d.Y
  id: Y
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector2d.Y
  fullName: OpenTK.Mathematics.Vector2d.Y
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Y
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 46
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: The Y coordinate of this instance.
  example: []
  syntax:
    content: public double Y
    return:
      type: System.Double
    content.vb: Public Y As Double
- uid: OpenTK.Mathematics.Vector2d.UnitX
  commentId: F:OpenTK.Mathematics.Vector2d.UnitX
  id: UnitX
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Vector2d.UnitX
  fullName: OpenTK.Mathematics.Vector2d.UnitX
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: UnitX
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 51
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines a unit-length Vector2d that points towards the X-axis.
  example: []
  syntax:
    content: public static readonly Vector2d UnitX
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public Shared ReadOnly UnitX As Vector2d
- uid: OpenTK.Mathematics.Vector2d.UnitY
  commentId: F:OpenTK.Mathematics.Vector2d.UnitY
  id: UnitY
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Vector2d.UnitY
  fullName: OpenTK.Mathematics.Vector2d.UnitY
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: UnitY
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 56
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines a unit-length Vector2d that points towards the Y-axis.
  example: []
  syntax:
    content: public static readonly Vector2d UnitY
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public Shared ReadOnly UnitY As Vector2d
- uid: OpenTK.Mathematics.Vector2d.Zero
  commentId: F:OpenTK.Mathematics.Vector2d.Zero
  id: Zero
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector2d.Zero
  fullName: OpenTK.Mathematics.Vector2d.Zero
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Zero
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 61
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to 0.
  example: []
  syntax:
    content: public static readonly Vector2d Zero
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public Shared ReadOnly Zero As Vector2d
- uid: OpenTK.Mathematics.Vector2d.One
  commentId: F:OpenTK.Mathematics.Vector2d.One
  id: One
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: One
  nameWithType: Vector2d.One
  fullName: OpenTK.Mathematics.Vector2d.One
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: One
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 66
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to 1.
  example: []
  syntax:
    content: public static readonly Vector2d One
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public Shared ReadOnly One As Vector2d
- uid: OpenTK.Mathematics.Vector2d.PositiveInfinity
  commentId: F:OpenTK.Mathematics.Vector2d.PositiveInfinity
  id: PositiveInfinity
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: PositiveInfinity
  nameWithType: Vector2d.PositiveInfinity
  fullName: OpenTK.Mathematics.Vector2d.PositiveInfinity
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: PositiveInfinity
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 71
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to positive infinity.
  example: []
  syntax:
    content: public static readonly Vector2d PositiveInfinity
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public Shared ReadOnly PositiveInfinity As Vector2d
- uid: OpenTK.Mathematics.Vector2d.NegativeInfinity
  commentId: F:OpenTK.Mathematics.Vector2d.NegativeInfinity
  id: NegativeInfinity
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: NegativeInfinity
  nameWithType: Vector2d.NegativeInfinity
  fullName: OpenTK.Mathematics.Vector2d.NegativeInfinity
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NegativeInfinity
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 76
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines an instance with all components set to negative infinity.
  example: []
  syntax:
    content: public static readonly Vector2d NegativeInfinity
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public Shared ReadOnly NegativeInfinity As Vector2d
- uid: OpenTK.Mathematics.Vector2d.SizeInBytes
  commentId: F:OpenTK.Mathematics.Vector2d.SizeInBytes
  id: SizeInBytes
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: SizeInBytes
  nameWithType: Vector2d.SizeInBytes
  fullName: OpenTK.Mathematics.Vector2d.SizeInBytes
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: SizeInBytes
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 81
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the size of the Vector2d struct in bytes.
  example: []
  syntax:
    content: public static readonly int SizeInBytes
    return:
      type: System.Int32
    content.vb: Public Shared ReadOnly SizeInBytes As Integer
- uid: OpenTK.Mathematics.Vector2d.#ctor(System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Vector2d(double)
  nameWithType: Vector2d.Vector2d(double)
  fullName: OpenTK.Mathematics.Vector2d.Vector2d(double)
  type: Constructor
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: .ctor
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 87
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Initializes a new instance of the <xref href="OpenTK.Mathematics.Vector2d" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public Vector2d(double value)
    parameters:
    - id: value
      type: System.Double
      description: The value that will initialize this instance.
    content.vb: Public Sub New(value As Double)
  overload: OpenTK.Mathematics.Vector2d.#ctor*
  nameWithType.vb: Vector2d.New(Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.New(Double)
  name.vb: New(Double)
- uid: OpenTK.Mathematics.Vector2d.#ctor(System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Vector2d(double, double)
  nameWithType: Vector2d.Vector2d(double, double)
  fullName: OpenTK.Mathematics.Vector2d.Vector2d(double, double)
  type: Constructor
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: .ctor
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 98
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Initializes a new instance of the <xref href="OpenTK.Mathematics.Vector2d" data-throw-if-not-resolved="false"></xref> struct.
  example: []
  syntax:
    content: public Vector2d(double x, double y)
    parameters:
    - id: x
      type: System.Double
      description: The X coordinate.
    - id: y
      type: System.Double
      description: The Y coordinate.
    content.vb: Public Sub New(x As Double, y As Double)
  overload: OpenTK.Mathematics.Vector2d.#ctor*
  nameWithType.vb: Vector2d.New(Double, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.New(Double, Double)
  name.vb: New(Double, Double)
- uid: OpenTK.Mathematics.Vector2d.Item(System.Int32)
  commentId: P:OpenTK.Mathematics.Vector2d.Item(System.Int32)
  id: Item(System.Int32)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: Vector2d.this[int]
  fullName: OpenTK.Mathematics.Vector2d.this[int]
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: this[]
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 109
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets or sets the value at the index of the Vector.
  example: []
  syntax:
    content: public double this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The index of the component from the Vector.
    return:
      type: System.Double
    content.vb: Public Default Property this[](index As Integer) As Double
  overload: OpenTK.Mathematics.Vector2d.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Thrown if the index is less than 0 or greater than 1.
  nameWithType.vb: Vector2d.this[](Integer)
  fullName.vb: OpenTK.Mathematics.Vector2d.this[](Integer)
  name.vb: this[](Integer)
- uid: OpenTK.Mathematics.Vector2d.Length
  commentId: P:OpenTK.Mathematics.Vector2d.Length
  id: Length
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Vector2d.Length
  fullName: OpenTK.Mathematics.Vector2d.Length
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Length
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 147
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the length (magnitude) of the vector.
  example: []
  syntax:
    content: public double Length { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Length As Double
  overload: OpenTK.Mathematics.Vector2d.Length*
  seealso:
  - linkId: OpenTK.Mathematics.Vector2d.LengthSquared
    commentId: P:OpenTK.Mathematics.Vector2d.LengthSquared
- uid: OpenTK.Mathematics.Vector2d.LengthSquared
  commentId: P:OpenTK.Mathematics.Vector2d.LengthSquared
  id: LengthSquared
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: LengthSquared
  nameWithType: Vector2d.LengthSquared
  fullName: OpenTK.Mathematics.Vector2d.LengthSquared
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: LengthSquared
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 157
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the square of the vector length (magnitude).
  remarks: >-
    This property avoids the costly square root operation required by the Length property. This makes it more suitable

    for comparisons.
  example: []
  syntax:
    content: public double LengthSquared { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property LengthSquared As Double
  overload: OpenTK.Mathematics.Vector2d.LengthSquared*
- uid: OpenTK.Mathematics.Vector2d.PerpendicularRight
  commentId: P:OpenTK.Mathematics.Vector2d.PerpendicularRight
  id: PerpendicularRight
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: PerpendicularRight
  nameWithType: Vector2d.PerpendicularRight
  fullName: OpenTK.Mathematics.Vector2d.PerpendicularRight
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: PerpendicularRight
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 162
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the perpendicular vector on the right side of this vector.
  example: []
  syntax:
    content: public Vector2d PerpendicularRight { get; }
    parameters: []
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public ReadOnly Property PerpendicularRight As Vector2d
  overload: OpenTK.Mathematics.Vector2d.PerpendicularRight*
- uid: OpenTK.Mathematics.Vector2d.PerpendicularLeft
  commentId: P:OpenTK.Mathematics.Vector2d.PerpendicularLeft
  id: PerpendicularLeft
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: PerpendicularLeft
  nameWithType: Vector2d.PerpendicularLeft
  fullName: OpenTK.Mathematics.Vector2d.PerpendicularLeft
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: PerpendicularLeft
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 167
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets the perpendicular vector on the left side of this vector.
  example: []
  syntax:
    content: public Vector2d PerpendicularLeft { get; }
    parameters: []
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public ReadOnly Property PerpendicularLeft As Vector2d
  overload: OpenTK.Mathematics.Vector2d.PerpendicularLeft*
- uid: OpenTK.Mathematics.Vector2d.Normalized
  commentId: M:OpenTK.Mathematics.Vector2d.Normalized
  id: Normalized
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Normalized()
  nameWithType: Vector2d.Normalized()
  fullName: OpenTK.Mathematics.Vector2d.Normalized()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Normalized
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 173
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a copy of the Vector2d scaled to unit length.
  example: []
  syntax:
    content: public Vector2d Normalized()
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The normalized copy.
    content.vb: Public Function Normalized() As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Normalized*
- uid: OpenTK.Mathematics.Vector2d.Normalize
  commentId: M:OpenTK.Mathematics.Vector2d.Normalize
  id: Normalize
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector2d.Normalize()
  fullName: OpenTK.Mathematics.Vector2d.Normalize()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Normalize
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 183
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scales the Vector2 to unit length.
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize()
  overload: OpenTK.Mathematics.Vector2d.Normalize*
- uid: OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Add(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Add(Vector2d, Vector2d)
  nameWithType: Vector2d.Add(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Add
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 196
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Adds two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Add(Vector2d a, Vector2d b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of operation.
    content.vb: >-
      <Pure>

      Public Shared Function Add(a As Vector2d, b As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Add*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: Add(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Add(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.Add(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Add(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Add
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 209
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Adds two vectors.
  example: []
  syntax:
    content: public static void Add(in Vector2d a, in Vector2d b, out Vector2d result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: Result of operation.
    content.vb: Public Shared Sub Add(a As Vector2d, b As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Add*
  nameWithType.vb: Vector2d.Add(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: Add(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Subtract(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Subtract(Vector2d, Vector2d)
  nameWithType: Vector2d.Subtract(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Subtract
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 221
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Subtract one Vector from another.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Subtract(Vector2d a, Vector2d b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of subtraction.
    content.vb: >-
      <Pure>

      Public Shared Function Subtract(a As Vector2d, b As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Subtract*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: Subtract(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Subtract(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.Subtract(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Subtract(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Subtract
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 234
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Subtract one Vector from another.
  example: []
  syntax:
    content: public static void Subtract(in Vector2d a, in Vector2d b, out Vector2d result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: Result of subtraction.
    content.vb: Public Shared Sub Subtract(a As Vector2d, b As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Subtract*
  nameWithType.vb: Vector2d.Subtract(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: Subtract(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  id: Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Multiply(Vector2d, double)
  nameWithType: Vector2d.Multiply(Vector2d, double)
  fullName: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 246
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Multiply(Vector2d vector, double scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: System.Double
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Multiply(vector As Vector2d, scale As Double) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.Multiply(Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d, Double)
  name.vb: Multiply(Vector2d, Double)
- uid: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  id: Multiply(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Multiply(in Vector2d, double, out Vector2d)
  nameWithType: Vector2d.Multiply(in Vector2d, double, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Multiply(in OpenTK.Mathematics.Vector2d, double, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 259
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by a scalar.
  example: []
  syntax:
    content: public static void Multiply(in Vector2d vector, double scale, out Vector2d result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: System.Double
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: Public Shared Sub Multiply(vector As Vector2d, scale As Double, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Multiply*
  nameWithType.vb: Vector2d.Multiply(Vector2d, Double, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d, Double, OpenTK.Mathematics.Vector2d)
  name.vb: Multiply(Vector2d, Double, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Multiply(Vector2d, Vector2d)
  nameWithType: Vector2d.Multiply(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 271
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by the components a vector (scale).
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Multiply(Vector2d vector, Vector2d scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Multiply(vector As Vector2d, scale As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: Multiply(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Multiply(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.Multiply(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Multiply(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 284
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies a vector by the components of a vector (scale).
  example: []
  syntax:
    content: public static void Multiply(in Vector2d vector, in Vector2d scale, out Vector2d result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: Public Shared Sub Multiply(vector As Vector2d, scale As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Multiply*
  nameWithType.vb: Vector2d.Multiply(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: Multiply(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d,System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d,System.Double)
  id: Divide(OpenTK.Mathematics.Vector2d,System.Double)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Divide(Vector2d, double)
  nameWithType: Vector2d.Divide(Vector2d, double)
  fullName: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 296
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides a vector by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Divide(Vector2d vector, double scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: System.Double
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Divide(vector As Vector2d, scale As Double) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Divide*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.Divide(Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d, Double)
  name.vb: Divide(Vector2d, Double)
- uid: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  id: Divide(OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Divide(in Vector2d, double, out Vector2d)
  nameWithType: Vector2d.Divide(in Vector2d, double, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Divide(in OpenTK.Mathematics.Vector2d, double, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 309
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides a vector by a scalar.
  example: []
  syntax:
    content: public static void Divide(in Vector2d vector, double scale, out Vector2d result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: System.Double
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: Public Shared Sub Divide(vector As Vector2d, scale As Double, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Divide*
  nameWithType.vb: Vector2d.Divide(Vector2d, Double, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d, Double, OpenTK.Mathematics.Vector2d)
  name.vb: Divide(Vector2d, Double, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Divide(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Divide(Vector2d, Vector2d)
  nameWithType: Vector2d.Divide(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 321
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides a vector by the components of a vector (scale).
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Divide(Vector2d vector, Vector2d scale)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Divide(vector As Vector2d, scale As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Divide*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: Divide(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Divide(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.Divide(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Divide(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Divide
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 334
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divide a vector by the components of a vector (scale).
  example: []
  syntax:
    content: public static void Divide(in Vector2d vector, in Vector2d scale, out Vector2d result)
    parameters:
    - id: vector
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: Result of the operation.
    content.vb: Public Shared Sub Divide(vector As Vector2d, scale As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Divide*
  nameWithType.vb: Vector2d.Divide(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: Divide(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: ComponentMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ComponentMin(Vector2d, Vector2d)
  nameWithType: Vector2d.ComponentMin(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ComponentMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 346
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the smallest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d ComponentMin(Vector2d a, Vector2d b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The component-wise minimum.
    content.vb: >-
      <Pure>

      Public Shared Function ComponentMin(a As Vector2d, b As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.ComponentMin*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: ComponentMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ComponentMin(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.ComponentMin(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.ComponentMin(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ComponentMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 360
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the smallest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: public static void ComponentMin(in Vector2d a, in Vector2d b, out Vector2d result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The component-wise minimum.
    content.vb: Public Shared Sub ComponentMin(a As Vector2d, b As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.ComponentMin*
  nameWithType.vb: Vector2d.ComponentMin(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: ComponentMin(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: ComponentMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ComponentMax(Vector2d, Vector2d)
  nameWithType: Vector2d.ComponentMax(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ComponentMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 372
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the largest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d ComponentMax(Vector2d a, Vector2d b)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The component-wise maximum.
    content.vb: >-
      <Pure>

      Public Shared Function ComponentMax(a As Vector2d, b As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.ComponentMax*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: ComponentMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ComponentMax(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.ComponentMax(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.ComponentMax(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ComponentMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 386
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a vector created from the largest of the corresponding components of the given vectors.
  example: []
  syntax:
    content: public static void ComponentMax(in Vector2d a, in Vector2d b, out Vector2d result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The component-wise maximum.
    content.vb: Public Shared Sub ComponentMax(a As Vector2d, b As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.ComponentMax*
  nameWithType.vb: Vector2d.ComponentMax(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: ComponentMax(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: MagnitudeMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: MagnitudeMin(Vector2d, Vector2d)
  nameWithType: Vector2d.MagnitudeMin(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MagnitudeMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 399
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2d with the minimum magnitude. If the magnitudes are equal, the second vector

    is selected.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d MagnitudeMin(Vector2d left, Vector2d right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The minimum Vector2d.
    content.vb: >-
      <Pure>

      Public Shared Function MagnitudeMin(left As Vector2d, right As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.MagnitudeMin*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: MagnitudeMin(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: MagnitudeMin(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.MagnitudeMin(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.MagnitudeMin(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MagnitudeMin
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 412
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2d with the minimum magnitude. If the magnitudes are equal, the second vector

    is selected.
  example: []
  syntax:
    content: public static void MagnitudeMin(in Vector2d left, in Vector2d right, out Vector2d result)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The magnitude-wise minimum.
    content.vb: Public Shared Sub MagnitudeMin(left As Vector2d, right As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.MagnitudeMin*
  nameWithType.vb: Vector2d.MagnitudeMin(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: MagnitudeMin(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: MagnitudeMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: MagnitudeMax(Vector2d, Vector2d)
  nameWithType: Vector2d.MagnitudeMax(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MagnitudeMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 424
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2d with the minimum magnitude. If the magnitudes are equal, the first vector

    is selected.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d MagnitudeMax(Vector2d left, Vector2d right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The minimum Vector2d.
    content.vb: >-
      <Pure>

      Public Shared Function MagnitudeMax(left As Vector2d, right As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.MagnitudeMax*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: MagnitudeMax(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: MagnitudeMax(in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.MagnitudeMax(in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.MagnitudeMax(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MagnitudeMax
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 437
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Returns the Vector2d with the maximum magnitude. If the magnitudes are equal, the first vector

    is selected.
  example: []
  syntax:
    content: public static void MagnitudeMax(in Vector2d left, in Vector2d right, out Vector2d result)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The magnitude-wise maximum.
    content.vb: Public Shared Sub MagnitudeMax(left As Vector2d, right As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.MagnitudeMax*
  nameWithType.vb: Vector2d.MagnitudeMax(Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: MagnitudeMax(Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Clamp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Clamp(Vector2d, Vector2d, Vector2d)
  nameWithType: Vector2d.Clamp(Vector2d, Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Clamp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 449
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamp a vector to the given minimum and maximum vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Clamp(Vector2d vec, Vector2d min, Vector2d max)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: Input vector.
    - id: min
      type: OpenTK.Mathematics.Vector2d
      description: Minimum vector.
    - id: max
      type: OpenTK.Mathematics.Vector2d
      description: Maximum vector.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The clamped vector.
    content.vb: >-
      <Pure>

      Public Shared Function Clamp(vec As Vector2d, min As Vector2d, max As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Clamp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: Clamp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Clamp(in Vector2d, in Vector2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.Clamp(in Vector2d, in Vector2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Clamp(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Clamp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 464
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamp a vector to the given minimum and maximum vectors.
  example: []
  syntax:
    content: public static void Clamp(in Vector2d vec, in Vector2d min, in Vector2d max, out Vector2d result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: Input vector.
    - id: min
      type: OpenTK.Mathematics.Vector2d
      description: Minimum vector.
    - id: max
      type: OpenTK.Mathematics.Vector2d
      description: Maximum vector.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The clamped vector.
    content.vb: Public Shared Sub Clamp(vec As Vector2d, min As Vector2d, max As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Clamp*
  nameWithType.vb: Vector2d.Clamp(Vector2d, Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: Clamp(Vector2d, Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Distance(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Distance(Vector2d, Vector2d)
  nameWithType: Vector2d.Distance(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Distance
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 476
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the euclidean distance between two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Distance(Vector2d vec1, Vector2d vec2)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2d
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2d
      description: The second vector.
    return:
      type: System.Double
      description: The distance.
    content.vb: >-
      <Pure>

      Public Shared Function Distance(vec1 As Vector2d, vec2 As Vector2d) As Double
  overload: OpenTK.Mathematics.Vector2d.Distance*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  commentId: M:OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  id: Distance(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Distance(in Vector2d, in Vector2d, out double)
  nameWithType: Vector2d.Distance(in Vector2d, in Vector2d, out double)
  fullName: OpenTK.Mathematics.Vector2d.Distance(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Distance
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 489
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the euclidean distance between two vectors.
  example: []
  syntax:
    content: public static void Distance(in Vector2d vec1, in Vector2d vec2, out double result)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2d
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2d
      description: The second vector.
    - id: result
      type: System.Double
      description: The distance.
    content.vb: Public Shared Sub Distance(vec1 As Vector2d, vec2 As Vector2d, result As Double)
  overload: OpenTK.Mathematics.Vector2d.Distance*
  nameWithType.vb: Vector2d.Distance(Vector2d, Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, Double)
  name.vb: Distance(Vector2d, Vector2d, Double)
- uid: OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: DistanceSquared(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: DistanceSquared(Vector2d, Vector2d)
  nameWithType: Vector2d.DistanceSquared(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: DistanceSquared
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 500
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the squared euclidean distance between two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double DistanceSquared(Vector2d vec1, Vector2d vec2)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2d
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2d
      description: The second vector.
    return:
      type: System.Double
      description: The squared distance.
    content.vb: >-
      <Pure>

      Public Shared Function DistanceSquared(vec1 As Vector2d, vec2 As Vector2d) As Double
  overload: OpenTK.Mathematics.Vector2d.DistanceSquared*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  commentId: M:OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  id: DistanceSquared(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: DistanceSquared(in Vector2d, in Vector2d, out double)
  nameWithType: Vector2d.DistanceSquared(in Vector2d, in Vector2d, out double)
  fullName: OpenTK.Mathematics.Vector2d.DistanceSquared(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: DistanceSquared
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 513
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compute the squared euclidean distance between two vectors.
  example: []
  syntax:
    content: public static void DistanceSquared(in Vector2d vec1, in Vector2d vec2, out double result)
    parameters:
    - id: vec1
      type: OpenTK.Mathematics.Vector2d
      description: The first vector.
    - id: vec2
      type: OpenTK.Mathematics.Vector2d
      description: The second vector.
    - id: result
      type: System.Double
      description: The squared distance.
    content.vb: Public Shared Sub DistanceSquared(vec1 As Vector2d, vec2 As Vector2d, result As Double)
  overload: OpenTK.Mathematics.Vector2d.DistanceSquared*
  nameWithType.vb: Vector2d.DistanceSquared(Vector2d, Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, Double)
  name.vb: DistanceSquared(Vector2d, Vector2d, Double)
- uid: OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d)
  id: Normalize(OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Normalize(Vector2d)
  nameWithType: Vector2d.Normalize(Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Normalize
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 523
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to unit length.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Normalize(Vector2d vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The input vector.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The normalized copy.
    content.vb: >-
      <Pure>

      Public Shared Function Normalize(vec As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Normalize*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: Normalize(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Normalize(in Vector2d, out Vector2d)
  nameWithType: Vector2d.Normalize(in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Normalize(in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Normalize
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 537
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to unit length.
  example: []
  syntax:
    content: public static void Normalize(in Vector2d vec, out Vector2d result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The input vector.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The normalized vector.
    content.vb: Public Shared Sub Normalize(vec As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Normalize*
  nameWithType.vb: Vector2d.Normalize(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Normalize(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: Normalize(Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d)
  id: NormalizeFast(OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: NormalizeFast(Vector2d)
  nameWithType: Vector2d.NormalizeFast(Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NormalizeFast
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 549
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to approximately unit length.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d NormalizeFast(Vector2d vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The input vector.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The normalized copy.
    content.vb: >-
      <Pure>

      Public Shared Function NormalizeFast(vec As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.NormalizeFast*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: NormalizeFast(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: NormalizeFast(in Vector2d, out Vector2d)
  nameWithType: Vector2d.NormalizeFast(in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.NormalizeFast(in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NormalizeFast
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 563
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scale a vector to approximately unit length.
  example: []
  syntax:
    content: public static void NormalizeFast(in Vector2d vec, out Vector2d result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The input vector.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The normalized vector.
    content.vb: Public Shared Sub NormalizeFast(vec As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.NormalizeFast*
  nameWithType.vb: Vector2d.NormalizeFast(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: NormalizeFast(Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Dot(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Dot(Vector2d, Vector2d)
  nameWithType: Vector2d.Dot(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Dot
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 576
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculate the dot (scalar) product of two vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Dot(Vector2d left, Vector2d right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    return:
      type: System.Double
      description: The dot product of the two inputs.
    content.vb: >-
      <Pure>

      Public Shared Function Dot(left As Vector2d, right As Vector2d) As Double
  overload: OpenTK.Mathematics.Vector2d.Dot*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  commentId: M:OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  id: Dot(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Dot(in Vector2d, in Vector2d, out double)
  nameWithType: Vector2d.Dot(in Vector2d, in Vector2d, out double)
  fullName: OpenTK.Mathematics.Vector2d.Dot(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, out double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Dot
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 588
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculate the dot (scalar) product of two vectors.
  example: []
  syntax:
    content: public static void Dot(in Vector2d left, in Vector2d right, out double result)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: First operand.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: Second operand.
    - id: result
      type: System.Double
      description: The dot product of the two inputs.
    content.vb: Public Shared Sub Dot(left As Vector2d, right As Vector2d, result As Double)
  overload: OpenTK.Mathematics.Vector2d.Dot*
  nameWithType.vb: Vector2d.Dot(Vector2d, Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, Double)
  name.vb: Dot(Vector2d, Vector2d, Double)
- uid: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double)
  id: Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Lerp(Vector2d, Vector2d, double)
  nameWithType: Vector2d.Lerp(Vector2d, Vector2d, double)
  fullName: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 600
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the linear blend of the 2 given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Lerp(Vector2d a, Vector2d b, double blend)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second input vector.
    - id: blend
      type: System.Double
      description: The blend factor.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: a when blend=0, b when blend=1, and a linear combination otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Lerp(a As Vector2d, b As Vector2d, blend As Double) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Lerp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.Lerp(Vector2d, Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, Double)
  name.vb: Lerp(Vector2d, Vector2d, Double)
- uid: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  id: Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Lerp(in Vector2d, in Vector2d, double, out Vector2d)
  nameWithType: Vector2d.Lerp(in Vector2d, in Vector2d, double, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Lerp(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, double, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 615
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the linear blend of the 2 given vectors.
  example: []
  syntax:
    content: public static void Lerp(in Vector2d a, in Vector2d b, double blend, out Vector2d result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second input vector.
    - id: blend
      type: System.Double
      description: The blend factor.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: a when blend=0, b when blend=1, and a linear combination otherwise.
    content.vb: Public Shared Sub Lerp(a As Vector2d, b As Vector2d, blend As Double, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Lerp*
  nameWithType.vb: Vector2d.Lerp(Vector2d, Vector2d, Double, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, Double, OpenTK.Mathematics.Vector2d)
  name.vb: Lerp(Vector2d, Vector2d, Double, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Lerp(Vector2d, Vector2d, Vector2d)
  nameWithType: Vector2d.Lerp(Vector2d, Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 628
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the component-wise linear blend of the 2 given vectors.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Lerp(Vector2d a, Vector2d b, Vector2d blend)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second input vector.
    - id: blend
      type: OpenTK.Mathematics.Vector2d
      description: The blend factor.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: a when blend=0, b when blend=1, and a component-wise linear combination otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Lerp(a As Vector2d, b As Vector2d, blend As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Lerp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d@)
  id: Lerp(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Lerp(in Vector2d, in Vector2d, Vector2d, out Vector2d)
  nameWithType: Vector2d.Lerp(in Vector2d, in Vector2d, Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Lerp(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 643
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a new vector that is the component-wise linear blend of the 2 given vectors.
  example: []
  syntax:
    content: public static void Lerp(in Vector2d a, in Vector2d b, Vector2d blend, out Vector2d result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First input vector.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second input vector.
    - id: blend
      type: OpenTK.Mathematics.Vector2d
      description: The blend factor.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: a when blend=0, b when blend=1, and a component-wise linear combination otherwise.
    content.vb: Public Shared Sub Lerp(a As Vector2d, b As Vector2d, blend As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Lerp*
  nameWithType.vb: Vector2d.Lerp(Vector2d, Vector2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: Lerp(Vector2d, Vector2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double,System.Double)
  id: BaryCentric(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double,System.Double)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: BaryCentric(Vector2d, Vector2d, Vector2d, double, double)
  nameWithType: Vector2d.BaryCentric(Vector2d, Vector2d, Vector2d, double, double)
  fullName: OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: BaryCentric
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 658
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Interpolate 3 Vectors using Barycentric coordinates.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d BaryCentric(Vector2d a, Vector2d b, Vector2d c, double u, double v)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First input Vector.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second input Vector.
    - id: c
      type: OpenTK.Mathematics.Vector2d
      description: Third input Vector.
    - id: u
      type: System.Double
      description: First Barycentric Coordinate.
    - id: v
      type: System.Double
      description: Second Barycentric Coordinate.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function BaryCentric(a As Vector2d, b As Vector2d, c As Vector2d, u As Double, v As Double) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.BaryCentric*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.BaryCentric(Vector2d, Vector2d, Vector2d, Double, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, Double, Double)
  name.vb: BaryCentric(Vector2d, Vector2d, Vector2d, Double, Double)
- uid: OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,System.Double,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,System.Double,OpenTK.Mathematics.Vector2d@)
  id: BaryCentric(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@,System.Double,System.Double,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: BaryCentric(in Vector2d, in Vector2d, in Vector2d, double, double, out Vector2d)
  nameWithType: Vector2d.BaryCentric(in Vector2d, in Vector2d, in Vector2d, double, double, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.BaryCentric(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Vector2d, double, double, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: BaryCentric
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 677
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Interpolate 3 Vectors using Barycentric coordinates.
  example: []
  syntax:
    content: public static void BaryCentric(in Vector2d a, in Vector2d b, in Vector2d c, double u, double v, out Vector2d result)
    parameters:
    - id: a
      type: OpenTK.Mathematics.Vector2d
      description: First input Vector.
    - id: b
      type: OpenTK.Mathematics.Vector2d
      description: Second input Vector.
    - id: c
      type: OpenTK.Mathematics.Vector2d
      description: Third input Vector.
    - id: u
      type: System.Double
      description: First Barycentric Coordinate.
    - id: v
      type: System.Double
      description: Second Barycentric Coordinate.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: >-
        Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c

        otherwise.
    content.vb: Public Shared Sub BaryCentric(a As Vector2d, b As Vector2d, c As Vector2d, u As Double, v As Double, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.BaryCentric*
  nameWithType.vb: Vector2d.BaryCentric(Vector2d, Vector2d, Vector2d, Double, Double, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d, Double, Double, OpenTK.Mathematics.Vector2d)
  name.vb: BaryCentric(Vector2d, Vector2d, Vector2d, Double, Double, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  commentId: M:OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  id: TransformRow(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: TransformRow(Vector2d, Matrix2d)
  nameWithType: Vector2d.TransformRow(Vector2d, Matrix2d)
  fullName: OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Matrix2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: TransformRow
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 702
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d TransformRow(Vector2d vec, Matrix2d mat)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    - id: mat
      type: OpenTK.Mathematics.Matrix2d
      description: The desired transformation.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Function TransformRow(vec As Vector2d, mat As Matrix2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.TransformRow*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@)
  id: TransformRow(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: TransformRow(in Vector2d, in Matrix2d, out Vector2d)
  nameWithType: Vector2d.TransformRow(in Vector2d, in Matrix2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.TransformRow(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Matrix2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: TransformRow
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 715
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix.
  example: []
  syntax:
    content: public static void TransformRow(in Vector2d vec, in Matrix2d mat, out Vector2d result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    - id: mat
      type: OpenTK.Mathematics.Matrix2d
      description: The desired transformation.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The transformed vector.
    content.vb: Public Shared Sub TransformRow(vec As Vector2d, mat As Matrix2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.TransformRow*
  nameWithType.vb: Vector2d.TransformRow(Vector2d, Matrix2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Matrix2d, OpenTK.Mathematics.Vector2d)
  name.vb: TransformRow(Vector2d, Matrix2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Quaterniond)
  commentId: M:OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Quaterniond)
  id: Transform(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Quaterniond)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Transform(Vector2d, Quaterniond)
  nameWithType: Vector2d.Transform(Vector2d, Quaterniond)
  fullName: OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Quaterniond)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Transform
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 728
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transforms a vector by a quaternion rotation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d Transform(Vector2d vec, Quaterniond quat)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    - id: quat
      type: OpenTK.Mathematics.Quaterniond
      description: The quaternion to rotate the vector by.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Function Transform(vec As Vector2d, quat As Quaterniond) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Transform*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Quaterniond@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Quaterniond@,OpenTK.Mathematics.Vector2d@)
  id: Transform(OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Quaterniond@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Transform(in Vector2d, in Quaterniond, out Vector2d)
  nameWithType: Vector2d.Transform(in Vector2d, in Quaterniond, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Transform(in OpenTK.Mathematics.Vector2d, in OpenTK.Mathematics.Quaterniond, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Transform
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 741
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transforms a vector by a quaternion rotation.
  example: []
  syntax:
    content: public static void Transform(in Vector2d vec, in Quaterniond quat, out Vector2d result)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    - id: quat
      type: OpenTK.Mathematics.Quaterniond
      description: The quaternion to rotate the vector by.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: Public Shared Sub Transform(vec As Vector2d, quat As Quaterniond, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.Transform*
  nameWithType.vb: Vector2d.Transform(Vector2d, Quaterniond, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Quaterniond, OpenTK.Mathematics.Vector2d)
  name.vb: Transform(Vector2d, Quaterniond, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  id: TransformColumn(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: TransformColumn(Matrix2d, Vector2d)
  nameWithType: Vector2d.TransformColumn(Matrix2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d, OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: TransformColumn
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 758
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix using right-handed notation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d TransformColumn(Matrix2d mat, Vector2d vec)
    parameters:
    - id: mat
      type: OpenTK.Mathematics.Matrix2d
      description: The desired transformation.
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Function TransformColumn(mat As Matrix2d, vec As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.TransformColumn*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
- uid: OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  commentId: M:OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  id: TransformColumn(OpenTK.Mathematics.Matrix2d@,OpenTK.Mathematics.Vector2d@,OpenTK.Mathematics.Vector2d@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: TransformColumn(in Matrix2d, in Vector2d, out Vector2d)
  nameWithType: Vector2d.TransformColumn(in Matrix2d, in Vector2d, out Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.TransformColumn(in OpenTK.Mathematics.Matrix2d, in OpenTK.Mathematics.Vector2d, out OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: TransformColumn
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 771
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix using right-handed notation.
  example: []
  syntax:
    content: public static void TransformColumn(in Matrix2d mat, in Vector2d vec, out Vector2d result)
    parameters:
    - id: mat
      type: OpenTK.Mathematics.Matrix2d
      description: The desired transformation.
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    - id: result
      type: OpenTK.Mathematics.Vector2d
      description: The transformed vector.
    content.vb: Public Shared Sub TransformColumn(mat As Matrix2d, vec As Vector2d, result As Vector2d)
  overload: OpenTK.Mathematics.Vector2d.TransformColumn*
  nameWithType.vb: Vector2d.TransformColumn(Matrix2d, Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d, OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: TransformColumn(Matrix2d, Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.Yx
  commentId: P:OpenTK.Mathematics.Vector2d.Yx
  id: Yx
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Yx
  nameWithType: Vector2d.Yx
  fullName: OpenTK.Mathematics.Vector2d.Yx
  type: Property
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Yx
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 780
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Gets or sets an OpenTK.Vector2d with the Y and X components of this instance.
  example: []
  syntax:
    content: public Vector2d Yx { get; set; }
    parameters: []
    return:
      type: OpenTK.Mathematics.Vector2d
    content.vb: Public Property Yx As Vector2d
  overload: OpenTK.Mathematics.Vector2d.Yx*
- uid: OpenTK.Mathematics.Vector2d.op_Addition(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Addition(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: op_Addition(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator +(Vector2d, Vector2d)
  nameWithType: Vector2d.operator +(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator +(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Addition
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 797
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Adds two instances.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator +(Vector2d left, Vector2d right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: The left instance.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: The right instance.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Operator +(left As Vector2d, right As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Addition*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.+(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.+(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: +(Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Subtraction(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Subtraction(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: op_Subtraction(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator -(Vector2d, Vector2d)
  nameWithType: Vector2d.operator -(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator -(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Subtraction
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 811
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Subtracts two instances.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator -(Vector2d left, Vector2d right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: The left instance.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: The right instance.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Operator -(left As Vector2d, right As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Subtraction*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.-(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.-(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: -(Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_UnaryNegation(OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_UnaryNegation(OpenTK.Mathematics.Vector2d)
  id: op_UnaryNegation(OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator -(Vector2d)
  nameWithType: Vector2d.operator -(Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator -(OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_UnaryNegation
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 824
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Negates an instance.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator -(Vector2d vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The instance.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Operator -(vec As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_UnaryNegation*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.-(Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.-(OpenTK.Mathematics.Vector2d)
  name.vb: -(Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  id: op_Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator *(Vector2d, double)
  nameWithType: Vector2d.operator *(Vector2d, double)
  fullName: OpenTK.Mathematics.Vector2d.operator *(OpenTK.Mathematics.Vector2d, double)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 838
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiplies an instance by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator *(Vector2d vec, double f)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The instance.
    - id: f
      type: System.Double
      description: The scalar.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Operator *(vec As Vector2d, f As Double) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.*(Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.*(OpenTK.Mathematics.Vector2d, Double)
  name.vb: '*(Vector2d, Double)'
- uid: OpenTK.Mathematics.Vector2d.op_Multiply(System.Double,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Multiply(System.Double,OpenTK.Mathematics.Vector2d)
  id: op_Multiply(System.Double,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator *(double, Vector2d)
  nameWithType: Vector2d.operator *(double, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator *(double, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 852
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Multiply an instance by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator *(double f, Vector2d vec)
    parameters:
    - id: f
      type: System.Double
      description: The scalar.
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The instance.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Operator *(f As Double, vec As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.*(Double, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.*(Double, OpenTK.Mathematics.Vector2d)
  name.vb: '*(Double, Vector2d)'
- uid: OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator *(Vector2d, Vector2d)
  nameWithType: Vector2d.operator *(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator *(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 866
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Component-wise multiplication between the specified instance by a scale vector.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator *(Vector2d vec, Vector2d scale)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of multiplication.
    content.vb: >-
      <Pure>

      Public Shared Operator *(vec As Vector2d, scale As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.*(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.*(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: '*(Vector2d, Vector2d)'
- uid: OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  id: op_Multiply(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator *(Vector2d, Matrix2d)
  nameWithType: Vector2d.operator *(Vector2d, Matrix2d)
  fullName: OpenTK.Mathematics.Vector2d.operator *(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Matrix2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 880
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator *(Vector2d vec, Matrix2d mat)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    - id: mat
      type: OpenTK.Mathematics.Matrix2d
      description: The desired transformation.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Operator *(vec As Vector2d, mat As Matrix2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.*(Vector2d, Matrix2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.*(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Matrix2d)
  name.vb: '*(Vector2d, Matrix2d)'
- uid: OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  id: op_Multiply(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator *(Matrix2d, Vector2d)
  nameWithType: Vector2d.operator *(Matrix2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator *(OpenTK.Mathematics.Matrix2d, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 893
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transform a Vector by the given Matrix using right-handed notation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator *(Matrix2d mat, Vector2d vec)
    parameters:
    - id: mat
      type: OpenTK.Mathematics.Matrix2d
      description: The desired transformation.
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Operator *(mat As Matrix2d, vec As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.*(Matrix2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.*(OpenTK.Mathematics.Matrix2d, OpenTK.Mathematics.Vector2d)
  name.vb: '*(Matrix2d, Vector2d)'
- uid: OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Quaterniond,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Quaterniond,OpenTK.Mathematics.Vector2d)
  id: op_Multiply(OpenTK.Mathematics.Quaterniond,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator *(Quaterniond, Vector2d)
  nameWithType: Vector2d.operator *(Quaterniond, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator *(OpenTK.Mathematics.Quaterniond, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Multiply
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 906
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Transforms a vector by a quaternion rotation.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator *(Quaterniond quat, Vector2d vec)
    parameters:
    - id: quat
      type: OpenTK.Mathematics.Quaterniond
      description: The quaternion to rotate the vector by.
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The vector to transform.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The transformed vector.
    content.vb: >-
      <Pure>

      Public Shared Operator *(quat As Quaterniond, vec As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Multiply*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.*(Quaterniond, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.*(OpenTK.Mathematics.Quaterniond, OpenTK.Mathematics.Vector2d)
  name.vb: '*(Quaterniond, Vector2d)'
- uid: OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,System.Double)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,System.Double)
  id: op_Division(OpenTK.Mathematics.Vector2d,System.Double)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator /(Vector2d, double)
  nameWithType: Vector2d.operator /(Vector2d, double)
  fullName: OpenTK.Mathematics.Vector2d.operator /(OpenTK.Mathematics.Vector2d, double)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Division
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 919
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Divides an instance by a scalar.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator /(Vector2d vec, double f)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The instance.
    - id: f
      type: System.Double
      description: The scalar.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: The result of the operation.
    content.vb: >-
      <Pure>

      Public Shared Operator /(vec As Vector2d, f As Double) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Division*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d./(Vector2d, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d./(OpenTK.Mathematics.Vector2d, Double)
  name.vb: /(Vector2d, Double)
- uid: OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: op_Division(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator /(Vector2d, Vector2d)
  nameWithType: Vector2d.operator /(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator /(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Division
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 933
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Component-wise division between the specified instance by a scale vector.
  example: []
  syntax:
    content: >-
      [Pure]

      public static Vector2d operator /(Vector2d vec, Vector2d scale)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: Left operand.
    - id: scale
      type: OpenTK.Mathematics.Vector2d
      description: Right operand.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: Result of the division.
    content.vb: >-
      <Pure>

      Public Shared Operator /(vec As Vector2d, scale As Vector2d) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Division*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d./(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d./(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: /(Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Equality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Equality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: op_Equality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator ==(Vector2d, Vector2d)
  nameWithType: Vector2d.operator ==(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator ==(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Equality
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 947
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compares two instances for equality.
  example: []
  syntax:
    content: public static bool operator ==(Vector2d left, Vector2d right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: The left instance.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: The right instance.
    return:
      type: System.Boolean
      description: True, if both instances are equal; false otherwise.
    content.vb: Public Shared Operator =(left As Vector2d, right As Vector2d) As Boolean
  overload: OpenTK.Mathematics.Vector2d.op_Equality*
  nameWithType.vb: Vector2d.=(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.=(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: =(Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Inequality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.op_Inequality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  id: op_Inequality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: operator !=(Vector2d, Vector2d)
  nameWithType: Vector2d.operator !=(Vector2d, Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.operator !=(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Inequality
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 958
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Compares two instances for ienquality.
  example: []
  syntax:
    content: public static bool operator !=(Vector2d left, Vector2d right)
    parameters:
    - id: left
      type: OpenTK.Mathematics.Vector2d
      description: The left instance.
    - id: right
      type: OpenTK.Mathematics.Vector2d
      description: The right instance.
    return:
      type: System.Boolean
      description: True, if the instances are not equal; false otherwise.
    content.vb: Public Shared Operator <>(left As Vector2d, right As Vector2d) As Boolean
  overload: OpenTK.Mathematics.Vector2d.op_Inequality*
  nameWithType.vb: Vector2d.<>(Vector2d, Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.<>(OpenTK.Mathematics.Vector2d, OpenTK.Mathematics.Vector2d)
  name.vb: <>(Vector2d, Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2
  commentId: M:OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2
  id: op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: explicit operator Vector2(Vector2d)
  nameWithType: Vector2d.explicit operator Vector2(Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.explicit operator OpenTK.Mathematics.Vector2(OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 968
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts OpenTK.Vector2d to OpenTK.Vector2.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator Vector2(Vector2d vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The Vector2d to convert.
    return:
      type: OpenTK.Mathematics.Vector2
      description: The resulting Vector2.
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2d) As Vector2
  overload: OpenTK.Mathematics.Vector2d.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.CType(Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.CType(OpenTK.Mathematics.Vector2d)
  name.vb: CType(Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2h
  commentId: M:OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2h
  id: op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2h
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: explicit operator Vector2h(Vector2d)
  nameWithType: Vector2d.explicit operator Vector2h(Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.explicit operator OpenTK.Mathematics.Vector2h(OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 979
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts OpenTK.Vector2d to OpenTK.Vector2h.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator Vector2h(Vector2d vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The Vector2d to convert.
    return:
      type: OpenTK.Mathematics.Vector2h
      description: The resulting Vector2h.
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2d) As Vector2h
  overload: OpenTK.Mathematics.Vector2d.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.CType(Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.CType(OpenTK.Mathematics.Vector2d)
  name.vb: CType(Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2i
  commentId: M:OpenTK.Mathematics.Vector2d.op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2i
  id: op_Explicit(OpenTK.Mathematics.Vector2d)~OpenTK.Mathematics.Vector2i
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: explicit operator Vector2i(Vector2d)
  nameWithType: Vector2d.explicit operator Vector2i(Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.explicit operator OpenTK.Mathematics.Vector2i(OpenTK.Mathematics.Vector2d)
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Explicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 990
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Converts OpenTK.Vector2d to OpenTK.Vector2i.
  example: []
  syntax:
    content: >-
      [Pure]

      public static explicit operator Vector2i(Vector2d vec)
    parameters:
    - id: vec
      type: OpenTK.Mathematics.Vector2d
      description: The Vector2d to convert.
    return:
      type: OpenTK.Mathematics.Vector2i
      description: The resulting Vector2i.
    content.vb: >-
      <Pure>

      Public Shared Narrowing Operator CType(vec As Vector2d) As Vector2i
  overload: OpenTK.Mathematics.Vector2d.op_Explicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.CType(Vector2d)
  fullName.vb: OpenTK.Mathematics.Vector2d.CType(OpenTK.Mathematics.Vector2d)
  name.vb: CType(Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Implicit(System.ValueTuple{System.Double,System.Double})~OpenTK.Mathematics.Vector2d
  commentId: M:OpenTK.Mathematics.Vector2d.op_Implicit(System.ValueTuple{System.Double,System.Double})~OpenTK.Mathematics.Vector2d
  id: op_Implicit(System.ValueTuple{System.Double,System.Double})~OpenTK.Mathematics.Vector2d
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: implicit operator Vector2d((double X, double Y))
  nameWithType: Vector2d.implicit operator Vector2d((double X, double Y))
  fullName: OpenTK.Mathematics.Vector2d.implicit operator OpenTK.Mathematics.Vector2d((double X, double Y))
  type: Operator
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: op_Implicit
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1002
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Initializes a new instance of the <xref href="OpenTK.Mathematics.Vector2d" data-throw-if-not-resolved="false"></xref> struct using a tuple containing the component

    values.
  example: []
  syntax:
    content: >-
      [Pure]

      public static implicit operator Vector2d((double X, double Y) values)
    parameters:
    - id: values
      type: System.ValueTuple{System.Double,System.Double}
      description: A tuple containing the component values.
    return:
      type: OpenTK.Mathematics.Vector2d
      description: A new instance of the <xref href="OpenTK.Mathematics.Vector2d" data-throw-if-not-resolved="false"></xref> struct with the given component values.
    content.vb: >-
      <Pure>

      Public Shared Widening Operator CType(values As (X As Double, Y As Double)) As Vector2d
  overload: OpenTK.Mathematics.Vector2d.op_Implicit*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.CType((X As Double, Y As Double))
  fullName.vb: OpenTK.Mathematics.Vector2d.CType((X As Double, Y As Double))
  name.vb: CType((X As Double, Y As Double))
- uid: OpenTK.Mathematics.Vector2d.ToString
  commentId: M:OpenTK.Mathematics.Vector2d.ToString
  id: ToString
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector2d.ToString()
  fullName: OpenTK.Mathematics.Vector2d.ToString()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1009
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: OpenTK.Mathematics.Vector2d.ToString*
- uid: OpenTK.Mathematics.Vector2d.ToString(System.String)
  commentId: M:OpenTK.Mathematics.Vector2d.ToString(System.String)
  id: ToString(System.String)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ToString(string)
  nameWithType: Vector2d.ToString(string)
  fullName: OpenTK.Mathematics.Vector2d.ToString(string)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1015
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public string ToString(string format)
    parameters:
    - id: format
      type: System.String
    return:
      type: System.String
    content.vb: Public Function ToString(format As String) As String
  overload: OpenTK.Mathematics.Vector2d.ToString*
  nameWithType.vb: Vector2d.ToString(String)
  fullName.vb: OpenTK.Mathematics.Vector2d.ToString(String)
  name.vb: ToString(String)
- uid: OpenTK.Mathematics.Vector2d.ToString(System.IFormatProvider)
  commentId: M:OpenTK.Mathematics.Vector2d.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: Vector2d.ToString(IFormatProvider)
  fullName: OpenTK.Mathematics.Vector2d.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1021
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public string ToString(IFormatProvider formatProvider)
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
    return:
      type: System.String
    content.vb: Public Function ToString(formatProvider As IFormatProvider) As String
  overload: OpenTK.Mathematics.Vector2d.ToString*
- uid: OpenTK.Mathematics.Vector2d.ToString(System.String,System.IFormatProvider)
  commentId: M:OpenTK.Mathematics.Vector2d.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: ToString(string, IFormatProvider)
  nameWithType: Vector2d.ToString(string, IFormatProvider)
  fullName: OpenTK.Mathematics.Vector2d.ToString(string, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ToString
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1027
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public string ToString(string format, IFormatProvider formatProvider)
    parameters:
    - id: format
      type: System.String
    - id: formatProvider
      type: System.IFormatProvider
    return:
      type: System.String
    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String
  overload: OpenTK.Mathematics.Vector2d.ToString*
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: Vector2d.ToString(String, IFormatProvider)
  fullName.vb: OpenTK.Mathematics.Vector2d.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
- uid: OpenTK.Mathematics.Vector2d.Equals(System.Object)
  commentId: M:OpenTK.Mathematics.Vector2d.Equals(System.Object)
  id: Equals(System.Object)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Vector2d.Equals(object)
  fullName: OpenTK.Mathematics.Vector2d.Equals(object)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Equals
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1037
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: OpenTK.Mathematics.Vector2d.Equals*
  nameWithType.vb: Vector2d.Equals(Object)
  fullName.vb: OpenTK.Mathematics.Vector2d.Equals(Object)
  name.vb: Equals(Object)
- uid: OpenTK.Mathematics.Vector2d.Equals(OpenTK.Mathematics.Vector2d)
  commentId: M:OpenTK.Mathematics.Vector2d.Equals(OpenTK.Mathematics.Vector2d)
  id: Equals(OpenTK.Mathematics.Vector2d)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Equals(Vector2d)
  nameWithType: Vector2d.Equals(Vector2d)
  fullName: OpenTK.Mathematics.Vector2d.Equals(OpenTK.Mathematics.Vector2d)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Equals
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1043
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public bool Equals(Vector2d other)
    parameters:
    - id: other
      type: OpenTK.Mathematics.Vector2d
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As Vector2d) As Boolean
  overload: OpenTK.Mathematics.Vector2d.Equals*
  implements:
  - System.IEquatable{OpenTK.Mathematics.Vector2d}.Equals(OpenTK.Mathematics.Vector2d)
- uid: OpenTK.Mathematics.Vector2d.GetHashCode
  commentId: M:OpenTK.Mathematics.Vector2d.GetHashCode
  id: GetHashCode
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector2d.GetHashCode()
  fullName: OpenTK.Mathematics.Vector2d.GetHashCode()
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: GetHashCode
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1050
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: OpenTK.Mathematics.Vector2d.GetHashCode*
- uid: OpenTK.Mathematics.Vector2d.Deconstruct(System.Double@,System.Double@)
  commentId: M:OpenTK.Mathematics.Vector2d.Deconstruct(System.Double@,System.Double@)
  id: Deconstruct(System.Double@,System.Double@)
  parent: OpenTK.Mathematics.Vector2d
  langs:
  - csharp
  - vb
  name: Deconstruct(out double, out double)
  nameWithType: Vector2d.Deconstruct(out double, out double)
  fullName: OpenTK.Mathematics.Vector2d.Deconstruct(out double, out double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/Vector/Vector2d.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Deconstruct
    path: opentk/src/OpenTK.Mathematics/Vector/Vector2d.cs
    startLine: 1060
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Deconstructs the vector into it's individual components.
  example: []
  syntax:
    content: >-
      [Pure]

      public void Deconstruct(out double x, out double y)
    parameters:
    - id: x
      type: System.Double
      description: The X component of the vector.
    - id: y
      type: System.Double
      description: The Y component of the vector.
    content.vb: >-
      <Pure>

      Public Sub Deconstruct(x As Double, y As Double)
  overload: OpenTK.Mathematics.Vector2d.Deconstruct*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Vector2d.Deconstruct(Double, Double)
  fullName.vb: OpenTK.Mathematics.Vector2d.Deconstruct(Double, Double)
  name.vb: Deconstruct(Double, Double)
references:
- uid: OpenTK.Mathematics
  commentId: N:OpenTK.Mathematics
  href: OpenTK.html
  name: OpenTK.Mathematics
  nameWithType: OpenTK.Mathematics
  fullName: OpenTK.Mathematics
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
- uid: System.IEquatable{OpenTK.Mathematics.Vector2d}
  commentId: T:System.IEquatable{OpenTK.Mathematics.Vector2d}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Vector2d>
  nameWithType: IEquatable<Vector2d>
  fullName: System.IEquatable<OpenTK.Mathematics.Vector2d>
  nameWithType.vb: IEquatable(Of Vector2d)
  fullName.vb: System.IEquatable(Of OpenTK.Mathematics.Vector2d)
  name.vb: IEquatable(Of Vector2d)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: OpenTK.Mathematics.Vector2d
    name: Vector2d
    href: OpenTK.Mathematics.Vector2d.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d
    name: Vector2d
    href: OpenTK.Mathematics.Vector2d.html
  - name: )
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: OpenTK.Mathematics.Vector2d
  commentId: T:OpenTK.Mathematics.Vector2d
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2d.html
  name: Vector2d
  nameWithType: Vector2d
  fullName: OpenTK.Mathematics.Vector2d
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: OpenTK.Mathematics.Vector2d.#ctor*
  commentId: Overload:OpenTK.Mathematics.Vector2d.#ctor
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.#ctor(System.Double)
  name: Vector2d
  nameWithType: Vector2d.Vector2d
  fullName: OpenTK.Mathematics.Vector2d.Vector2d
  nameWithType.vb: Vector2d.New
  fullName.vb: OpenTK.Mathematics.Vector2d.New
  name.vb: New
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.indexoutofrangeexception
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: OpenTK.Mathematics.Vector2d.Item*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Item
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Item(System.Int32)
  name: this
  nameWithType: Vector2d.this
  fullName: OpenTK.Mathematics.Vector2d.this
  nameWithType.vb: Vector2d.this[]
  fullName.vb: OpenTK.Mathematics.Vector2d.this[]
  name.vb: this[]
- uid: OpenTK.Mathematics.Vector2d.LengthSquared
  commentId: P:OpenTK.Mathematics.Vector2d.LengthSquared
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.LengthSquared
  name: LengthSquared
  nameWithType: Vector2d.LengthSquared
  fullName: OpenTK.Mathematics.Vector2d.LengthSquared
- uid: OpenTK.Mathematics.Vector2d.Length*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Length
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Length
  name: Length
  nameWithType: Vector2d.Length
  fullName: OpenTK.Mathematics.Vector2d.Length
- uid: OpenTK.Mathematics.Vector2d.Length
  commentId: P:OpenTK.Mathematics.Vector2d.Length
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Length
  name: Length
  nameWithType: Vector2d.Length
  fullName: OpenTK.Mathematics.Vector2d.Length
- uid: OpenTK.Mathematics.Vector2d.LengthSquared*
  commentId: Overload:OpenTK.Mathematics.Vector2d.LengthSquared
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.LengthSquared
  name: LengthSquared
  nameWithType: Vector2d.LengthSquared
  fullName: OpenTK.Mathematics.Vector2d.LengthSquared
- uid: OpenTK.Mathematics.Vector2d.PerpendicularRight*
  commentId: Overload:OpenTK.Mathematics.Vector2d.PerpendicularRight
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.PerpendicularRight
  name: PerpendicularRight
  nameWithType: Vector2d.PerpendicularRight
  fullName: OpenTK.Mathematics.Vector2d.PerpendicularRight
- uid: OpenTK.Mathematics.Vector2d.PerpendicularLeft*
  commentId: Overload:OpenTK.Mathematics.Vector2d.PerpendicularLeft
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.PerpendicularLeft
  name: PerpendicularLeft
  nameWithType: Vector2d.PerpendicularLeft
  fullName: OpenTK.Mathematics.Vector2d.PerpendicularLeft
- uid: OpenTK.Mathematics.Vector2d.Normalized*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Normalized
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Normalized
  name: Normalized
  nameWithType: Vector2d.Normalized
  fullName: OpenTK.Mathematics.Vector2d.Normalized
- uid: OpenTK.Mathematics.Vector2d.Normalize*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Normalize
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Normalize
  name: Normalize
  nameWithType: Vector2d.Normalize
  fullName: OpenTK.Mathematics.Vector2d.Normalize
- uid: OpenTK.Mathematics.Vector2d.Add*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Add
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Add(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: Add
  nameWithType: Vector2d.Add
  fullName: OpenTK.Mathematics.Vector2d.Add
- uid: OpenTK.Mathematics.Vector2d.Subtract*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Subtract
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Subtract(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: Subtract
  nameWithType: Vector2d.Subtract
  fullName: OpenTK.Mathematics.Vector2d.Subtract
- uid: OpenTK.Mathematics.Vector2d.Multiply*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Multiply
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  name: Multiply
  nameWithType: Vector2d.Multiply
  fullName: OpenTK.Mathematics.Vector2d.Multiply
- uid: OpenTK.Mathematics.Vector2d.Divide*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Divide
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Divide(OpenTK.Mathematics.Vector2d,System.Double)
  name: Divide
  nameWithType: Vector2d.Divide
  fullName: OpenTK.Mathematics.Vector2d.Divide
- uid: OpenTK.Mathematics.Vector2d.ComponentMin*
  commentId: Overload:OpenTK.Mathematics.Vector2d.ComponentMin
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.ComponentMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: ComponentMin
  nameWithType: Vector2d.ComponentMin
  fullName: OpenTK.Mathematics.Vector2d.ComponentMin
- uid: OpenTK.Mathematics.Vector2d.ComponentMax*
  commentId: Overload:OpenTK.Mathematics.Vector2d.ComponentMax
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.ComponentMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: ComponentMax
  nameWithType: Vector2d.ComponentMax
  fullName: OpenTK.Mathematics.Vector2d.ComponentMax
- uid: OpenTK.Mathematics.Vector2d.MagnitudeMin*
  commentId: Overload:OpenTK.Mathematics.Vector2d.MagnitudeMin
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.MagnitudeMin(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: MagnitudeMin
  nameWithType: Vector2d.MagnitudeMin
  fullName: OpenTK.Mathematics.Vector2d.MagnitudeMin
- uid: OpenTK.Mathematics.Vector2d.MagnitudeMax*
  commentId: Overload:OpenTK.Mathematics.Vector2d.MagnitudeMax
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.MagnitudeMax(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: MagnitudeMax
  nameWithType: Vector2d.MagnitudeMax
  fullName: OpenTK.Mathematics.Vector2d.MagnitudeMax
- uid: OpenTK.Mathematics.Vector2d.Clamp*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Clamp
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Clamp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: Clamp
  nameWithType: Vector2d.Clamp
  fullName: OpenTK.Mathematics.Vector2d.Clamp
- uid: OpenTK.Mathematics.Vector2d.Distance*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Distance
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Distance(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: Distance
  nameWithType: Vector2d.Distance
  fullName: OpenTK.Mathematics.Vector2d.Distance
- uid: OpenTK.Mathematics.Vector2d.DistanceSquared*
  commentId: Overload:OpenTK.Mathematics.Vector2d.DistanceSquared
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.DistanceSquared(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: DistanceSquared
  nameWithType: Vector2d.DistanceSquared
  fullName: OpenTK.Mathematics.Vector2d.DistanceSquared
- uid: OpenTK.Mathematics.Vector2d.NormalizeFast*
  commentId: Overload:OpenTK.Mathematics.Vector2d.NormalizeFast
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.NormalizeFast(OpenTK.Mathematics.Vector2d)
  name: NormalizeFast
  nameWithType: Vector2d.NormalizeFast
  fullName: OpenTK.Mathematics.Vector2d.NormalizeFast
- uid: OpenTK.Mathematics.Vector2d.Dot*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Dot
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Dot(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: Dot
  nameWithType: Vector2d.Dot
  fullName: OpenTK.Mathematics.Vector2d.Dot
- uid: OpenTK.Mathematics.Vector2d.Lerp*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Lerp
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Lerp(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double)
  name: Lerp
  nameWithType: Vector2d.Lerp
  fullName: OpenTK.Mathematics.Vector2d.Lerp
- uid: OpenTK.Mathematics.Vector2d.BaryCentric*
  commentId: Overload:OpenTK.Mathematics.Vector2d.BaryCentric
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.BaryCentric(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d,System.Double,System.Double)
  name: BaryCentric
  nameWithType: Vector2d.BaryCentric
  fullName: OpenTK.Mathematics.Vector2d.BaryCentric
- uid: OpenTK.Mathematics.Vector2d.TransformRow*
  commentId: Overload:OpenTK.Mathematics.Vector2d.TransformRow
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.TransformRow(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Matrix2d)
  name: TransformRow
  nameWithType: Vector2d.TransformRow
  fullName: OpenTK.Mathematics.Vector2d.TransformRow
- uid: OpenTK.Mathematics.Matrix2d
  commentId: T:OpenTK.Mathematics.Matrix2d
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Matrix2d.html
  name: Matrix2d
  nameWithType: Matrix2d
  fullName: OpenTK.Mathematics.Matrix2d
- uid: OpenTK.Mathematics.Vector2d.Transform*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Transform
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Transform(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Quaterniond)
  name: Transform
  nameWithType: Vector2d.Transform
  fullName: OpenTK.Mathematics.Vector2d.Transform
- uid: OpenTK.Mathematics.Quaterniond
  commentId: T:OpenTK.Mathematics.Quaterniond
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Quaterniond.html
  name: Quaterniond
  nameWithType: Quaterniond
  fullName: OpenTK.Mathematics.Quaterniond
- uid: OpenTK.Mathematics.Vector2d.TransformColumn*
  commentId: Overload:OpenTK.Mathematics.Vector2d.TransformColumn
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.TransformColumn(OpenTK.Mathematics.Matrix2d,OpenTK.Mathematics.Vector2d)
  name: TransformColumn
  nameWithType: Vector2d.TransformColumn
  fullName: OpenTK.Mathematics.Vector2d.TransformColumn
- uid: OpenTK.Mathematics.Vector2d.Yx*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Yx
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Yx
  name: Yx
  nameWithType: Vector2d.Yx
  fullName: OpenTK.Mathematics.Vector2d.Yx
- uid: OpenTK.Mathematics.Vector2d.op_Addition*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Addition
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Addition(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: operator +
  nameWithType: Vector2d.operator +
  fullName: OpenTK.Mathematics.Vector2d.operator +
  nameWithType.vb: Vector2d.+
  fullName.vb: OpenTK.Mathematics.Vector2d.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d.op_Addition*
    name: +
    href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Addition(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Subtraction*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Subtraction
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Subtraction(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: operator -
  nameWithType: Vector2d.operator -
  fullName: OpenTK.Mathematics.Vector2d.operator -
  nameWithType.vb: Vector2d.-
  fullName.vb: OpenTK.Mathematics.Vector2d.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d.op_Subtraction*
    name: '-'
    href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Subtraction(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_UnaryNegation*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_UnaryNegation
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_UnaryNegation(OpenTK.Mathematics.Vector2d)
  name: operator -
  nameWithType: Vector2d.operator -
  fullName: OpenTK.Mathematics.Vector2d.operator -
  nameWithType.vb: Vector2d.-
  fullName.vb: OpenTK.Mathematics.Vector2d.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d.op_UnaryNegation*
    name: '-'
    href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_UnaryNegation(OpenTK.Mathematics.Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Multiply*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Multiply
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,System.Double)
  name: operator *
  nameWithType: Vector2d.operator *
  fullName: OpenTK.Mathematics.Vector2d.operator *
  nameWithType.vb: Vector2d.*
  fullName.vb: OpenTK.Mathematics.Vector2d.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d.op_Multiply*
    name: '*'
    href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Multiply(OpenTK.Mathematics.Vector2d,System.Double)
- uid: OpenTK.Mathematics.Vector2d.op_Division*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Division
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,System.Double)
  name: operator /
  nameWithType: Vector2d.operator /
  fullName: OpenTK.Mathematics.Vector2d.operator /
  nameWithType.vb: Vector2d./
  fullName.vb: OpenTK.Mathematics.Vector2d./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d.op_Division*
    name: /
    href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Division(OpenTK.Mathematics.Vector2d,System.Double)
- uid: OpenTK.Mathematics.Vector2d.op_Equality*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Equality
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Equality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: operator ==
  nameWithType: Vector2d.operator ==
  fullName: OpenTK.Mathematics.Vector2d.operator ==
  nameWithType.vb: Vector2d.=
  fullName.vb: OpenTK.Mathematics.Vector2d.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d.op_Equality*
    name: ==
    href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Equality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Mathematics.Vector2d.op_Inequality*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Inequality
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Inequality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
  name: operator !=
  nameWithType: Vector2d.operator !=
  fullName: OpenTK.Mathematics.Vector2d.operator !=
  nameWithType.vb: Vector2d.<>
  fullName.vb: OpenTK.Mathematics.Vector2d.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: OpenTK.Mathematics.Vector2d.op_Inequality*
    name: '!='
    href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.op_Inequality(OpenTK.Mathematics.Vector2d,OpenTK.Mathematics.Vector2d)
- uid: OpenTK.Mathematics.Vector2d.op_Explicit*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Explicit
  name: explicit operator
  nameWithType: Vector2d.explicit operator
  fullName: OpenTK.Mathematics.Vector2d.explicit operator
  nameWithType.vb: Vector2d.CType
  fullName.vb: OpenTK.Mathematics.Vector2d.CType
  name.vb: CType
  spec.csharp:
  - name: explicit
  - name: " "
  - name: operator
- uid: OpenTK.Mathematics.Vector2
  commentId: T:OpenTK.Mathematics.Vector2
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2.html
  name: Vector2
  nameWithType: Vector2
  fullName: OpenTK.Mathematics.Vector2
- uid: OpenTK.Mathematics.Vector2h
  commentId: T:OpenTK.Mathematics.Vector2h
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2h.html
  name: Vector2h
  nameWithType: Vector2h
  fullName: OpenTK.Mathematics.Vector2h
- uid: OpenTK.Mathematics.Vector2i
  commentId: T:OpenTK.Mathematics.Vector2i
  parent: OpenTK.Mathematics
  href: OpenTK.Mathematics.Vector2i.html
  name: Vector2i
  nameWithType: Vector2i
  fullName: OpenTK.Mathematics.Vector2i
- uid: OpenTK.Mathematics.Vector2d.op_Implicit*
  commentId: Overload:OpenTK.Mathematics.Vector2d.op_Implicit
  name: implicit operator
  nameWithType: Vector2d.implicit operator
  fullName: OpenTK.Mathematics.Vector2d.implicit operator
  nameWithType.vb: Vector2d.CType
  fullName.vb: OpenTK.Mathematics.Vector2d.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: System.ValueTuple{System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: (double X, double Y)
  nameWithType: (double X, double Y)
  fullName: (double X, double Y)
  nameWithType.vb: (X As Double, Y As Double)
  fullName.vb: (X As Double, Y As Double)
  name.vb: (X As Double, Y As Double)
  spec.csharp:
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.X
    name: X
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.x
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.Y
    name: Y
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.y
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Double,System.Double}.X
    name: X
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.x
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.Y
    name: Y
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.y
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: OpenTK.Mathematics.Vector2d.ToString*
  commentId: Overload:OpenTK.Mathematics.Vector2d.ToString
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.ToString
  name: ToString
  nameWithType: Vector2d.ToString
  fullName: OpenTK.Mathematics.Vector2d.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  name: ToString(string, IFormatProvider)
  nameWithType: IFormattable.ToString(string, IFormatProvider)
  fullName: System.IFormattable.ToString(string, System.IFormatProvider)
  nameWithType.vb: IFormattable.ToString(String, IFormatProvider)
  fullName.vb: System.IFormattable.ToString(String, System.IFormatProvider)
  name.vb: ToString(String, IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformattable.tostring
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.IFormatProvider
    name: IFormatProvider
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: OpenTK.Mathematics.Vector2d.Equals*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Equals
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Equals(System.Object)
  name: Equals
  nameWithType: Vector2d.Equals
  fullName: OpenTK.Mathematics.Vector2d.Equals
- uid: System.IEquatable{OpenTK.Mathematics.Vector2d}.Equals(OpenTK.Mathematics.Vector2d)
  commentId: M:System.IEquatable{OpenTK.Mathematics.Vector2d}.Equals(OpenTK.Mathematics.Vector2d)
  parent: System.IEquatable{OpenTK.Mathematics.Vector2d}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-opentk.mathematics.vector2d-.equals#system-iequatable((opentk-mathematics-vector2d))-equals(opentk-mathematics-vector2d)
  name: Equals(Vector2d)
  nameWithType: IEquatable<Vector2d>.Equals(Vector2d)
  fullName: System.IEquatable<OpenTK.Mathematics.Vector2d>.Equals(OpenTK.Mathematics.Vector2d)
  nameWithType.vb: IEquatable(Of Vector2d).Equals(Vector2d)
  fullName.vb: System.IEquatable(Of OpenTK.Mathematics.Vector2d).Equals(OpenTK.Mathematics.Vector2d)
  spec.csharp:
  - uid: System.IEquatable{OpenTK.Mathematics.Vector2d}.Equals(OpenTK.Mathematics.Vector2d)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-opentk.mathematics.vector2d-.equals#system-iequatable((opentk-mathematics-vector2d))-equals(opentk-mathematics-vector2d)
  - name: (
  - uid: OpenTK.Mathematics.Vector2d
    name: Vector2d
    href: OpenTK.Mathematics.Vector2d.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{OpenTK.Mathematics.Vector2d}.Equals(OpenTK.Mathematics.Vector2d)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-opentk.mathematics.vector2d-.equals#system-iequatable((opentk-mathematics-vector2d))-equals(opentk-mathematics-vector2d)
  - name: (
  - uid: OpenTK.Mathematics.Vector2d
    name: Vector2d
    href: OpenTK.Mathematics.Vector2d.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: OpenTK.Mathematics.Vector2d.GetHashCode*
  commentId: Overload:OpenTK.Mathematics.Vector2d.GetHashCode
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.GetHashCode
  name: GetHashCode
  nameWithType: Vector2d.GetHashCode
  fullName: OpenTK.Mathematics.Vector2d.GetHashCode
- uid: OpenTK.Mathematics.Vector2d.Deconstruct*
  commentId: Overload:OpenTK.Mathematics.Vector2d.Deconstruct
  href: OpenTK.Mathematics.Vector2d.html#OpenTK.Mathematics.Vector2d.Deconstruct(System.Double@,System.Double@)
  name: Deconstruct
  nameWithType: Vector2d.Deconstruct
  fullName: OpenTK.Mathematics.Vector2d.Deconstruct
