### YamlMime:ManagedReference
items:
- uid: OpenTK.Mathematics.MathHelper
  commentId: T:OpenTK.Mathematics.MathHelper
  id: MathHelper
  parent: OpenTK.Mathematics
  children:
  - OpenTK.Mathematics.MathHelper.Abs(System.Decimal)
  - OpenTK.Mathematics.MathHelper.Abs(System.Double)
  - OpenTK.Mathematics.MathHelper.Abs(System.Int16)
  - OpenTK.Mathematics.MathHelper.Abs(System.Int32)
  - OpenTK.Mathematics.MathHelper.Abs(System.Int64)
  - OpenTK.Mathematics.MathHelper.Abs(System.SByte)
  - OpenTK.Mathematics.MathHelper.Abs(System.Single)
  - OpenTK.Mathematics.MathHelper.Acos(System.Double)
  - OpenTK.Mathematics.MathHelper.ApproximatelyEqual(System.Single,System.Single,System.Int32)
  - OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(System.Double,System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(System.Single,System.Single,System.Single)
  - OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(System.Double,System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(System.Single,System.Single,System.Single)
  - OpenTK.Mathematics.MathHelper.Asin(System.Double)
  - OpenTK.Mathematics.MathHelper.Atan(System.Double)
  - OpenTK.Mathematics.MathHelper.Atan2(System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.BigMul(System.Int32,System.Int32)
  - OpenTK.Mathematics.MathHelper.BinomialCoefficient(System.Int32,System.Int32)
  - OpenTK.Mathematics.MathHelper.Ceiling(System.Decimal)
  - OpenTK.Mathematics.MathHelper.Ceiling(System.Double)
  - OpenTK.Mathematics.MathHelper.Clamp(System.Double,System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)
  - OpenTK.Mathematics.MathHelper.Clamp(System.Single,System.Single,System.Single)
  - OpenTK.Mathematics.MathHelper.ClampAngle(System.Double)
  - OpenTK.Mathematics.MathHelper.ClampAngle(System.Single)
  - OpenTK.Mathematics.MathHelper.ClampRadians(System.Double)
  - OpenTK.Mathematics.MathHelper.ClampRadians(System.Single)
  - OpenTK.Mathematics.MathHelper.Cos(System.Double)
  - OpenTK.Mathematics.MathHelper.Cosh(System.Double)
  - OpenTK.Mathematics.MathHelper.DegreesToRadians(System.Double)
  - OpenTK.Mathematics.MathHelper.DegreesToRadians(System.Single)
  - OpenTK.Mathematics.MathHelper.DivRem(System.Int32,System.Int32,System.Int32@)
  - OpenTK.Mathematics.MathHelper.DivRem(System.Int64,System.Int64,System.Int64@)
  - OpenTK.Mathematics.MathHelper.E
  - OpenTK.Mathematics.MathHelper.Exp(System.Double)
  - OpenTK.Mathematics.MathHelper.Factorial(System.Int32)
  - OpenTK.Mathematics.MathHelper.Floor(System.Decimal)
  - OpenTK.Mathematics.MathHelper.Floor(System.Double)
  - OpenTK.Mathematics.MathHelper.IEEERemainder(System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.InverseSqrtFast(System.Double)
  - OpenTK.Mathematics.MathHelper.InverseSqrtFast(System.Single)
  - OpenTK.Mathematics.MathHelper.Lerp(System.Double,System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.Lerp(System.Single,System.Single,System.Single)
  - OpenTK.Mathematics.MathHelper.Log(System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.Log(System.Double)
  - OpenTK.Mathematics.MathHelper.Log10(System.Double)
  - OpenTK.Mathematics.MathHelper.Log10E
  - OpenTK.Mathematics.MathHelper.Log2(System.Double)
  - OpenTK.Mathematics.MathHelper.Log2E
  - OpenTK.Mathematics.MathHelper.MapRange(System.Double,System.Double,System.Double,System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.MapRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - OpenTK.Mathematics.MathHelper.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  - OpenTK.Mathematics.MathHelper.Max(System.Byte,System.Byte)
  - OpenTK.Mathematics.MathHelper.Max(System.Decimal,System.Decimal)
  - OpenTK.Mathematics.MathHelper.Max(System.Int16,System.Int16)
  - OpenTK.Mathematics.MathHelper.Max(System.Int32,System.Int32)
  - OpenTK.Mathematics.MathHelper.Max(System.Int64,System.Int64)
  - OpenTK.Mathematics.MathHelper.Max(System.SByte,System.SByte)
  - OpenTK.Mathematics.MathHelper.Max(System.Single,System.Single)
  - OpenTK.Mathematics.MathHelper.Max(System.UInt16,System.UInt16)
  - OpenTK.Mathematics.MathHelper.Max(System.UInt32,System.UInt32)
  - OpenTK.Mathematics.MathHelper.Max(System.UInt64,System.UInt64)
  - OpenTK.Mathematics.MathHelper.Min(System.Byte,System.Byte)
  - OpenTK.Mathematics.MathHelper.Min(System.Decimal,System.Decimal)
  - OpenTK.Mathematics.MathHelper.Min(System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.Min(System.Int16,System.Int16)
  - OpenTK.Mathematics.MathHelper.Min(System.Int32,System.Int32)
  - OpenTK.Mathematics.MathHelper.Min(System.Int64,System.Int64)
  - OpenTK.Mathematics.MathHelper.Min(System.SByte,System.SByte)
  - OpenTK.Mathematics.MathHelper.Min(System.Single,System.Single)
  - OpenTK.Mathematics.MathHelper.Min(System.UInt16,System.UInt16)
  - OpenTK.Mathematics.MathHelper.Min(System.UInt32,System.UInt32)
  - OpenTK.Mathematics.MathHelper.Min(System.UInt64,System.UInt64)
  - OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Double)
  - OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Int32)
  - OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Int64)
  - OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Single)
  - OpenTK.Mathematics.MathHelper.NormalizeAngle(System.Double)
  - OpenTK.Mathematics.MathHelper.NormalizeAngle(System.Single)
  - OpenTK.Mathematics.MathHelper.NormalizeRadians(System.Double)
  - OpenTK.Mathematics.MathHelper.NormalizeRadians(System.Single)
  - OpenTK.Mathematics.MathHelper.Pi
  - OpenTK.Mathematics.MathHelper.PiOver2
  - OpenTK.Mathematics.MathHelper.PiOver3
  - OpenTK.Mathematics.MathHelper.PiOver4
  - OpenTK.Mathematics.MathHelper.PiOver6
  - OpenTK.Mathematics.MathHelper.Pow(System.Double,System.Double)
  - OpenTK.Mathematics.MathHelper.RadiansToDegrees(System.Double)
  - OpenTK.Mathematics.MathHelper.RadiansToDegrees(System.Single)
  - OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.Int32,System.MidpointRounding)
  - OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.Int32)
  - OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.MidpointRounding)
  - OpenTK.Mathematics.MathHelper.Round(System.Decimal)
  - OpenTK.Mathematics.MathHelper.Round(System.Double,System.Int32,System.MidpointRounding)
  - OpenTK.Mathematics.MathHelper.Round(System.Double,System.Int32)
  - OpenTK.Mathematics.MathHelper.Round(System.Double,System.MidpointRounding)
  - OpenTK.Mathematics.MathHelper.Round(System.Double)
  - OpenTK.Mathematics.MathHelper.Sign(System.Decimal)
  - OpenTK.Mathematics.MathHelper.Sign(System.Double)
  - OpenTK.Mathematics.MathHelper.Sign(System.Int16)
  - OpenTK.Mathematics.MathHelper.Sign(System.Int32)
  - OpenTK.Mathematics.MathHelper.Sign(System.Int64)
  - OpenTK.Mathematics.MathHelper.Sign(System.SByte)
  - OpenTK.Mathematics.MathHelper.Sign(System.Single)
  - OpenTK.Mathematics.MathHelper.Sin(System.Double)
  - OpenTK.Mathematics.MathHelper.Sinh(System.Double)
  - OpenTK.Mathematics.MathHelper.Sqrt(System.Double)
  - OpenTK.Mathematics.MathHelper.Swap``1(``0@,``0@)
  - OpenTK.Mathematics.MathHelper.Tan(System.Double)
  - OpenTK.Mathematics.MathHelper.Tanh(System.Double)
  - OpenTK.Mathematics.MathHelper.ThreePiOver2
  - OpenTK.Mathematics.MathHelper.Truncate(System.Decimal)
  - OpenTK.Mathematics.MathHelper.Truncate(System.Double)
  - OpenTK.Mathematics.MathHelper.TwoPi
  langs:
  - csharp
  - vb
  name: MathHelper
  nameWithType: MathHelper
  fullName: OpenTK.Mathematics.MathHelper
  type: Class
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MathHelper
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 18
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Contains common mathematical functions and constants.
  example: []
  syntax:
    content: public static class MathHelper
    content.vb: Public Module MathHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: OpenTK.Mathematics.MathHelper.Pi
  commentId: F:OpenTK.Mathematics.MathHelper.Pi
  id: Pi
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Pi
  nameWithType: MathHelper.Pi
  fullName: OpenTK.Mathematics.MathHelper.Pi
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Pi
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 23
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of Pi as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float Pi = 3.1415927
    return:
      type: System.Single
    content.vb: Public Const Pi As Single = 3.1415927
- uid: OpenTK.Mathematics.MathHelper.PiOver2
  commentId: F:OpenTK.Mathematics.MathHelper.PiOver2
  id: PiOver2
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: PiOver2
  nameWithType: MathHelper.PiOver2
  fullName: OpenTK.Mathematics.MathHelper.PiOver2
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: PiOver2
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 28
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of Pi divided by two as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float PiOver2 = 1.5707964
    return:
      type: System.Single
    content.vb: Public Const PiOver2 As Single = 1.5707964
- uid: OpenTK.Mathematics.MathHelper.PiOver3
  commentId: F:OpenTK.Mathematics.MathHelper.PiOver3
  id: PiOver3
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: PiOver3
  nameWithType: MathHelper.PiOver3
  fullName: OpenTK.Mathematics.MathHelper.PiOver3
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: PiOver3
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 33
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of Pi divided by three as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float PiOver3 = 1.0471976
    return:
      type: System.Single
    content.vb: Public Const PiOver3 As Single = 1.0471976
- uid: OpenTK.Mathematics.MathHelper.PiOver4
  commentId: F:OpenTK.Mathematics.MathHelper.PiOver4
  id: PiOver4
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: PiOver4
  nameWithType: MathHelper.PiOver4
  fullName: OpenTK.Mathematics.MathHelper.PiOver4
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: PiOver4
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 38
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of  Pi divided by four as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float PiOver4 = 0.7853982
    return:
      type: System.Single
    content.vb: Public Const PiOver4 As Single = 0.7853982
- uid: OpenTK.Mathematics.MathHelper.PiOver6
  commentId: F:OpenTK.Mathematics.MathHelper.PiOver6
  id: PiOver6
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: PiOver6
  nameWithType: MathHelper.PiOver6
  fullName: OpenTK.Mathematics.MathHelper.PiOver6
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: PiOver6
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 43
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of Pi divided by six as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float PiOver6 = 0.5235988
    return:
      type: System.Single
    content.vb: Public Const PiOver6 As Single = 0.5235988
- uid: OpenTK.Mathematics.MathHelper.TwoPi
  commentId: F:OpenTK.Mathematics.MathHelper.TwoPi
  id: TwoPi
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: TwoPi
  nameWithType: MathHelper.TwoPi
  fullName: OpenTK.Mathematics.MathHelper.TwoPi
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: TwoPi
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 48
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of Pi multiplied by two as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float TwoPi = 6.2831855
    return:
      type: System.Single
    content.vb: Public Const TwoPi As Single = 6.2831855
- uid: OpenTK.Mathematics.MathHelper.ThreePiOver2
  commentId: F:OpenTK.Mathematics.MathHelper.ThreePiOver2
  id: ThreePiOver2
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ThreePiOver2
  nameWithType: MathHelper.ThreePiOver2
  fullName: OpenTK.Mathematics.MathHelper.ThreePiOver2
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ThreePiOver2
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 53
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of Pi multiplied by 3 and divided by two as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float ThreePiOver2 = 4.712389
    return:
      type: System.Single
    content.vb: Public Const ThreePiOver2 As Single = 4.712389
- uid: OpenTK.Mathematics.MathHelper.E
  commentId: F:OpenTK.Mathematics.MathHelper.E
  id: E
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: E
  nameWithType: MathHelper.E
  fullName: OpenTK.Mathematics.MathHelper.E
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: E
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 58
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the value of E as a <xref href="System.Single" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public const float E = 2.7182817
    return:
      type: System.Single
    content.vb: Public Const E As Single = 2.7182817
- uid: OpenTK.Mathematics.MathHelper.Log10E
  commentId: F:OpenTK.Mathematics.MathHelper.Log10E
  id: Log10E
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Log10E
  nameWithType: MathHelper.Log10E
  fullName: OpenTK.Mathematics.MathHelper.Log10E
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Log10E
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 63
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the base-10 logarithm of E.
  example: []
  syntax:
    content: public const float Log10E = 0.4342945
    return:
      type: System.Single
    content.vb: Public Const Log10E As Single = 0.4342945
- uid: OpenTK.Mathematics.MathHelper.Log2E
  commentId: F:OpenTK.Mathematics.MathHelper.Log2E
  id: Log2E
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Log2E
  nameWithType: MathHelper.Log2E
  fullName: OpenTK.Mathematics.MathHelper.Log2E
  type: Field
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Log2E
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 68
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Defines the base-2 logarithm of E.
  example: []
  syntax:
    content: public const float Log2E = 1.442695
    return:
      type: System.Single
    content.vb: Public Const Log2E As Single = 1.442695
- uid: OpenTK.Mathematics.MathHelper.Abs(System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Abs(System.Decimal)
  id: Abs(System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Abs(decimal)
  nameWithType: MathHelper.Abs(decimal)
  fullName: OpenTK.Mathematics.MathHelper.Abs(decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 75
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the absolute value of a decimal number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Abs(decimal n)
    parameters:
    - id: n
      type: System.Decimal
      description: A number that is greater than or equal to MinValue, but less than or equal to MaxValue.
    return:
      type: System.Decimal
      description: A decimal number, x, such that 0 ≤ x ≤ MaxValue.
    content.vb: >-
      <Pure>

      Public Shared Function Abs(n As Decimal) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Abs*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Abs(Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Abs(Decimal)
  name.vb: Abs(Decimal)
- uid: OpenTK.Mathematics.MathHelper.Abs(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Abs(System.Double)
  id: Abs(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Abs(double)
  nameWithType: MathHelper.Abs(double)
  fullName: OpenTK.Mathematics.MathHelper.Abs(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 83
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the absolute value of a double number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Abs(double n)
    parameters:
    - id: n
      type: System.Double
      description: A number that is greater than or equal to MinValue, but less than or equal to MaxValue.
    return:
      type: System.Double
      description: A double number, x, such that 0 ≤ x ≤ MaxValue.
    content.vb: >-
      <Pure>

      Public Shared Function Abs(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Abs*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Abs(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Abs(Double)
  name.vb: Abs(Double)
- uid: OpenTK.Mathematics.MathHelper.Abs(System.Int16)
  commentId: M:OpenTK.Mathematics.MathHelper.Abs(System.Int16)
  id: Abs(System.Int16)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Abs(short)
  nameWithType: MathHelper.Abs(short)
  fullName: OpenTK.Mathematics.MathHelper.Abs(short)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 91
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the absolute value of a short number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static short Abs(short n)
    parameters:
    - id: n
      type: System.Int16
      description: A number that is greater than or equal to MinValue, but less than or equal to MaxValue.
    return:
      type: System.Int16
      description: A short number, x, such that 0 ≤ x ≤ MaxValue.
    content.vb: >-
      <Pure>

      Public Shared Function Abs(n As Short) As Short
  overload: OpenTK.Mathematics.MathHelper.Abs*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Abs(Short)
  fullName.vb: OpenTK.Mathematics.MathHelper.Abs(Short)
  name.vb: Abs(Short)
- uid: OpenTK.Mathematics.MathHelper.Abs(System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Abs(System.Int32)
  id: Abs(System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Abs(int)
  nameWithType: MathHelper.Abs(int)
  fullName: OpenTK.Mathematics.MathHelper.Abs(int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 99
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the absolute value of a int number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Abs(int n)
    parameters:
    - id: n
      type: System.Int32
      description: A number that is greater than or equal to MinValue, but less than or equal to MaxValue.
    return:
      type: System.Int32
      description: A int number, x, such that 0 ≤ x ≤ MaxValue.
    content.vb: >-
      <Pure>

      Public Shared Function Abs(n As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.Abs*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Abs(Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Abs(Integer)
  name.vb: Abs(Integer)
- uid: OpenTK.Mathematics.MathHelper.Abs(System.Int64)
  commentId: M:OpenTK.Mathematics.MathHelper.Abs(System.Int64)
  id: Abs(System.Int64)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Abs(long)
  nameWithType: MathHelper.Abs(long)
  fullName: OpenTK.Mathematics.MathHelper.Abs(long)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 107
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the absolute value of a long number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long Abs(long n)
    parameters:
    - id: n
      type: System.Int64
      description: A number that is greater than or equal to MinValue, but less than or equal to MaxValue.
    return:
      type: System.Int64
      description: A long number, x, such that 0 ≤ x ≤ MaxValue.
    content.vb: >-
      <Pure>

      Public Shared Function Abs(n As Long) As Long
  overload: OpenTK.Mathematics.MathHelper.Abs*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Abs(Long)
  fullName.vb: OpenTK.Mathematics.MathHelper.Abs(Long)
  name.vb: Abs(Long)
- uid: OpenTK.Mathematics.MathHelper.Abs(System.SByte)
  commentId: M:OpenTK.Mathematics.MathHelper.Abs(System.SByte)
  id: Abs(System.SByte)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Abs(sbyte)
  nameWithType: MathHelper.Abs(sbyte)
  fullName: OpenTK.Mathematics.MathHelper.Abs(sbyte)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 115
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the absolute value of a sbyte number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static sbyte Abs(sbyte n)
    parameters:
    - id: n
      type: System.SByte
      description: A number that is greater than or equal to MinValue, but less than or equal to MaxValue.
    return:
      type: System.SByte
      description: A sbyte number, x, such that 0 ≤ x ≤ MaxValue.
    content.vb: >-
      <Pure>

      Public Shared Function Abs(n As SByte) As SByte
  overload: OpenTK.Mathematics.MathHelper.Abs*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Abs(SByte)
  fullName.vb: OpenTK.Mathematics.MathHelper.Abs(SByte)
  name.vb: Abs(SByte)
- uid: OpenTK.Mathematics.MathHelper.Abs(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.Abs(System.Single)
  id: Abs(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Abs(float)
  nameWithType: MathHelper.Abs(float)
  fullName: OpenTK.Mathematics.MathHelper.Abs(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Abs
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 123
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the absolute value of a float number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float Abs(float n)
    parameters:
    - id: n
      type: System.Single
      description: A number that is greater than or equal to MinValue, but less than or equal to MaxValue.
    return:
      type: System.Single
      description: A float number, x, such that 0 ≤ x ≤ MaxValue.
    content.vb: >-
      <Pure>

      Public Shared Function Abs(n As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.Abs*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Abs(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.Abs(Single)
  name.vb: Abs(Single)
- uid: OpenTK.Mathematics.MathHelper.Sin(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Sin(System.Double)
  id: Sin(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sin(double)
  nameWithType: MathHelper.Sin(double)
  fullName: OpenTK.Mathematics.MathHelper.Sin(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sin
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 131
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the sine of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Sin(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Sine of the angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Sin(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Sin*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sin(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sin(Double)
  name.vb: Sin(Double)
- uid: OpenTK.Mathematics.MathHelper.Sinh(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Sinh(System.Double)
  id: Sinh(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sinh(double)
  nameWithType: MathHelper.Sinh(double)
  fullName: OpenTK.Mathematics.MathHelper.Sinh(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sinh
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 139
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the hyperbolic sine of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Sinh(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Hyperbolic sine of the specified angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Sinh(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Sinh*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sinh(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sinh(Double)
  name.vb: Sinh(Double)
- uid: OpenTK.Mathematics.MathHelper.Asin(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Asin(System.Double)
  id: Asin(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Asin(double)
  nameWithType: MathHelper.Asin(double)
  fullName: OpenTK.Mathematics.MathHelper.Asin(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Asin
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 147
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the arc sine of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Asin(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Arc sine of the specified angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Asin(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Asin*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Asin(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Asin(Double)
  name.vb: Asin(Double)
- uid: OpenTK.Mathematics.MathHelper.Cos(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Cos(System.Double)
  id: Cos(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Cos(double)
  nameWithType: MathHelper.Cos(double)
  fullName: OpenTK.Mathematics.MathHelper.Cos(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Cos
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 155
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the cosine of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Cos(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Cosine of the angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Cos(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Cos*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Cos(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Cos(Double)
  name.vb: Cos(Double)
- uid: OpenTK.Mathematics.MathHelper.Cosh(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Cosh(System.Double)
  id: Cosh(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Cosh(double)
  nameWithType: MathHelper.Cosh(double)
  fullName: OpenTK.Mathematics.MathHelper.Cosh(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Cosh
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 163
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the hyperbolic cosine of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Cosh(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Hyperbolic cosine of the specified angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Cosh(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Cosh*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Cosh(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Cosh(Double)
  name.vb: Cosh(Double)
- uid: OpenTK.Mathematics.MathHelper.Acos(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Acos(System.Double)
  id: Acos(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Acos(double)
  nameWithType: MathHelper.Acos(double)
  fullName: OpenTK.Mathematics.MathHelper.Acos(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Acos
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 171
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the arc sine of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Acos(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Arc sine of the specified angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Acos(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Acos*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Acos(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Acos(Double)
  name.vb: Acos(Double)
- uid: OpenTK.Mathematics.MathHelper.Tan(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Tan(System.Double)
  id: Tan(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Tan(double)
  nameWithType: MathHelper.Tan(double)
  fullName: OpenTK.Mathematics.MathHelper.Tan(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Tan
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 179
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the tangent of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Tan(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Tangent of the specified angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Tan(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Tan*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Tan(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Tan(Double)
  name.vb: Tan(Double)
- uid: OpenTK.Mathematics.MathHelper.Tanh(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Tanh(System.Double)
  id: Tanh(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Tanh(double)
  nameWithType: MathHelper.Tanh(double)
  fullName: OpenTK.Mathematics.MathHelper.Tanh(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Tanh
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 187
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the hyperbolic tangent of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Tanh(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Hyperbolic tangent of the specified angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Tanh(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Tanh*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Tanh(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Tanh(Double)
  name.vb: Tanh(Double)
- uid: OpenTK.Mathematics.MathHelper.Atan(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Atan(System.Double)
  id: Atan(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Atan(double)
  nameWithType: MathHelper.Atan(double)
  fullName: OpenTK.Mathematics.MathHelper.Atan(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Atan
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 195
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the arc tangent of the specified angle.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Atan(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The specified angle.
    return:
      type: System.Double
      description: Arc tangent of the specified angle. If radians is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.
    content.vb: >-
      <Pure>

      Public Shared Function Atan(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Atan*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Atan(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Atan(Double)
  name.vb: Atan(Double)
- uid: OpenTK.Mathematics.MathHelper.Atan2(System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Atan2(System.Double,System.Double)
  id: Atan2(System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Atan2(double, double)
  nameWithType: MathHelper.Atan2(double, double)
  fullName: OpenTK.Mathematics.MathHelper.Atan2(double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Atan2
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 204
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the angle whose tangent is the quotient of two specified numbers.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Atan2(double y, double x)
    parameters:
    - id: y
      type: System.Double
      description: The y coordinate of a point.
    - id: x
      type: System.Double
      description: The x coordinate of a point.
    return:
      type: System.Double
      description: An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane.
    content.vb: >-
      <Pure>

      Public Shared Function Atan2(y As Double, x As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Atan2*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Atan2(Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Atan2(Double, Double)
  name.vb: Atan2(Double, Double)
- uid: OpenTK.Mathematics.MathHelper.BigMul(System.Int32,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.BigMul(System.Int32,System.Int32)
  id: BigMul(System.Int32,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: BigMul(int, int)
  nameWithType: MathHelper.BigMul(int, int)
  fullName: OpenTK.Mathematics.MathHelper.BigMul(int, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: BigMul
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 213
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Produces the full product of two 32-bit numbers.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long BigMul(int a, int b)
    parameters:
    - id: a
      type: System.Int32
      description: The first number to multiply.
    - id: b
      type: System.Int32
      description: The second number to multiply.
    return:
      type: System.Int64
      description: The number containing the product of the specified numbers.
    content.vb: >-
      <Pure>

      Public Shared Function BigMul(a As Integer, b As Integer) As Long
  overload: OpenTK.Mathematics.MathHelper.BigMul*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.BigMul(Integer, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.BigMul(Integer, Integer)
  name.vb: BigMul(Integer, Integer)
- uid: OpenTK.Mathematics.MathHelper.Sqrt(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Sqrt(System.Double)
  id: Sqrt(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sqrt(double)
  nameWithType: MathHelper.Sqrt(double)
  fullName: OpenTK.Mathematics.MathHelper.Sqrt(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sqrt
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 221
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the square root of a specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Sqrt(double n)
    parameters:
    - id: n
      type: System.Double
      description: The number whose square root is to be found.
    return:
      type: System.Double
      description: The positive square root of n.
    content.vb: >-
      <Pure>

      Public Shared Function Sqrt(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Sqrt*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sqrt(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sqrt(Double)
  name.vb: Sqrt(Double)
- uid: OpenTK.Mathematics.MathHelper.Pow(System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Pow(System.Double,System.Double)
  id: Pow(System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Pow(double, double)
  nameWithType: MathHelper.Pow(double, double)
  fullName: OpenTK.Mathematics.MathHelper.Pow(double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Pow
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 230
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns a specified number raised to the specified power.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Pow(double x, double y)
    parameters:
    - id: x
      type: System.Double
      description: A double-precision floating-point number to be raised to a power.
    - id: y
      type: System.Double
      description: A double-precision floating-point number that specifies a power.
    return:
      type: System.Double
      description: The number x raised to the power y.
    content.vb: >-
      <Pure>

      Public Shared Function Pow(x As Double, y As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Pow*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Pow(Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Pow(Double, Double)
  name.vb: Pow(Double, Double)
- uid: OpenTK.Mathematics.MathHelper.Ceiling(System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Ceiling(System.Decimal)
  id: Ceiling(System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Ceiling(decimal)
  nameWithType: MathHelper.Ceiling(decimal)
  fullName: OpenTK.Mathematics.MathHelper.Ceiling(decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Ceiling
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 238
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smallest integral value greater than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Ceiling(decimal n)
    parameters:
    - id: n
      type: System.Decimal
      description: A decimal number.
    return:
      type: System.Decimal
      description: The smallest integral value that is greater than or equal to n. Note that this method returns a Decimal instead of an integral type.
    content.vb: >-
      <Pure>

      Public Shared Function Ceiling(n As Decimal) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Ceiling*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Ceiling(Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Ceiling(Decimal)
  name.vb: Ceiling(Decimal)
- uid: OpenTK.Mathematics.MathHelper.Ceiling(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Ceiling(System.Double)
  id: Ceiling(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Ceiling(double)
  nameWithType: MathHelper.Ceiling(double)
  fullName: OpenTK.Mathematics.MathHelper.Ceiling(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Ceiling
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 247
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smallest integral value greater than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Ceiling(double n)
    parameters:
    - id: n
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Double
      description: >-
        The smallest integral value that is greater than or equal to n. If n is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned.
            Note that this method returns a Double instead of an integral type.
    content.vb: >-
      <Pure>

      Public Shared Function Ceiling(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Ceiling*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Ceiling(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Ceiling(Double)
  name.vb: Ceiling(Double)
- uid: OpenTK.Mathematics.MathHelper.Floor(System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Floor(System.Decimal)
  id: Floor(System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Floor(decimal)
  nameWithType: MathHelper.Floor(decimal)
  fullName: OpenTK.Mathematics.MathHelper.Floor(decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Floor
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 255
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the largest integral value less than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Floor(decimal n)
    parameters:
    - id: n
      type: System.Decimal
      description: A decimal number.
    return:
      type: System.Decimal
      description: Returns the largest integral value less than or equal to the specified decimal number.
    content.vb: >-
      <Pure>

      Public Shared Function Floor(n As Decimal) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Floor*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Floor(Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Floor(Decimal)
  name.vb: Floor(Decimal)
- uid: OpenTK.Mathematics.MathHelper.Floor(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Floor(System.Double)
  id: Floor(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Floor(double)
  nameWithType: MathHelper.Floor(double)
  fullName: OpenTK.Mathematics.MathHelper.Floor(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Floor
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 263
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the largest integral value less than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Floor(double n)
    parameters:
    - id: n
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Double
      description: Returns the largest integral value less than or equal to the specified double-precision floating-point number.
    content.vb: >-
      <Pure>

      Public Shared Function Floor(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Floor*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Floor(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Floor(Double)
  name.vb: Floor(Double)
- uid: OpenTK.Mathematics.MathHelper.DivRem(System.Int32,System.Int32,System.Int32@)
  commentId: M:OpenTK.Mathematics.MathHelper.DivRem(System.Int32,System.Int32,System.Int32@)
  id: DivRem(System.Int32,System.Int32,System.Int32@)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: DivRem(int, int, out int)
  nameWithType: MathHelper.DivRem(int, int, out int)
  fullName: OpenTK.Mathematics.MathHelper.DivRem(int, int, out int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: DivRem
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 274
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculates the quotient of two integers and also returns the remainder in an output parameter.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int DivRem(int a, int b, out int result)
    parameters:
    - id: a
      type: System.Int32
      description: The dividend.
    - id: b
      type: System.Int32
      description: The divisor.
    - id: result
      type: System.Int32
      description: The remainder.
    return:
      type: System.Int32
      description: The quotient of the specified numbers.
    content.vb: >-
      <Pure>

      Public Shared Function DivRem(a As Integer, b As Integer, result As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.DivRem*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: b is zero.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.DivRem(Integer, Integer, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.DivRem(Integer, Integer, Integer)
  name.vb: DivRem(Integer, Integer, Integer)
- uid: OpenTK.Mathematics.MathHelper.DivRem(System.Int64,System.Int64,System.Int64@)
  commentId: M:OpenTK.Mathematics.MathHelper.DivRem(System.Int64,System.Int64,System.Int64@)
  id: DivRem(System.Int64,System.Int64,System.Int64@)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: DivRem(long, long, out long)
  nameWithType: MathHelper.DivRem(long, long, out long)
  fullName: OpenTK.Mathematics.MathHelper.DivRem(long, long, out long)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: DivRem
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 285
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculates the quotient of two longs and also returns the remainder in an output parameter.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long DivRem(long a, long b, out long result)
    parameters:
    - id: a
      type: System.Int64
      description: The dividend.
    - id: b
      type: System.Int64
      description: The divisor.
    - id: result
      type: System.Int64
      description: The remainder.
    return:
      type: System.Int64
      description: The quotient of the specified numbers.
    content.vb: >-
      <Pure>

      Public Shared Function DivRem(a As Long, b As Long, result As Long) As Long
  overload: OpenTK.Mathematics.MathHelper.DivRem*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: b is zero.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.DivRem(Long, Long, Long)
  fullName.vb: OpenTK.Mathematics.MathHelper.DivRem(Long, Long, Long)
  name.vb: DivRem(Long, Long, Long)
- uid: OpenTK.Mathematics.MathHelper.Log(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Log(System.Double)
  id: Log(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Log(double)
  nameWithType: MathHelper.Log(double)
  fullName: OpenTK.Mathematics.MathHelper.Log(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Log
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 293
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the natural (base e) logarithm of a specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Log(double n)
    parameters:
    - id: n
      type: System.Double
      description: A number whose logarithm is to be found.
    return:
      type: System.Double
      description: The natural logarithm of n.
    content.vb: >-
      <Pure>

      Public Shared Function Log(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Log*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Log(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Log(Double)
  name.vb: Log(Double)
- uid: OpenTK.Mathematics.MathHelper.Log(System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Log(System.Double,System.Double)
  id: Log(System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Log(double, double)
  nameWithType: MathHelper.Log(double, double)
  fullName: OpenTK.Mathematics.MathHelper.Log(double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Log
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 302
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the logarithm of a specified number in a specified base.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Log(double n, double newBase)
    parameters:
    - id: n
      type: System.Double
      description: The specified number.
    - id: newBase
      type: System.Double
      description: The specified base.
    return:
      type: System.Double
      description: The base newBase logarithm of n.
    content.vb: >-
      <Pure>

      Public Shared Function Log(n As Double, newBase As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Log*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Log(Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Log(Double, Double)
  name.vb: Log(Double, Double)
- uid: OpenTK.Mathematics.MathHelper.Log10(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Log10(System.Double)
  id: Log10(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Log10(double)
  nameWithType: MathHelper.Log10(double)
  fullName: OpenTK.Mathematics.MathHelper.Log10(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Log10
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 310
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the base 10 logarithm of a specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Log10(double n)
    parameters:
    - id: n
      type: System.Double
      description: The specified number.
    return:
      type: System.Double
      description: The base 10 log of n.
    content.vb: >-
      <Pure>

      Public Shared Function Log10(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Log10*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Log10(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Log10(Double)
  name.vb: Log10(Double)
- uid: OpenTK.Mathematics.MathHelper.Log2(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Log2(System.Double)
  id: Log2(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Log2(double)
  nameWithType: MathHelper.Log2(double)
  fullName: OpenTK.Mathematics.MathHelper.Log2(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Log2
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 319
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the base 2 logarithm of a specified number.
  remarks: This one will be implemented by System.Math from .netcore 3.0 and onwards.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Log2(double n)
    parameters:
    - id: n
      type: System.Double
      description: The specified number.
    return:
      type: System.Double
      description: The base 2 log of n.
    content.vb: >-
      <Pure>

      Public Shared Function Log2(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Log2*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Log2(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Log2(Double)
  name.vb: Log2(Double)
- uid: OpenTK.Mathematics.MathHelper.Exp(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Exp(System.Double)
  id: Exp(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Exp(double)
  nameWithType: MathHelper.Exp(double)
  fullName: OpenTK.Mathematics.MathHelper.Exp(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Exp
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 327
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns e raised to the specified power.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Exp(double n)
    parameters:
    - id: n
      type: System.Double
      description: The specified power.
    return:
      type: System.Double
      description: The number e raised to the power n. If n equals NaN or PositiveInfinity, that value is returned. If n equals NegativeInfinity, 0 is returned.
    content.vb: >-
      <Pure>

      Public Shared Function Exp(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Exp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Exp(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Exp(Double)
  name.vb: Exp(Double)
- uid: OpenTK.Mathematics.MathHelper.IEEERemainder(System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.IEEERemainder(System.Double,System.Double)
  id: IEEERemainder(System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: IEEERemainder(double, double)
  nameWithType: MathHelper.IEEERemainder(double, double)
  fullName: OpenTK.Mathematics.MathHelper.IEEERemainder(double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: IEEERemainder
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 338
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the remainder resulting from the division of a specified number by another specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double IEEERemainder(double a, double b)
    parameters:
    - id: a
      type: System.Double
      description: A dividend.
    - id: b
      type: System.Double
      description: A divisor.
    return:
      type: System.Double
      description: >-
        A number equal to a - (b Q), where Q is the quotient of a / b rounded to the nearest integer (if a / b falls halfway between two integers, the even integer is returned).
            If a - (b Q) is zero, the value +0 is returned if a is positive, or -0 if a is negative.
            If b = 0, NaN is returned.
    content.vb: >-
      <Pure>

      Public Shared Function IEEERemainder(a As Double, b As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.IEEERemainder*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.IEEERemainder(Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.IEEERemainder(Double, Double)
  name.vb: IEEERemainder(Double, Double)
- uid: OpenTK.Mathematics.MathHelper.Max(System.Byte,System.Byte)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.Byte,System.Byte)
  id: Max(System.Byte,System.Byte)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(byte, byte)
  nameWithType: MathHelper.Max(byte, byte)
  fullName: OpenTK.Mathematics.MathHelper.Max(byte, byte)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 347
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two bytes.
  example: []
  syntax:
    content: >-
      [Pure]

      public static byte Max(byte a, byte b)
    parameters:
    - id: a
      type: System.Byte
      description: The first of two bytes to compare.
    - id: b
      type: System.Byte
      description: The second of two bytes to compare.
    return:
      type: System.Byte
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As Byte, b As Byte) As Byte
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(Byte, Byte)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(Byte, Byte)
  name.vb: Max(Byte, Byte)
- uid: OpenTK.Mathematics.MathHelper.Max(System.SByte,System.SByte)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.SByte,System.SByte)
  id: Max(System.SByte,System.SByte)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(sbyte, sbyte)
  nameWithType: MathHelper.Max(sbyte, sbyte)
  fullName: OpenTK.Mathematics.MathHelper.Max(sbyte, sbyte)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 356
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two sbytes.
  example: []
  syntax:
    content: >-
      [Pure]

      public static sbyte Max(sbyte a, sbyte b)
    parameters:
    - id: a
      type: System.SByte
      description: The first of two sbytes to compare.
    - id: b
      type: System.SByte
      description: The second of two sbytes to compare.
    return:
      type: System.SByte
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As SByte, b As SByte) As SByte
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(SByte, SByte)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(SByte, SByte)
  name.vb: Max(SByte, SByte)
- uid: OpenTK.Mathematics.MathHelper.Max(System.Int16,System.Int16)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.Int16,System.Int16)
  id: Max(System.Int16,System.Int16)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(short, short)
  nameWithType: MathHelper.Max(short, short)
  fullName: OpenTK.Mathematics.MathHelper.Max(short, short)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 365
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two shorts.
  example: []
  syntax:
    content: >-
      [Pure]

      public static short Max(short a, short b)
    parameters:
    - id: a
      type: System.Int16
      description: The first of two shorts to compare.
    - id: b
      type: System.Int16
      description: The second of two shorts to compare.
    return:
      type: System.Int16
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As Short, b As Short) As Short
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(Short, Short)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(Short, Short)
  name.vb: Max(Short, Short)
- uid: OpenTK.Mathematics.MathHelper.Max(System.UInt16,System.UInt16)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.UInt16,System.UInt16)
  id: Max(System.UInt16,System.UInt16)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(ushort, ushort)
  nameWithType: MathHelper.Max(ushort, ushort)
  fullName: OpenTK.Mathematics.MathHelper.Max(ushort, ushort)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 374
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two ushorts.
  example: []
  syntax:
    content: >-
      [Pure]

      public static ushort Max(ushort a, ushort b)
    parameters:
    - id: a
      type: System.UInt16
      description: The first of two ushorts to compare.
    - id: b
      type: System.UInt16
      description: The second of two ushorts to compare.
    return:
      type: System.UInt16
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As UShort, b As UShort) As UShort
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(UShort, UShort)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(UShort, UShort)
  name.vb: Max(UShort, UShort)
- uid: OpenTK.Mathematics.MathHelper.Max(System.Decimal,System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.Decimal,System.Decimal)
  id: Max(System.Decimal,System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(decimal, decimal)
  nameWithType: MathHelper.Max(decimal, decimal)
  fullName: OpenTK.Mathematics.MathHelper.Max(decimal, decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 383
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two decimals.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Max(decimal a, decimal b)
    parameters:
    - id: a
      type: System.Decimal
      description: The first of two decimals to compare.
    - id: b
      type: System.Decimal
      description: The second of two decimals to compare.
    return:
      type: System.Decimal
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As Decimal, b As Decimal) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(Decimal, Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(Decimal, Decimal)
  name.vb: Max(Decimal, Decimal)
- uid: OpenTK.Mathematics.MathHelper.Max(System.Int32,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.Int32,System.Int32)
  id: Max(System.Int32,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(int, int)
  nameWithType: MathHelper.Max(int, int)
  fullName: OpenTK.Mathematics.MathHelper.Max(int, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 392
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two ints.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Max(int a, int b)
    parameters:
    - id: a
      type: System.Int32
      description: The first of two ints to compare.
    - id: b
      type: System.Int32
      description: The second of two ints to compare.
    return:
      type: System.Int32
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As Integer, b As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(Integer, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(Integer, Integer)
  name.vb: Max(Integer, Integer)
- uid: OpenTK.Mathematics.MathHelper.Max(System.UInt32,System.UInt32)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.UInt32,System.UInt32)
  id: Max(System.UInt32,System.UInt32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(uint, uint)
  nameWithType: MathHelper.Max(uint, uint)
  fullName: OpenTK.Mathematics.MathHelper.Max(uint, uint)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 401
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two uints.
  example: []
  syntax:
    content: >-
      [Pure]

      public static uint Max(uint a, uint b)
    parameters:
    - id: a
      type: System.UInt32
      description: The first of two uints to compare.
    - id: b
      type: System.UInt32
      description: The second of two uints to compare.
    return:
      type: System.UInt32
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As UInteger, b As UInteger) As UInteger
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(UInteger, UInteger)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(UInteger, UInteger)
  name.vb: Max(UInteger, UInteger)
- uid: OpenTK.Mathematics.MathHelper.Max(System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.Single,System.Single)
  id: Max(System.Single,System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(float, float)
  nameWithType: MathHelper.Max(float, float)
  fullName: OpenTK.Mathematics.MathHelper.Max(float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 410
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two floats.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float Max(float a, float b)
    parameters:
    - id: a
      type: System.Single
      description: The first of two floats to compare.
    - id: b
      type: System.Single
      description: The second of two floats to compare.
    return:
      type: System.Single
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As Single, b As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(Single, Single)
  name.vb: Max(Single, Single)
- uid: OpenTK.Mathematics.MathHelper.Max(System.Int64,System.Int64)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.Int64,System.Int64)
  id: Max(System.Int64,System.Int64)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(long, long)
  nameWithType: MathHelper.Max(long, long)
  fullName: OpenTK.Mathematics.MathHelper.Max(long, long)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 419
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two longs.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long Max(long a, long b)
    parameters:
    - id: a
      type: System.Int64
      description: The first of two longs to compare.
    - id: b
      type: System.Int64
      description: The second of two longs to compare.
    return:
      type: System.Int64
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As Long, b As Long) As Long
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(Long, Long)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(Long, Long)
  name.vb: Max(Long, Long)
- uid: OpenTK.Mathematics.MathHelper.Max(System.UInt64,System.UInt64)
  commentId: M:OpenTK.Mathematics.MathHelper.Max(System.UInt64,System.UInt64)
  id: Max(System.UInt64,System.UInt64)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Max(ulong, ulong)
  nameWithType: MathHelper.Max(ulong, ulong)
  fullName: OpenTK.Mathematics.MathHelper.Max(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Max
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 428
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the larger of two ulongs.
  example: []
  syntax:
    content: >-
      [Pure]

      public static ulong Max(ulong a, ulong b)
    parameters:
    - id: a
      type: System.UInt64
      description: The first of two ulongs to compare.
    - id: b
      type: System.UInt64
      description: The second of two ulongs to compare.
    return:
      type: System.UInt64
      description: Parameter a or b, whichever is larger.
    content.vb: >-
      <Pure>

      Public Shared Function Max(a As ULong, b As ULong) As ULong
  overload: OpenTK.Mathematics.MathHelper.Max*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Max(ULong, ULong)
  fullName.vb: OpenTK.Mathematics.MathHelper.Max(ULong, ULong)
  name.vb: Max(ULong, ULong)
- uid: OpenTK.Mathematics.MathHelper.Min(System.Byte,System.Byte)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.Byte,System.Byte)
  id: Min(System.Byte,System.Byte)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(byte, byte)
  nameWithType: MathHelper.Min(byte, byte)
  fullName: OpenTK.Mathematics.MathHelper.Min(byte, byte)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 437
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two bytes.
  example: []
  syntax:
    content: >-
      [Pure]

      public static byte Min(byte a, byte b)
    parameters:
    - id: a
      type: System.Byte
      description: The first of two bytes to compare.
    - id: b
      type: System.Byte
      description: The second of two bytes to compare.
    return:
      type: System.Byte
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As Byte, b As Byte) As Byte
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(Byte, Byte)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(Byte, Byte)
  name.vb: Min(Byte, Byte)
- uid: OpenTK.Mathematics.MathHelper.Min(System.SByte,System.SByte)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.SByte,System.SByte)
  id: Min(System.SByte,System.SByte)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(sbyte, sbyte)
  nameWithType: MathHelper.Min(sbyte, sbyte)
  fullName: OpenTK.Mathematics.MathHelper.Min(sbyte, sbyte)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 446
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two sbytes.
  example: []
  syntax:
    content: >-
      [Pure]

      public static sbyte Min(sbyte a, sbyte b)
    parameters:
    - id: a
      type: System.SByte
      description: The first of two sbytes to compare.
    - id: b
      type: System.SByte
      description: The second of two sbytes to compare.
    return:
      type: System.SByte
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As SByte, b As SByte) As SByte
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(SByte, SByte)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(SByte, SByte)
  name.vb: Min(SByte, SByte)
- uid: OpenTK.Mathematics.MathHelper.Min(System.Int16,System.Int16)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.Int16,System.Int16)
  id: Min(System.Int16,System.Int16)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(short, short)
  nameWithType: MathHelper.Min(short, short)
  fullName: OpenTK.Mathematics.MathHelper.Min(short, short)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 455
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two shorts.
  example: []
  syntax:
    content: >-
      [Pure]

      public static short Min(short a, short b)
    parameters:
    - id: a
      type: System.Int16
      description: The first of two shorts to compare.
    - id: b
      type: System.Int16
      description: The second of two shorts to compare.
    return:
      type: System.Int16
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As Short, b As Short) As Short
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(Short, Short)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(Short, Short)
  name.vb: Min(Short, Short)
- uid: OpenTK.Mathematics.MathHelper.Min(System.UInt16,System.UInt16)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.UInt16,System.UInt16)
  id: Min(System.UInt16,System.UInt16)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(ushort, ushort)
  nameWithType: MathHelper.Min(ushort, ushort)
  fullName: OpenTK.Mathematics.MathHelper.Min(ushort, ushort)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 464
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two ushorts.
  example: []
  syntax:
    content: >-
      [Pure]

      public static ushort Min(ushort a, ushort b)
    parameters:
    - id: a
      type: System.UInt16
      description: The first of two ushorts to compare.
    - id: b
      type: System.UInt16
      description: The second of two ushorts to compare.
    return:
      type: System.UInt16
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As UShort, b As UShort) As UShort
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(UShort, UShort)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(UShort, UShort)
  name.vb: Min(UShort, UShort)
- uid: OpenTK.Mathematics.MathHelper.Min(System.Decimal,System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.Decimal,System.Decimal)
  id: Min(System.Decimal,System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(decimal, decimal)
  nameWithType: MathHelper.Min(decimal, decimal)
  fullName: OpenTK.Mathematics.MathHelper.Min(decimal, decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 473
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two decimals.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Min(decimal a, decimal b)
    parameters:
    - id: a
      type: System.Decimal
      description: The first of two decimals to compare.
    - id: b
      type: System.Decimal
      description: The second of two decimals to compare.
    return:
      type: System.Decimal
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As Decimal, b As Decimal) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(Decimal, Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(Decimal, Decimal)
  name.vb: Min(Decimal, Decimal)
- uid: OpenTK.Mathematics.MathHelper.Min(System.Int32,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.Int32,System.Int32)
  id: Min(System.Int32,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(int, int)
  nameWithType: MathHelper.Min(int, int)
  fullName: OpenTK.Mathematics.MathHelper.Min(int, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 482
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two ints.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Min(int a, int b)
    parameters:
    - id: a
      type: System.Int32
      description: The first of two ints to compare.
    - id: b
      type: System.Int32
      description: The second of two ints to compare.
    return:
      type: System.Int32
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As Integer, b As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(Integer, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(Integer, Integer)
  name.vb: Min(Integer, Integer)
- uid: OpenTK.Mathematics.MathHelper.Min(System.UInt32,System.UInt32)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.UInt32,System.UInt32)
  id: Min(System.UInt32,System.UInt32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(uint, uint)
  nameWithType: MathHelper.Min(uint, uint)
  fullName: OpenTK.Mathematics.MathHelper.Min(uint, uint)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 491
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two uints.
  example: []
  syntax:
    content: >-
      [Pure]

      public static uint Min(uint a, uint b)
    parameters:
    - id: a
      type: System.UInt32
      description: The first of two uints to compare.
    - id: b
      type: System.UInt32
      description: The second of two uints to compare.
    return:
      type: System.UInt32
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As UInteger, b As UInteger) As UInteger
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(UInteger, UInteger)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(UInteger, UInteger)
  name.vb: Min(UInteger, UInteger)
- uid: OpenTK.Mathematics.MathHelper.Min(System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.Single,System.Single)
  id: Min(System.Single,System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(float, float)
  nameWithType: MathHelper.Min(float, float)
  fullName: OpenTK.Mathematics.MathHelper.Min(float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 500
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two floats.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float Min(float a, float b)
    parameters:
    - id: a
      type: System.Single
      description: The first of two floats to compare.
    - id: b
      type: System.Single
      description: The second of two floats to compare.
    return:
      type: System.Single
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As Single, b As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(Single, Single)
  name.vb: Min(Single, Single)
- uid: OpenTK.Mathematics.MathHelper.Min(System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.Double,System.Double)
  id: Min(System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(double, double)
  nameWithType: MathHelper.Min(double, double)
  fullName: OpenTK.Mathematics.MathHelper.Min(double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 509
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two floats.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Min(double a, double b)
    parameters:
    - id: a
      type: System.Double
      description: The first of two floats to compare.
    - id: b
      type: System.Double
      description: The second of two floats to compare.
    return:
      type: System.Double
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As Double, b As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(Double, Double)
  name.vb: Min(Double, Double)
- uid: OpenTK.Mathematics.MathHelper.Min(System.Int64,System.Int64)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.Int64,System.Int64)
  id: Min(System.Int64,System.Int64)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(long, long)
  nameWithType: MathHelper.Min(long, long)
  fullName: OpenTK.Mathematics.MathHelper.Min(long, long)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 518
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two longs.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long Min(long a, long b)
    parameters:
    - id: a
      type: System.Int64
      description: The first of two longs to compare.
    - id: b
      type: System.Int64
      description: The second of two longs to compare.
    return:
      type: System.Int64
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As Long, b As Long) As Long
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(Long, Long)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(Long, Long)
  name.vb: Min(Long, Long)
- uid: OpenTK.Mathematics.MathHelper.Min(System.UInt64,System.UInt64)
  commentId: M:OpenTK.Mathematics.MathHelper.Min(System.UInt64,System.UInt64)
  id: Min(System.UInt64,System.UInt64)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Min(ulong, ulong)
  nameWithType: MathHelper.Min(ulong, ulong)
  fullName: OpenTK.Mathematics.MathHelper.Min(ulong, ulong)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Min
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 527
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the smaller of two ulongs.
  example: []
  syntax:
    content: >-
      [Pure]

      public static ulong Min(ulong a, ulong b)
    parameters:
    - id: a
      type: System.UInt64
      description: The first of two ulongs to compare.
    - id: b
      type: System.UInt64
      description: The second of two ulongs to compare.
    return:
      type: System.UInt64
      description: Parameter a or b, whichever is smaller.
    content.vb: >-
      <Pure>

      Public Shared Function Min(a As ULong, b As ULong) As ULong
  overload: OpenTK.Mathematics.MathHelper.Min*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Min(ULong, ULong)
  fullName.vb: OpenTK.Mathematics.MathHelper.Min(ULong, ULong)
  name.vb: Min(ULong, ULong)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.Int32,System.MidpointRounding)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.Int32,System.MidpointRounding)
  id: Round(System.Decimal,System.Int32,System.MidpointRounding)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(decimal, int, MidpointRounding)
  nameWithType: MathHelper.Round(decimal, int, MidpointRounding)
  fullName: OpenTK.Mathematics.MathHelper.Round(decimal, int, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 540
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a decimal value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Round(decimal d, int digits, MidpointRounding mode)
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    - id: digits
      type: System.Int32
      description: The number of decimal places in the return value.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round d if it is midway between two other numbers.
    return:
      type: System.Decimal
      description: The number nearest to d that contains a number of fractional digits equal to digits. If d has fewer fractional digits than digits, d is returned unchanged.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Decimal, digits As Integer, mode As MidpointRounding) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Round*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: digits is less than 0 or greater than 28.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: mode is not a valid value of MidpointRounding.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a Decimal.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Decimal, Integer, MidpointRounding)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Decimal, Integer, System.MidpointRounding)
  name.vb: Round(Decimal, Integer, MidpointRounding)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Double,System.Int32,System.MidpointRounding)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Double,System.Int32,System.MidpointRounding)
  id: Round(System.Double,System.Int32,System.MidpointRounding)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(double, int, MidpointRounding)
  nameWithType: MathHelper.Round(double, int, MidpointRounding)
  fullName: OpenTK.Mathematics.MathHelper.Round(double, int, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 552
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a double-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Round(double d, int digits, MidpointRounding mode)
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    - id: digits
      type: System.Int32
      description: The number of fractional digits in the return value.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round d if it is midway between two other numbers.
    return:
      type: System.Double
      description: The number nearest to d that has a number of fractional digits equal to digits. If d has fewer fractional digits than digits, d is returned unchanged.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Double, digits As Integer, mode As MidpointRounding) As Double
  overload: OpenTK.Mathematics.MathHelper.Round*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: digits is less than 0 or greater than 15.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: mode is not a valid value of MidpointRounding.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Double, Integer, MidpointRounding)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Double, Integer, System.MidpointRounding)
  name.vb: Round(Double, Integer, MidpointRounding)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.MidpointRounding)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.MidpointRounding)
  id: Round(System.Decimal,System.MidpointRounding)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(decimal, MidpointRounding)
  nameWithType: MathHelper.Round(decimal, MidpointRounding)
  fullName: OpenTK.Mathematics.MathHelper.Round(decimal, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 564
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a decimal value to the nearest integer, and uses the specified rounding convention for midpoint values.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Round(decimal d, MidpointRounding mode)
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round d if it is midway between two other numbers.
    return:
      type: System.Decimal
      description: >-
        The integer nearest d. If d is halfway between two numbers, one of which is even and the other odd, then mode determines which of the two is returned.
            Note that this method returns a Decimal instead of an integral type.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Decimal, mode As MidpointRounding) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Round*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: mode is not a valid value of MidpointRounding.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a Decimal.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Decimal, MidpointRounding)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Decimal, System.MidpointRounding)
  name.vb: Round(Decimal, MidpointRounding)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Double,System.MidpointRounding)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Double,System.MidpointRounding)
  id: Round(System.Double,System.MidpointRounding)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(double, MidpointRounding)
  nameWithType: MathHelper.Round(double, MidpointRounding)
  fullName: OpenTK.Mathematics.MathHelper.Round(double, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 575
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a double-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Round(double d, MidpointRounding mode)
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round d if it is midway between two other numbers.
    return:
      type: System.Double
      description: >-
        The integer nearest d. If d is halfway between two integers, one of which is even and the other odd, then mode determines which of the two is returned.
            Note that this method returns a Double instead of an integral type.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Double, mode As MidpointRounding) As Double
  overload: OpenTK.Mathematics.MathHelper.Round*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: mode is not a valid value of MidpointRounding.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Double, MidpointRounding)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Double, System.MidpointRounding)
  name.vb: Round(Double, MidpointRounding)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.Int32)
  id: Round(System.Decimal,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(decimal, int)
  nameWithType: MathHelper.Round(decimal, int)
  fullName: OpenTK.Mathematics.MathHelper.Round(decimal, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 586
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Round(decimal d, int digits)
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    - id: digits
      type: System.Int32
      description: The number of fractional digits in the return value.
    return:
      type: System.Decimal
      description: The number nearest to d that contains a number of fractional digits equal to digits.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Decimal, digits As Integer) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Round*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: digits is less than 0 or greater than 15.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a Decimal.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Decimal, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Decimal, Integer)
  name.vb: Round(Decimal, Integer)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Double,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Double,System.Int32)
  id: Round(System.Double,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(double, int)
  nameWithType: MathHelper.Round(double, int)
  fullName: OpenTK.Mathematics.MathHelper.Round(double, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 596
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a double-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Round(double d, int digits)
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    - id: digits
      type: System.Int32
      description: The number of fractional digits in the return value.
    return:
      type: System.Double
      description: The number nearest to value that contains a number of fractional digits equal to digits.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Double, digits As Integer) As Double
  overload: OpenTK.Mathematics.MathHelper.Round*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: digits is less than 0 or greater than 15.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Double, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Double, Integer)
  name.vb: Round(Double, Integer)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Decimal)
  id: Round(System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(decimal)
  nameWithType: MathHelper.Round(decimal)
  fullName: OpenTK.Mathematics.MathHelper.Round(decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 606
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a decimal value to the nearest integral value, and rounds midpoint values to the nearest even number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Round(decimal d)
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    return:
      type: System.Decimal
      description: >-
        The integer nearest the d parameter. If the fractional component of d is halfway between two integers, one of which is even and the other odd, the even number is returned.
            Note that this method returns a Decimal instead of an integral type.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Decimal) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Round*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a Decimal.
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Decimal)
  name.vb: Round(Decimal)
- uid: OpenTK.Mathematics.MathHelper.Round(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Round(System.Double)
  id: Round(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Round(double)
  nameWithType: MathHelper.Round(double)
  fullName: OpenTK.Mathematics.MathHelper.Round(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Round
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 615
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Rounds a double-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Round(double d)
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    return:
      type: System.Double
      description: >-
        The integer nearest d. If the fractional component of d is halfway between two integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a Double instead of an integral type.
    content.vb: >-
      <Pure>

      Public Shared Function Round(d As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Round*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Round(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Round(Double)
  name.vb: Round(Double)
- uid: OpenTK.Mathematics.MathHelper.Truncate(System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Truncate(System.Decimal)
  id: Truncate(System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Truncate(decimal)
  nameWithType: MathHelper.Truncate(decimal)
  fullName: OpenTK.Mathematics.MathHelper.Truncate(decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Truncate
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 623
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculates the integral part of a specified decimal number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static decimal Truncate(decimal d)
    parameters:
    - id: d
      type: System.Decimal
      description: A number to truncate.
    return:
      type: System.Decimal
      description: The integral part of d; that is, the number that remains after any fractional digits have been discarded.
    content.vb: >-
      <Pure>

      Public Shared Function Truncate(d As Decimal) As Decimal
  overload: OpenTK.Mathematics.MathHelper.Truncate*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Truncate(Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Truncate(Decimal)
  name.vb: Truncate(Decimal)
- uid: OpenTK.Mathematics.MathHelper.Truncate(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Truncate(System.Double)
  id: Truncate(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Truncate(double)
  nameWithType: MathHelper.Truncate(double)
  fullName: OpenTK.Mathematics.MathHelper.Truncate(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Truncate
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 631
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculates the integral part of a specified double-precision floating-point number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Truncate(double d)
    parameters:
    - id: d
      type: System.Double
      description: A number to truncate.
    return:
      type: System.Double
      description: The integral part of d; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.
    content.vb: >-
      <Pure>

      Public Shared Function Truncate(d As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Truncate*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Truncate(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Truncate(Double)
  name.vb: Truncate(Double)
- uid: OpenTK.Mathematics.MathHelper.Sign(System.SByte)
  commentId: M:OpenTK.Mathematics.MathHelper.Sign(System.SByte)
  id: Sign(System.SByte)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sign(sbyte)
  nameWithType: MathHelper.Sign(sbyte)
  fullName: OpenTK.Mathematics.MathHelper.Sign(sbyte)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sign
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 639
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an integer that indicates the sign of a sbyte.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Sign(sbyte d)
    parameters:
    - id: d
      type: System.SByte
      description: A signed number.
    return:
      type: System.Int32
      description: If d ≤ -1 returns -1, if 1 ≤ d returns 1 and if d = 0 returns 0.
    content.vb: >-
      <Pure>

      Public Shared Function Sign(d As SByte) As Integer
  overload: OpenTK.Mathematics.MathHelper.Sign*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sign(SByte)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sign(SByte)
  name.vb: Sign(SByte)
- uid: OpenTK.Mathematics.MathHelper.Sign(System.Int16)
  commentId: M:OpenTK.Mathematics.MathHelper.Sign(System.Int16)
  id: Sign(System.Int16)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sign(short)
  nameWithType: MathHelper.Sign(short)
  fullName: OpenTK.Mathematics.MathHelper.Sign(short)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sign
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 647
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an integer that indicates the sign of a short.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Sign(short d)
    parameters:
    - id: d
      type: System.Int16
      description: A signed number.
    return:
      type: System.Int32
      description: If d ≤ -1 returns -1, if 1 ≤ d returns 1 and if d = 0 returns 0.
    content.vb: >-
      <Pure>

      Public Shared Function Sign(d As Short) As Integer
  overload: OpenTK.Mathematics.MathHelper.Sign*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sign(Short)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sign(Short)
  name.vb: Sign(Short)
- uid: OpenTK.Mathematics.MathHelper.Sign(System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Sign(System.Int32)
  id: Sign(System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sign(int)
  nameWithType: MathHelper.Sign(int)
  fullName: OpenTK.Mathematics.MathHelper.Sign(int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sign
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 655
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an integer that indicates the sign of a int.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Sign(int d)
    parameters:
    - id: d
      type: System.Int32
      description: A signed number.
    return:
      type: System.Int32
      description: If d ≤ -1 returns -1, if 1 ≤ d returns 1 and if d = 0 returns 0.
    content.vb: >-
      <Pure>

      Public Shared Function Sign(d As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.Sign*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sign(Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sign(Integer)
  name.vb: Sign(Integer)
- uid: OpenTK.Mathematics.MathHelper.Sign(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.Sign(System.Single)
  id: Sign(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sign(float)
  nameWithType: MathHelper.Sign(float)
  fullName: OpenTK.Mathematics.MathHelper.Sign(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sign
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 663
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an integer that indicates the sign of a float.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Sign(float d)
    parameters:
    - id: d
      type: System.Single
      description: A signed number.
    return:
      type: System.Int32
      description: If d ≤ -1 returns -1, if 1 ≤ d returns 1 and if d = 0 returns 0.
    content.vb: >-
      <Pure>

      Public Shared Function Sign(d As Single) As Integer
  overload: OpenTK.Mathematics.MathHelper.Sign*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sign(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sign(Single)
  name.vb: Sign(Single)
- uid: OpenTK.Mathematics.MathHelper.Sign(System.Decimal)
  commentId: M:OpenTK.Mathematics.MathHelper.Sign(System.Decimal)
  id: Sign(System.Decimal)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sign(decimal)
  nameWithType: MathHelper.Sign(decimal)
  fullName: OpenTK.Mathematics.MathHelper.Sign(decimal)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sign
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 671
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an integer that indicates the sign of a decimal.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Sign(decimal d)
    parameters:
    - id: d
      type: System.Decimal
      description: A signed number.
    return:
      type: System.Int32
      description: If d ≤ -1 returns -1, if 1 ≤ d returns 1 and if d = 0 returns 0.
    content.vb: >-
      <Pure>

      Public Shared Function Sign(d As Decimal) As Integer
  overload: OpenTK.Mathematics.MathHelper.Sign*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sign(Decimal)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sign(Decimal)
  name.vb: Sign(Decimal)
- uid: OpenTK.Mathematics.MathHelper.Sign(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Sign(System.Double)
  id: Sign(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sign(double)
  nameWithType: MathHelper.Sign(double)
  fullName: OpenTK.Mathematics.MathHelper.Sign(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sign
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 679
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an integer that indicates the sign of a double.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Sign(double d)
    parameters:
    - id: d
      type: System.Double
      description: A signed number.
    return:
      type: System.Int32
      description: If d ≤ -1 returns -1, if 1 ≤ d returns 1 and if d = 0 returns 0.
    content.vb: >-
      <Pure>

      Public Shared Function Sign(d As Double) As Integer
  overload: OpenTK.Mathematics.MathHelper.Sign*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sign(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sign(Double)
  name.vb: Sign(Double)
- uid: OpenTK.Mathematics.MathHelper.Sign(System.Int64)
  commentId: M:OpenTK.Mathematics.MathHelper.Sign(System.Int64)
  id: Sign(System.Int64)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Sign(long)
  nameWithType: MathHelper.Sign(long)
  fullName: OpenTK.Mathematics.MathHelper.Sign(long)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Sign
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 687
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an integer that indicates the sign of a long.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Sign(long d)
    parameters:
    - id: d
      type: System.Int64
      description: A signed number.
    return:
      type: System.Int32
      description: If d ≤ -1 returns -1, if 1 ≤ d returns 1 and if d = 0 returns 0.
    content.vb: >-
      <Pure>

      Public Shared Function Sign(d As Long) As Integer
  overload: OpenTK.Mathematics.MathHelper.Sign*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Sign(Long)
  fullName.vb: OpenTK.Mathematics.MathHelper.Sign(Long)
  name.vb: Sign(Long)
- uid: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Int64)
  commentId: M:OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Int64)
  id: NextPowerOfTwo(System.Int64)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NextPowerOfTwo(long)
  nameWithType: MathHelper.NextPowerOfTwo(long)
  fullName: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(long)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NextPowerOfTwo
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 695
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the next power of two that is greater than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long NextPowerOfTwo(long n)
    parameters:
    - id: n
      type: System.Int64
      description: The specified number.
    return:
      type: System.Int64
      description: The next power of two.
    content.vb: >-
      <Pure>

      Public Shared Function NextPowerOfTwo(n As Long) As Long
  overload: OpenTK.Mathematics.MathHelper.NextPowerOfTwo*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.NextPowerOfTwo(Long)
  fullName.vb: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(Long)
  name.vb: NextPowerOfTwo(Long)
- uid: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Int32)
  id: NextPowerOfTwo(System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NextPowerOfTwo(int)
  nameWithType: MathHelper.NextPowerOfTwo(int)
  fullName: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NextPowerOfTwo
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 711
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the next power of two that is greater than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int NextPowerOfTwo(int n)
    parameters:
    - id: n
      type: System.Int32
      description: The specified number.
    return:
      type: System.Int32
      description: The next power of two.
    content.vb: >-
      <Pure>

      Public Shared Function NextPowerOfTwo(n As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.NextPowerOfTwo*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.NextPowerOfTwo(Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(Integer)
  name.vb: NextPowerOfTwo(Integer)
- uid: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Single)
  id: NextPowerOfTwo(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NextPowerOfTwo(float)
  nameWithType: MathHelper.NextPowerOfTwo(float)
  fullName: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NextPowerOfTwo
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 727
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the next power of two that is greater than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float NextPowerOfTwo(float n)
    parameters:
    - id: n
      type: System.Single
      description: The specified number.
    return:
      type: System.Single
      description: The next power of two.
    content.vb: >-
      <Pure>

      Public Shared Function NextPowerOfTwo(n As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.NextPowerOfTwo*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.NextPowerOfTwo(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(Single)
  name.vb: NextPowerOfTwo(Single)
- uid: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Double)
  id: NextPowerOfTwo(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NextPowerOfTwo(double)
  nameWithType: MathHelper.NextPowerOfTwo(double)
  fullName: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NextPowerOfTwo
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 743
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns the next power of two that is greater than or equal to the specified number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double NextPowerOfTwo(double n)
    parameters:
    - id: n
      type: System.Double
      description: The specified number.
    return:
      type: System.Double
      description: The next power of two.
    content.vb: >-
      <Pure>

      Public Shared Function NextPowerOfTwo(n As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.NextPowerOfTwo*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.NextPowerOfTwo(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.NextPowerOfTwo(Double)
  name.vb: NextPowerOfTwo(Double)
- uid: OpenTK.Mathematics.MathHelper.Factorial(System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Factorial(System.Int32)
  id: Factorial(System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Factorial(int)
  nameWithType: MathHelper.Factorial(int)
  fullName: OpenTK.Mathematics.MathHelper.Factorial(int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Factorial
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 759
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculates the factorial of a given natural number.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long Factorial(int n)
    parameters:
    - id: n
      type: System.Int32
      description: The number.
    return:
      type: System.Int64
      description: The factorial of <code class="paramref">n</code>.
    content.vb: >-
      <Pure>

      Public Shared Function Factorial(n As Integer) As Long
  overload: OpenTK.Mathematics.MathHelper.Factorial*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Factorial(Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Factorial(Integer)
  name.vb: Factorial(Integer)
- uid: OpenTK.Mathematics.MathHelper.BinomialCoefficient(System.Int32,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.BinomialCoefficient(System.Int32,System.Int32)
  id: BinomialCoefficient(System.Int32,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: BinomialCoefficient(int, int)
  nameWithType: MathHelper.BinomialCoefficient(int, int)
  fullName: OpenTK.Mathematics.MathHelper.BinomialCoefficient(int, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: BinomialCoefficient
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 778
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Calculates the binomial coefficient <code class="paramref">n</code> above <code class="paramref">k</code>.
  example: []
  syntax:
    content: >-
      [Pure]

      public static long BinomialCoefficient(int n, int k)
    parameters:
    - id: n
      type: System.Int32
      description: The n.
    - id: k
      type: System.Int32
      description: The k.
    return:
      type: System.Int64
      description: n! / (k! * (n - k)!).
    content.vb: >-
      <Pure>

      Public Shared Function BinomialCoefficient(n As Integer, k As Integer) As Long
  overload: OpenTK.Mathematics.MathHelper.BinomialCoefficient*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.BinomialCoefficient(Integer, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.BinomialCoefficient(Integer, Integer)
  name.vb: BinomialCoefficient(Integer, Integer)
- uid: OpenTK.Mathematics.MathHelper.InverseSqrtFast(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.InverseSqrtFast(System.Single)
  id: InverseSqrtFast(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: InverseSqrtFast(float)
  nameWithType: MathHelper.InverseSqrtFast(float)
  fullName: OpenTK.Mathematics.MathHelper.InverseSqrtFast(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: InverseSqrtFast
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 795
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an approximation of the inverse square root of left number.
  remarks: >-
    This is an improved implementation of the the method known as Carmack's inverse square root

    which is found in the Quake III source code. This implementation comes from

    http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see

    http://www.beyond3d.com/content/articles/8/.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float InverseSqrtFast(float x)
    parameters:
    - id: x
      type: System.Single
      description: A number.
    return:
      type: System.Single
      description: An approximation of the inverse square root of the specified number, with an upper error bound of 0.001.
    content.vb: >-
      <Pure>

      Public Shared Function InverseSqrtFast(x As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.InverseSqrtFast*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.InverseSqrtFast(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.InverseSqrtFast(Single)
  name.vb: InverseSqrtFast(Single)
- uid: OpenTK.Mathematics.MathHelper.InverseSqrtFast(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.InverseSqrtFast(System.Double)
  id: InverseSqrtFast(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: InverseSqrtFast(double)
  nameWithType: MathHelper.InverseSqrtFast(double)
  fullName: OpenTK.Mathematics.MathHelper.InverseSqrtFast(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: InverseSqrtFast
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 822
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Returns an approximation of the inverse square root of left number.
  remarks: >-
    This is an improved implementation of the the method known as Carmack's inverse square root

    which is found in the Quake III source code. This implementation comes from

    http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see

    http://www.beyond3d.com/content/articles/8/.

    double magic number from: https://cs.uwaterloo.ca/~m32rober/rsqrt.pdf

    chapter 4.8.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double InverseSqrtFast(double x)
    parameters:
    - id: x
      type: System.Double
      description: A number.
    return:
      type: System.Double
      description: An approximation of the inverse square root of the specified number, with an upper error bound of 0.001.
    content.vb: >-
      <Pure>

      Public Shared Function InverseSqrtFast(x As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.InverseSqrtFast*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.InverseSqrtFast(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.InverseSqrtFast(Double)
  name.vb: InverseSqrtFast(Double)
- uid: OpenTK.Mathematics.MathHelper.DegreesToRadians(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.DegreesToRadians(System.Single)
  id: DegreesToRadians(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: DegreesToRadians(float)
  nameWithType: MathHelper.DegreesToRadians(float)
  fullName: OpenTK.Mathematics.MathHelper.DegreesToRadians(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: DegreesToRadians
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 841
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Convert degrees to radians.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float DegreesToRadians(float degrees)
    parameters:
    - id: degrees
      type: System.Single
      description: An angle in degrees.
    return:
      type: System.Single
      description: The angle expressed in radians.
    content.vb: >-
      <Pure>

      Public Shared Function DegreesToRadians(degrees As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.DegreesToRadians*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.DegreesToRadians(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.DegreesToRadians(Single)
  name.vb: DegreesToRadians(Single)
- uid: OpenTK.Mathematics.MathHelper.RadiansToDegrees(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.RadiansToDegrees(System.Single)
  id: RadiansToDegrees(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: RadiansToDegrees(float)
  nameWithType: MathHelper.RadiansToDegrees(float)
  fullName: OpenTK.Mathematics.MathHelper.RadiansToDegrees(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: RadiansToDegrees
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 853
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Convert radians to degrees.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float RadiansToDegrees(float radians)
    parameters:
    - id: radians
      type: System.Single
      description: An angle in radians.
    return:
      type: System.Single
      description: The angle expressed in degrees.
    content.vb: >-
      <Pure>

      Public Shared Function RadiansToDegrees(radians As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.RadiansToDegrees*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.RadiansToDegrees(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.RadiansToDegrees(Single)
  name.vb: RadiansToDegrees(Single)
- uid: OpenTK.Mathematics.MathHelper.DegreesToRadians(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.DegreesToRadians(System.Double)
  id: DegreesToRadians(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: DegreesToRadians(double)
  nameWithType: MathHelper.DegreesToRadians(double)
  fullName: OpenTK.Mathematics.MathHelper.DegreesToRadians(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: DegreesToRadians
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 865
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Convert degrees to radians.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double DegreesToRadians(double degrees)
    parameters:
    - id: degrees
      type: System.Double
      description: An angle in degrees.
    return:
      type: System.Double
      description: The angle expressed in radians.
    content.vb: >-
      <Pure>

      Public Shared Function DegreesToRadians(degrees As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.DegreesToRadians*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.DegreesToRadians(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.DegreesToRadians(Double)
  name.vb: DegreesToRadians(Double)
- uid: OpenTK.Mathematics.MathHelper.RadiansToDegrees(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.RadiansToDegrees(System.Double)
  id: RadiansToDegrees(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: RadiansToDegrees(double)
  nameWithType: MathHelper.RadiansToDegrees(double)
  fullName: OpenTK.Mathematics.MathHelper.RadiansToDegrees(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: RadiansToDegrees
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 877
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Convert radians to degrees.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double RadiansToDegrees(double radians)
    parameters:
    - id: radians
      type: System.Double
      description: An angle in radians.
    return:
      type: System.Double
      description: The angle expressed in degrees.
    content.vb: >-
      <Pure>

      Public Shared Function RadiansToDegrees(radians As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.RadiansToDegrees*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.RadiansToDegrees(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.RadiansToDegrees(Double)
  name.vb: RadiansToDegrees(Double)
- uid: OpenTK.Mathematics.MathHelper.Swap``1(``0@,``0@)
  commentId: M:OpenTK.Mathematics.MathHelper.Swap``1(``0@,``0@)
  id: Swap``1(``0@,``0@)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Swap<T>(ref T, ref T)
  nameWithType: MathHelper.Swap<T>(ref T, ref T)
  fullName: OpenTK.Mathematics.MathHelper.Swap<T>(ref T, ref T)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Swap
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 890
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Swaps two values.
  example: []
  syntax:
    content: public static void Swap<T>(ref T a, ref T b)
    parameters:
    - id: a
      type: '{T}'
      description: The first value.
    - id: b
      type: '{T}'
      description: The second value.
    typeParameters:
    - id: T
      description: The type of the values to swap.
    content.vb: Public Shared Sub Swap(Of T)(a As T, b As T)
  overload: OpenTK.Mathematics.MathHelper.Swap*
  nameWithType.vb: MathHelper.Swap(Of T)(T, T)
  fullName.vb: OpenTK.Mathematics.MathHelper.Swap(Of T)(T, T)
  name.vb: Swap(Of T)(T, T)
- uid: OpenTK.Mathematics.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)
  id: Clamp(System.Int32,System.Int32,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Clamp(int, int, int)
  nameWithType: MathHelper.Clamp(int, int, int)
  fullName: OpenTK.Mathematics.MathHelper.Clamp(int, int, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Clamp
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 899
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamps a number between a minimum and a maximum.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int Clamp(int n, int min, int max)
    parameters:
    - id: n
      type: System.Int32
      description: The number to clamp.
    - id: min
      type: System.Int32
      description: The minimum allowed value.
    - id: max
      type: System.Int32
      description: The maximum allowed value.
    return:
      type: System.Int32
      description: min, if n is lower than min; max, if n is higher than max; n otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Clamp(n As Integer, min As Integer, max As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.Clamp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Clamp(Integer, Integer, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.Clamp(Integer, Integer, Integer)
  name.vb: Clamp(Integer, Integer, Integer)
- uid: OpenTK.Mathematics.MathHelper.Clamp(System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.Clamp(System.Single,System.Single,System.Single)
  id: Clamp(System.Single,System.Single,System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Clamp(float, float, float)
  nameWithType: MathHelper.Clamp(float, float, float)
  fullName: OpenTK.Mathematics.MathHelper.Clamp(float, float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Clamp
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 912
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamps a number between a minimum and a maximum.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float Clamp(float n, float min, float max)
    parameters:
    - id: n
      type: System.Single
      description: The number to clamp.
    - id: min
      type: System.Single
      description: The minimum allowed value.
    - id: max
      type: System.Single
      description: The maximum allowed value.
    return:
      type: System.Single
      description: min, if n is lower than min; max, if n is higher than max; n otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Clamp(n As Single, min As Single, max As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.Clamp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Clamp(Single, Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.Clamp(Single, Single, Single)
  name.vb: Clamp(Single, Single, Single)
- uid: OpenTK.Mathematics.MathHelper.Clamp(System.Double,System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Clamp(System.Double,System.Double,System.Double)
  id: Clamp(System.Double,System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Clamp(double, double, double)
  nameWithType: MathHelper.Clamp(double, double, double)
  fullName: OpenTK.Mathematics.MathHelper.Clamp(double, double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Clamp
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 925
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamps a number between a minimum and a maximum.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Clamp(double n, double min, double max)
    parameters:
    - id: n
      type: System.Double
      description: The number to clamp.
    - id: min
      type: System.Double
      description: The minimum allowed value.
    - id: max
      type: System.Double
      description: The maximum allowed value.
    return:
      type: System.Double
      description: min, if n is lower than min; max, if n is higher than max; n otherwise.
    content.vb: >-
      <Pure>

      Public Shared Function Clamp(n As Double, min As Double, max As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Clamp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Clamp(Double, Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Clamp(Double, Double, Double)
  name.vb: Clamp(Double, Double, Double)
- uid: OpenTK.Mathematics.MathHelper.MapRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.MapRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MapRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: MapRange(int, int, int, int, int)
  nameWithType: MathHelper.MapRange(int, int, int, int, int)
  fullName: OpenTK.Mathematics.MathHelper.MapRange(int, int, int, int, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MapRange
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 941
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scales the specified number linearly between a minimum and a maximum.
  remarks: If the value range is zero, this function will throw a divide by zero exception.
  example: []
  syntax:
    content: >-
      [Pure]

      public static int MapRange(int value, int valueMin, int valueMax, int resultMin, int resultMax)
    parameters:
    - id: value
      type: System.Int32
      description: The number to scale.
    - id: valueMin
      type: System.Int32
      description: The minimum expected number (inclusive).
    - id: valueMax
      type: System.Int32
      description: The maximum expected number (inclusive).
    - id: resultMin
      type: System.Int32
      description: The minimum output number (inclusive).
    - id: resultMax
      type: System.Int32
      description: The maximum output number (inclusive).
    return:
      type: System.Int32
      description: The number, scaled linearly between min and max.
    content.vb: >-
      <Pure>

      Public Shared Function MapRange(value As Integer, valueMin As Integer, valueMax As Integer, resultMin As Integer, resultMax As Integer) As Integer
  overload: OpenTK.Mathematics.MathHelper.MapRange*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.MapRange(Integer, Integer, Integer, Integer, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.MapRange(Integer, Integer, Integer, Integer, Integer)
  name.vb: MapRange(Integer, Integer, Integer, Integer, Integer)
- uid: OpenTK.Mathematics.MathHelper.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  id: MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: MapRange(float, float, float, float, float)
  nameWithType: MathHelper.MapRange(float, float, float, float, float)
  fullName: OpenTK.Mathematics.MathHelper.MapRange(float, float, float, float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MapRange
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 959
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scales the specified number linearly between a minimum and a maximum.
  remarks: If the value range is zero, this function will throw a divide by zero exception.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float MapRange(float value, float valueMin, float valueMax, float resultMin, float resultMax)
    parameters:
    - id: value
      type: System.Single
      description: The number to scale.
    - id: valueMin
      type: System.Single
      description: The minimum expected number (inclusive).
    - id: valueMax
      type: System.Single
      description: The maximum expected number (inclusive).
    - id: resultMin
      type: System.Single
      description: The minimum output number (inclusive).
    - id: resultMax
      type: System.Single
      description: The maximum output number (inclusive).
    return:
      type: System.Single
      description: The number, scaled linearly between min and max.
    content.vb: >-
      <Pure>

      Public Shared Function MapRange(value As Single, valueMin As Single, valueMax As Single, resultMin As Single, resultMax As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.MapRange*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.MapRange(Single, Single, Single, Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.MapRange(Single, Single, Single, Single, Single)
  name.vb: MapRange(Single, Single, Single, Single, Single)
- uid: OpenTK.Mathematics.MathHelper.MapRange(System.Double,System.Double,System.Double,System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.MapRange(System.Double,System.Double,System.Double,System.Double,System.Double)
  id: MapRange(System.Double,System.Double,System.Double,System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: MapRange(double, double, double, double, double)
  nameWithType: MathHelper.MapRange(double, double, double, double, double)
  fullName: OpenTK.Mathematics.MathHelper.MapRange(double, double, double, double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: MapRange
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 977
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Scales the specified number linearly between a minimum and a maximum.
  remarks: If the value range is zero, this function will throw a divide by zero exception.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double MapRange(double value, double valueMin, double valueMax, double resultMin, double resultMax)
    parameters:
    - id: value
      type: System.Double
      description: The number to scale.
    - id: valueMin
      type: System.Double
      description: The minimum expected number (inclusive).
    - id: valueMax
      type: System.Double
      description: The maximum expected number (inclusive).
    - id: resultMin
      type: System.Double
      description: The minimum output number (inclusive).
    - id: resultMax
      type: System.Double
      description: The maximum output number (inclusive).
    return:
      type: System.Double
      description: The number, scaled linearly between min and max.
    content.vb: >-
      <Pure>

      Public Shared Function MapRange(value As Double, valueMin As Double, valueMax As Double, resultMin As Double, resultMax As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.MapRange*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.MapRange(Double, Double, Double, Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.MapRange(Double, Double, Double, Double, Double)
  name.vb: MapRange(Double, Double, Double, Double, Double)
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEqual(System.Single,System.Single,System.Int32)
  commentId: M:OpenTK.Mathematics.MathHelper.ApproximatelyEqual(System.Single,System.Single,System.Int32)
  id: ApproximatelyEqual(System.Single,System.Single,System.Int32)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ApproximatelyEqual(float, float, int)
  nameWithType: MathHelper.ApproximatelyEqual(float, float, int)
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEqual(float, float, int)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ApproximatelyEqual
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 995
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Approximates floating point equality with a maximum number of different bits.

    This is typically used in place of an epsilon comparison.

    see: https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/

    see: https://stackoverflow.com/questions/3874627/floating-point-comparison-functions-for-c-sharp.
  example: []
  syntax:
    content: >-
      [Pure]

      public static bool ApproximatelyEqual(float a, float b, int maxDeltaBits)
    parameters:
    - id: a
      type: System.Single
      description: the first value to compare.
    - id: b
      type: System.Single
      description: '>the second value to compare.'
    - id: maxDeltaBits
      type: System.Int32
      description: the number of floating point bits to check.
    return:
      type: System.Boolean
      description: true if the values are approximately equal; otherwise, false.
    content.vb: >-
      <Pure>

      Public Shared Function ApproximatelyEqual(a As Single, b As Single, maxDeltaBits As Integer) As Boolean
  overload: OpenTK.Mathematics.MathHelper.ApproximatelyEqual*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.ApproximatelyEqual(Single, Single, Integer)
  fullName.vb: OpenTK.Mathematics.MathHelper.ApproximatelyEqual(Single, Single, Integer)
  name.vb: ApproximatelyEqual(Single, Single, Integer)
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(System.Double,System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(System.Double,System.Double,System.Double)
  id: ApproximatelyEqualEpsilon(System.Double,System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ApproximatelyEqualEpsilon(double, double, double)
  nameWithType: MathHelper.ApproximatelyEqualEpsilon(double, double, double)
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(double, double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ApproximatelyEqualEpsilon
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1026
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Approximates double-precision floating point equality by an epsilon (maximum error) value.

    This method is designed as a "fits-all" solution and attempts to handle as many cases as possible.
  example: []
  syntax:
    content: >-
      [Pure]

      public static bool ApproximatelyEqualEpsilon(double a, double b, double epsilon)
    parameters:
    - id: a
      type: System.Double
      description: The first float.
    - id: b
      type: System.Double
      description: The second float.
    - id: epsilon
      type: System.Double
      description: The maximum error between the two.
    return:
      type: System.Boolean
      description: " <returns>true</returns> if the values are approximately equal within the error margin; otherwise,\r\n<returns>false</returns>."
    content.vb: >-
      <Pure>

      Public Shared Function ApproximatelyEqualEpsilon(a As Double, b As Double, epsilon As Double) As Boolean
  overload: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.ApproximatelyEqualEpsilon(Double, Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(Double, Double, Double)
  name.vb: ApproximatelyEqualEpsilon(Double, Double, Double)
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(System.Single,System.Single,System.Single)
  id: ApproximatelyEqualEpsilon(System.Single,System.Single,System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ApproximatelyEqualEpsilon(float, float, float)
  nameWithType: MathHelper.ApproximatelyEqualEpsilon(float, float, float)
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(float, float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ApproximatelyEqualEpsilon
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1063
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Approximates single-precision floating point equality by an epsilon (maximum error) value.

    This method is designed as a "fits-all" solution and attempts to handle as many cases as possible.
  example: []
  syntax:
    content: >-
      [Pure]

      public static bool ApproximatelyEqualEpsilon(float a, float b, float epsilon)
    parameters:
    - id: a
      type: System.Single
      description: The first float.
    - id: b
      type: System.Single
      description: The second float.
    - id: epsilon
      type: System.Single
      description: The maximum error between the two.
    return:
      type: System.Boolean
      description: >-
        <returns>true</returns> if the values are approximately equal within the error margin; otherwise,

        <returns>false</returns>.
    content.vb: >-
      <Pure>

      Public Shared Function ApproximatelyEqualEpsilon(a As Single, b As Single, epsilon As Single) As Boolean
  overload: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.ApproximatelyEqualEpsilon(Single, Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(Single, Single, Single)
  name.vb: ApproximatelyEqualEpsilon(Single, Single, Single)
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(System.Single,System.Single,System.Single)
  id: ApproximatelyEquivalent(System.Single,System.Single,System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ApproximatelyEquivalent(float, float, float)
  nameWithType: MathHelper.ApproximatelyEquivalent(float, float, float)
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(float, float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ApproximatelyEquivalent
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1100
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Approximates equivalence between two single-precision floating-point numbers on a direct human scale.

    It is important to note that this does not approximate equality - instead, it merely checks whether or not

    two numbers could be considered equivalent to each other within a certain tolerance. The tolerance is

    inclusive.
  example: []
  syntax:
    content: >-
      [Pure]

      public static bool ApproximatelyEquivalent(float a, float b, float tolerance)
    parameters:
    - id: a
      type: System.Single
      description: The first value to compare.
    - id: b
      type: System.Single
      description: The second value to compare.
    - id: tolerance
      type: System.Single
      description: The tolerance within which the two values would be considered equivalent.
    return:
      type: System.Boolean
      description: Whether or not the values can be considered equivalent within the tolerance.
    content.vb: >-
      <Pure>

      Public Shared Function ApproximatelyEquivalent(a As Single, b As Single, tolerance As Single) As Boolean
  overload: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.ApproximatelyEquivalent(Single, Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(Single, Single, Single)
  name.vb: ApproximatelyEquivalent(Single, Single, Single)
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(System.Double,System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(System.Double,System.Double,System.Double)
  id: ApproximatelyEquivalent(System.Double,System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ApproximatelyEquivalent(double, double, double)
  nameWithType: MathHelper.ApproximatelyEquivalent(double, double, double)
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(double, double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ApproximatelyEquivalent
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1124
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: >-
    Approximates equivalence between two double-precision floating-point numbers on a direct human scale.

    It is important to note that this does not approximate equality - instead, it merely checks whether or not

    two numbers could be considered equivalent to each other within a certain tolerance. The tolerance is

    inclusive.
  example: []
  syntax:
    content: >-
      [Pure]

      public static bool ApproximatelyEquivalent(double a, double b, double tolerance)
    parameters:
    - id: a
      type: System.Double
      description: The first value to compare.
    - id: b
      type: System.Double
      description: The second value to compare.
    - id: tolerance
      type: System.Double
      description: The tolerance within which the two values would be considered equivalent.
    return:
      type: System.Boolean
      description: Whether or not the values can be considered equivalent within the tolerance.
    content.vb: >-
      <Pure>

      Public Shared Function ApproximatelyEquivalent(a As Double, b As Double, tolerance As Double) As Boolean
  overload: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.ApproximatelyEquivalent(Double, Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(Double, Double, Double)
  name.vb: ApproximatelyEquivalent(Double, Double, Double)
- uid: OpenTK.Mathematics.MathHelper.Lerp(System.Single,System.Single,System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.Lerp(System.Single,System.Single,System.Single)
  id: Lerp(System.Single,System.Single,System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Lerp(float, float, float)
  nameWithType: MathHelper.Lerp(float, float, float)
  fullName: OpenTK.Mathematics.MathHelper.Lerp(float, float, float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1145
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Linearly interpolates between a and b by t.
  example: []
  syntax:
    content: >-
      [Pure]

      public static float Lerp(float start, float end, float t)
    parameters:
    - id: start
      type: System.Single
      description: Start value.
    - id: end
      type: System.Single
      description: End value.
    - id: t
      type: System.Single
      description: Value of the interpollation between a and b. Clamped to [0, 1].
    return:
      type: System.Single
      description: The interpolated result between the a and b values.
    content.vb: >-
      <Pure>

      Public Shared Function Lerp(start As Single, [end] As Single, t As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.Lerp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Lerp(Single, Single, Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.Lerp(Single, Single, Single)
  name.vb: Lerp(Single, Single, Single)
- uid: OpenTK.Mathematics.MathHelper.Lerp(System.Double,System.Double,System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.Lerp(System.Double,System.Double,System.Double)
  id: Lerp(System.Double,System.Double,System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: Lerp(double, double, double)
  nameWithType: MathHelper.Lerp(double, double, double)
  fullName: OpenTK.Mathematics.MathHelper.Lerp(double, double, double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: Lerp
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1159
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Linearly interpolates between a and b by t.
  example: []
  syntax:
    content: >-
      [Pure]

      public static double Lerp(double start, double end, double t)
    parameters:
    - id: start
      type: System.Double
      description: Start value.
    - id: end
      type: System.Double
      description: End value.
    - id: t
      type: System.Double
      description: Value of the interpollation between a and b. Clamped to [0, 1].
    return:
      type: System.Double
      description: The interpolated result between the a and b values.
    content.vb: >-
      <Pure>

      Public Shared Function Lerp(start As Double, [end] As Double, t As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.Lerp*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: MathHelper.Lerp(Double, Double, Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.Lerp(Double, Double, Double)
  name.vb: Lerp(Double, Double, Double)
- uid: OpenTK.Mathematics.MathHelper.NormalizeAngle(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.NormalizeAngle(System.Single)
  id: NormalizeAngle(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NormalizeAngle(float)
  nameWithType: MathHelper.NormalizeAngle(float)
  fullName: OpenTK.Mathematics.MathHelper.NormalizeAngle(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NormalizeAngle
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1171
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Normalizes an angle to the range (-180, 180].
  example: []
  syntax:
    content: public static float NormalizeAngle(float angle)
    parameters:
    - id: angle
      type: System.Single
      description: The angle in degrees to normalize.
    return:
      type: System.Single
      description: The normalized angle in the range (-180, 180].
    content.vb: Public Shared Function NormalizeAngle(angle As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.NormalizeAngle*
  nameWithType.vb: MathHelper.NormalizeAngle(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.NormalizeAngle(Single)
  name.vb: NormalizeAngle(Single)
- uid: OpenTK.Mathematics.MathHelper.NormalizeAngle(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.NormalizeAngle(System.Double)
  id: NormalizeAngle(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NormalizeAngle(double)
  nameWithType: MathHelper.NormalizeAngle(double)
  fullName: OpenTK.Mathematics.MathHelper.NormalizeAngle(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NormalizeAngle
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1190
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Normalizes an angle to the range (-180, 180].
  example: []
  syntax:
    content: public static double NormalizeAngle(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle in degrees to normalize.
    return:
      type: System.Double
      description: The normalized angle in the range (-180, 180].
    content.vb: Public Shared Function NormalizeAngle(angle As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.NormalizeAngle*
  nameWithType.vb: MathHelper.NormalizeAngle(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.NormalizeAngle(Double)
  name.vb: NormalizeAngle(Double)
- uid: OpenTK.Mathematics.MathHelper.NormalizeRadians(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.NormalizeRadians(System.Single)
  id: NormalizeRadians(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NormalizeRadians(float)
  nameWithType: MathHelper.NormalizeRadians(float)
  fullName: OpenTK.Mathematics.MathHelper.NormalizeRadians(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NormalizeRadians
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1209
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Normalizes an angle to the range (-π, π].
  example: []
  syntax:
    content: public static float NormalizeRadians(float angle)
    parameters:
    - id: angle
      type: System.Single
      description: The angle in radians to normalize.
    return:
      type: System.Single
      description: The normalized angle in the range (-π, π].
    content.vb: Public Shared Function NormalizeRadians(angle As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.NormalizeRadians*
  nameWithType.vb: MathHelper.NormalizeRadians(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.NormalizeRadians(Single)
  name.vb: NormalizeRadians(Single)
- uid: OpenTK.Mathematics.MathHelper.NormalizeRadians(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.NormalizeRadians(System.Double)
  id: NormalizeRadians(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: NormalizeRadians(double)
  nameWithType: MathHelper.NormalizeRadians(double)
  fullName: OpenTK.Mathematics.MathHelper.NormalizeRadians(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: NormalizeRadians
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1228
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Normalizes an angle to the range (-π, π].
  example: []
  syntax:
    content: public static double NormalizeRadians(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle in radians to normalize.
    return:
      type: System.Double
      description: The normalized angle in the range (-π, π].
    content.vb: Public Shared Function NormalizeRadians(angle As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.NormalizeRadians*
  nameWithType.vb: MathHelper.NormalizeRadians(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.NormalizeRadians(Double)
  name.vb: NormalizeRadians(Double)
- uid: OpenTK.Mathematics.MathHelper.ClampAngle(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.ClampAngle(System.Single)
  id: ClampAngle(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ClampAngle(float)
  nameWithType: MathHelper.ClampAngle(float)
  fullName: OpenTK.Mathematics.MathHelper.ClampAngle(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ClampAngle
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1247
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamps an angle to the range [0, 360).
  example: []
  syntax:
    content: public static float ClampAngle(float angle)
    parameters:
    - id: angle
      type: System.Single
      description: The angle to clamp in degrees.
    return:
      type: System.Single
      description: The clamped angle in the range [0, 360).
    content.vb: Public Shared Function ClampAngle(angle As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.ClampAngle*
  nameWithType.vb: MathHelper.ClampAngle(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.ClampAngle(Single)
  name.vb: ClampAngle(Single)
- uid: OpenTK.Mathematics.MathHelper.ClampAngle(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.ClampAngle(System.Double)
  id: ClampAngle(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ClampAngle(double)
  nameWithType: MathHelper.ClampAngle(double)
  fullName: OpenTK.Mathematics.MathHelper.ClampAngle(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ClampAngle
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1266
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamps an angle to the range [0, 360).
  example: []
  syntax:
    content: public static double ClampAngle(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle to clamp in degrees.
    return:
      type: System.Double
      description: The clamped angle in the range [0, 360).
    content.vb: Public Shared Function ClampAngle(angle As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.ClampAngle*
  nameWithType.vb: MathHelper.ClampAngle(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.ClampAngle(Double)
  name.vb: ClampAngle(Double)
- uid: OpenTK.Mathematics.MathHelper.ClampRadians(System.Single)
  commentId: M:OpenTK.Mathematics.MathHelper.ClampRadians(System.Single)
  id: ClampRadians(System.Single)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ClampRadians(float)
  nameWithType: MathHelper.ClampRadians(float)
  fullName: OpenTK.Mathematics.MathHelper.ClampRadians(float)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ClampRadians
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1285
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamps an angle to the range [0, 2π).
  example: []
  syntax:
    content: public static float ClampRadians(float angle)
    parameters:
    - id: angle
      type: System.Single
      description: The angle to clamp in radians.
    return:
      type: System.Single
      description: The clamped angle in the range [0, 2π).
    content.vb: Public Shared Function ClampRadians(angle As Single) As Single
  overload: OpenTK.Mathematics.MathHelper.ClampRadians*
  nameWithType.vb: MathHelper.ClampRadians(Single)
  fullName.vb: OpenTK.Mathematics.MathHelper.ClampRadians(Single)
  name.vb: ClampRadians(Single)
- uid: OpenTK.Mathematics.MathHelper.ClampRadians(System.Double)
  commentId: M:OpenTK.Mathematics.MathHelper.ClampRadians(System.Double)
  id: ClampRadians(System.Double)
  parent: OpenTK.Mathematics.MathHelper
  langs:
  - csharp
  - vb
  name: ClampRadians(double)
  nameWithType: MathHelper.ClampRadians(double)
  fullName: OpenTK.Mathematics.MathHelper.ClampRadians(double)
  type: Method
  source:
    remote:
      path: src/OpenTK.Mathematics/MathHelper.cs
      branch: f3539ad1fda98af9b265e941e0aecfb4662a9bbe
      repo: https://github.com/opentk/opentk.git
    id: ClampRadians
    path: opentk/src/OpenTK.Mathematics/MathHelper.cs
    startLine: 1304
  assemblies:
  - OpenTK.Mathematics
  namespace: OpenTK.Mathematics
  summary: Clamps an angle to the range [0, 2π).
  example: []
  syntax:
    content: public static double ClampRadians(double angle)
    parameters:
    - id: angle
      type: System.Double
      description: The angle to clamp in radians.
    return:
      type: System.Double
      description: The clamped angle in the range [0, 2π).
    content.vb: Public Shared Function ClampRadians(angle As Double) As Double
  overload: OpenTK.Mathematics.MathHelper.ClampRadians*
  nameWithType.vb: MathHelper.ClampRadians(Double)
  fullName.vb: OpenTK.Mathematics.MathHelper.ClampRadians(Double)
  name.vb: ClampRadians(Double)
references:
- uid: OpenTK.Mathematics
  commentId: N:OpenTK.Mathematics
  href: OpenTK.html
  name: OpenTK.Mathematics
  nameWithType: OpenTK.Mathematics
  fullName: OpenTK.Mathematics
  spec.csharp:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
  spec.vb:
  - uid: OpenTK
    name: OpenTK
    href: OpenTK.html
  - name: .
  - uid: OpenTK.Mathematics
    name: Mathematics
    href: OpenTK.Mathematics.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: OpenTK.Mathematics.MathHelper.Abs*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Abs
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Abs(System.Decimal)
  name: Abs
  nameWithType: MathHelper.Abs
  fullName: OpenTK.Mathematics.MathHelper.Abs
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.decimal
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int16
  name: short
  nameWithType: short
  fullName: short
  nameWithType.vb: Short
  fullName.vb: Short
  name.vb: Short
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.sbyte
  name: sbyte
  nameWithType: sbyte
  fullName: sbyte
  nameWithType.vb: SByte
  fullName.vb: SByte
  name.vb: SByte
- uid: OpenTK.Mathematics.MathHelper.Sin*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Sin
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Sin(System.Double)
  name: Sin
  nameWithType: MathHelper.Sin
  fullName: OpenTK.Mathematics.MathHelper.Sin
- uid: OpenTK.Mathematics.MathHelper.Sinh*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Sinh
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Sinh(System.Double)
  name: Sinh
  nameWithType: MathHelper.Sinh
  fullName: OpenTK.Mathematics.MathHelper.Sinh
- uid: OpenTK.Mathematics.MathHelper.Asin*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Asin
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Asin(System.Double)
  name: Asin
  nameWithType: MathHelper.Asin
  fullName: OpenTK.Mathematics.MathHelper.Asin
- uid: OpenTK.Mathematics.MathHelper.Cos*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Cos
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Cos(System.Double)
  name: Cos
  nameWithType: MathHelper.Cos
  fullName: OpenTK.Mathematics.MathHelper.Cos
- uid: OpenTK.Mathematics.MathHelper.Cosh*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Cosh
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Cosh(System.Double)
  name: Cosh
  nameWithType: MathHelper.Cosh
  fullName: OpenTK.Mathematics.MathHelper.Cosh
- uid: OpenTK.Mathematics.MathHelper.Acos*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Acos
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Acos(System.Double)
  name: Acos
  nameWithType: MathHelper.Acos
  fullName: OpenTK.Mathematics.MathHelper.Acos
- uid: OpenTK.Mathematics.MathHelper.Tan*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Tan
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Tan(System.Double)
  name: Tan
  nameWithType: MathHelper.Tan
  fullName: OpenTK.Mathematics.MathHelper.Tan
- uid: OpenTK.Mathematics.MathHelper.Tanh*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Tanh
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Tanh(System.Double)
  name: Tanh
  nameWithType: MathHelper.Tanh
  fullName: OpenTK.Mathematics.MathHelper.Tanh
- uid: OpenTK.Mathematics.MathHelper.Atan*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Atan
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Atan(System.Double)
  name: Atan
  nameWithType: MathHelper.Atan
  fullName: OpenTK.Mathematics.MathHelper.Atan
- uid: OpenTK.Mathematics.MathHelper.Atan2*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Atan2
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Atan2(System.Double,System.Double)
  name: Atan2
  nameWithType: MathHelper.Atan2
  fullName: OpenTK.Mathematics.MathHelper.Atan2
- uid: OpenTK.Mathematics.MathHelper.BigMul*
  commentId: Overload:OpenTK.Mathematics.MathHelper.BigMul
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.BigMul(System.Int32,System.Int32)
  name: BigMul
  nameWithType: MathHelper.BigMul
  fullName: OpenTK.Mathematics.MathHelper.BigMul
- uid: OpenTK.Mathematics.MathHelper.Sqrt*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Sqrt
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Sqrt(System.Double)
  name: Sqrt
  nameWithType: MathHelper.Sqrt
  fullName: OpenTK.Mathematics.MathHelper.Sqrt
- uid: OpenTK.Mathematics.MathHelper.Pow*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Pow
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Pow(System.Double,System.Double)
  name: Pow
  nameWithType: MathHelper.Pow
  fullName: OpenTK.Mathematics.MathHelper.Pow
- uid: OpenTK.Mathematics.MathHelper.Ceiling*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Ceiling
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Ceiling(System.Decimal)
  name: Ceiling
  nameWithType: MathHelper.Ceiling
  fullName: OpenTK.Mathematics.MathHelper.Ceiling
- uid: OpenTK.Mathematics.MathHelper.Floor*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Floor
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Floor(System.Decimal)
  name: Floor
  nameWithType: MathHelper.Floor
  fullName: OpenTK.Mathematics.MathHelper.Floor
- uid: System.DivideByZeroException
  commentId: T:System.DivideByZeroException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.dividebyzeroexception
  name: DivideByZeroException
  nameWithType: DivideByZeroException
  fullName: System.DivideByZeroException
- uid: OpenTK.Mathematics.MathHelper.DivRem*
  commentId: Overload:OpenTK.Mathematics.MathHelper.DivRem
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.DivRem(System.Int32,System.Int32,System.Int32@)
  name: DivRem
  nameWithType: MathHelper.DivRem
  fullName: OpenTK.Mathematics.MathHelper.DivRem
- uid: OpenTK.Mathematics.MathHelper.Log*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Log
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Log(System.Double)
  name: Log
  nameWithType: MathHelper.Log
  fullName: OpenTK.Mathematics.MathHelper.Log
- uid: OpenTK.Mathematics.MathHelper.Log10*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Log10
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Log10(System.Double)
  name: Log10
  nameWithType: MathHelper.Log10
  fullName: OpenTK.Mathematics.MathHelper.Log10
- uid: OpenTK.Mathematics.MathHelper.Log2*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Log2
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Log2(System.Double)
  name: Log2
  nameWithType: MathHelper.Log2
  fullName: OpenTK.Mathematics.MathHelper.Log2
- uid: OpenTK.Mathematics.MathHelper.Exp*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Exp
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Exp(System.Double)
  name: Exp
  nameWithType: MathHelper.Exp
  fullName: OpenTK.Mathematics.MathHelper.Exp
- uid: OpenTK.Mathematics.MathHelper.IEEERemainder*
  commentId: Overload:OpenTK.Mathematics.MathHelper.IEEERemainder
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.IEEERemainder(System.Double,System.Double)
  name: IEEERemainder
  nameWithType: MathHelper.IEEERemainder
  fullName: OpenTK.Mathematics.MathHelper.IEEERemainder
- uid: OpenTK.Mathematics.MathHelper.Max*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Max
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Max(System.Byte,System.Byte)
  name: Max
  nameWithType: MathHelper.Max
  fullName: OpenTK.Mathematics.MathHelper.Max
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: OpenTK.Mathematics.MathHelper.Min*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Min
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Min(System.Byte,System.Byte)
  name: Min
  nameWithType: MathHelper.Min
  fullName: OpenTK.Mathematics.MathHelper.Min
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.overflowexception
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: OpenTK.Mathematics.MathHelper.Round*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Round
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Round(System.Decimal,System.Int32,System.MidpointRounding)
  name: Round
  nameWithType: MathHelper.Round
  fullName: OpenTK.Mathematics.MathHelper.Round
- uid: System.MidpointRounding
  commentId: T:System.MidpointRounding
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.midpointrounding
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: System.MidpointRounding
- uid: OpenTK.Mathematics.MathHelper.Truncate*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Truncate
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Truncate(System.Decimal)
  name: Truncate
  nameWithType: MathHelper.Truncate
  fullName: OpenTK.Mathematics.MathHelper.Truncate
- uid: OpenTK.Mathematics.MathHelper.Sign*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Sign
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Sign(System.SByte)
  name: Sign
  nameWithType: MathHelper.Sign
  fullName: OpenTK.Mathematics.MathHelper.Sign
- uid: OpenTK.Mathematics.MathHelper.NextPowerOfTwo*
  commentId: Overload:OpenTK.Mathematics.MathHelper.NextPowerOfTwo
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.NextPowerOfTwo(System.Int64)
  name: NextPowerOfTwo
  nameWithType: MathHelper.NextPowerOfTwo
  fullName: OpenTK.Mathematics.MathHelper.NextPowerOfTwo
- uid: OpenTK.Mathematics.MathHelper.Factorial*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Factorial
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Factorial(System.Int32)
  name: Factorial
  nameWithType: MathHelper.Factorial
  fullName: OpenTK.Mathematics.MathHelper.Factorial
- uid: OpenTK.Mathematics.MathHelper.BinomialCoefficient*
  commentId: Overload:OpenTK.Mathematics.MathHelper.BinomialCoefficient
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.BinomialCoefficient(System.Int32,System.Int32)
  name: BinomialCoefficient
  nameWithType: MathHelper.BinomialCoefficient
  fullName: OpenTK.Mathematics.MathHelper.BinomialCoefficient
- uid: OpenTK.Mathematics.MathHelper.InverseSqrtFast*
  commentId: Overload:OpenTK.Mathematics.MathHelper.InverseSqrtFast
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.InverseSqrtFast(System.Single)
  name: InverseSqrtFast
  nameWithType: MathHelper.InverseSqrtFast
  fullName: OpenTK.Mathematics.MathHelper.InverseSqrtFast
- uid: OpenTK.Mathematics.MathHelper.DegreesToRadians*
  commentId: Overload:OpenTK.Mathematics.MathHelper.DegreesToRadians
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.DegreesToRadians(System.Single)
  name: DegreesToRadians
  nameWithType: MathHelper.DegreesToRadians
  fullName: OpenTK.Mathematics.MathHelper.DegreesToRadians
- uid: OpenTK.Mathematics.MathHelper.RadiansToDegrees*
  commentId: Overload:OpenTK.Mathematics.MathHelper.RadiansToDegrees
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.RadiansToDegrees(System.Single)
  name: RadiansToDegrees
  nameWithType: MathHelper.RadiansToDegrees
  fullName: OpenTK.Mathematics.MathHelper.RadiansToDegrees
- uid: OpenTK.Mathematics.MathHelper.Swap*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Swap
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Swap``1(``0@,``0@)
  name: Swap
  nameWithType: MathHelper.Swap
  fullName: OpenTK.Mathematics.MathHelper.Swap
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: OpenTK.Mathematics.MathHelper.Clamp*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Clamp
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)
  name: Clamp
  nameWithType: MathHelper.Clamp
  fullName: OpenTK.Mathematics.MathHelper.Clamp
- uid: OpenTK.Mathematics.MathHelper.MapRange*
  commentId: Overload:OpenTK.Mathematics.MathHelper.MapRange
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.MapRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  name: MapRange
  nameWithType: MathHelper.MapRange
  fullName: OpenTK.Mathematics.MathHelper.MapRange
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEqual*
  commentId: Overload:OpenTK.Mathematics.MathHelper.ApproximatelyEqual
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.ApproximatelyEqual(System.Single,System.Single,System.Int32)
  name: ApproximatelyEqual
  nameWithType: MathHelper.ApproximatelyEqual
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEqual
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon*
  commentId: Overload:OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon(System.Double,System.Double,System.Double)
  name: ApproximatelyEqualEpsilon
  nameWithType: MathHelper.ApproximatelyEqualEpsilon
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEqualEpsilon
- uid: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent*
  commentId: Overload:OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent(System.Single,System.Single,System.Single)
  name: ApproximatelyEquivalent
  nameWithType: MathHelper.ApproximatelyEquivalent
  fullName: OpenTK.Mathematics.MathHelper.ApproximatelyEquivalent
- uid: OpenTK.Mathematics.MathHelper.Lerp*
  commentId: Overload:OpenTK.Mathematics.MathHelper.Lerp
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.Lerp(System.Single,System.Single,System.Single)
  name: Lerp
  nameWithType: MathHelper.Lerp
  fullName: OpenTK.Mathematics.MathHelper.Lerp
- uid: OpenTK.Mathematics.MathHelper.NormalizeAngle*
  commentId: Overload:OpenTK.Mathematics.MathHelper.NormalizeAngle
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.NormalizeAngle(System.Single)
  name: NormalizeAngle
  nameWithType: MathHelper.NormalizeAngle
  fullName: OpenTK.Mathematics.MathHelper.NormalizeAngle
- uid: OpenTK.Mathematics.MathHelper.NormalizeRadians*
  commentId: Overload:OpenTK.Mathematics.MathHelper.NormalizeRadians
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.NormalizeRadians(System.Single)
  name: NormalizeRadians
  nameWithType: MathHelper.NormalizeRadians
  fullName: OpenTK.Mathematics.MathHelper.NormalizeRadians
- uid: OpenTK.Mathematics.MathHelper.ClampAngle*
  commentId: Overload:OpenTK.Mathematics.MathHelper.ClampAngle
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.ClampAngle(System.Single)
  name: ClampAngle
  nameWithType: MathHelper.ClampAngle
  fullName: OpenTK.Mathematics.MathHelper.ClampAngle
- uid: OpenTK.Mathematics.MathHelper.ClampRadians*
  commentId: Overload:OpenTK.Mathematics.MathHelper.ClampRadians
  href: OpenTK.Mathematics.MathHelper.html#OpenTK.Mathematics.MathHelper.ClampRadians(System.Single)
  name: ClampRadians
  nameWithType: MathHelper.ClampRadians
  fullName: OpenTK.Mathematics.MathHelper.ClampRadians
